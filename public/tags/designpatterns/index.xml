<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> </title>
    <link>http://blog.michaelhamrah.com/tags/designpatterns/</link>
    <language>en-us</language>
    <author>Michael Hamrah</author>
    <rights>(C) 2015</rights>
    <updated>2009-12-21 00:00:00 &#43;0000 UTC</updated>

    
      
        <item>
          <title>Organizing Javascript for Event Pooling with jQuery</title>
          <link>http://blog.michaelhamrah.com/2009/12/organizing-javascript-for-event-pooling-with-jquery/</link>
          <pubDate>Mon, 21 Dec 2009 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2009/12/organizing-javascript-for-event-pooling-with-jquery/</guid>
          <description>

&lt;p&gt;It turns out my most popular article of the past year was &lt;a href=&#34;http://www.michaelhamrah.com/blog/index.php/2008/12/event-pooling-with-jquery-using-bind-and-trigger-managing-complex-javascript/&#34;&gt;Event Pooling with jQuery&amp;#8217;s Bind and Trigger&lt;/a&gt;.&amp;nbsp; I wanted to write a follow up article taking this approach one step further by discussing how to logically organize the relationship between binders and triggers on a javascript heavy UI.&amp;nbsp; It&amp;#8217;s important to properly design the code structure of your javascript to create a flexible and maintainable system.&amp;nbsp; This is essential for any software application. &amp;nbsp;For javascript development, you don&amp;#8217;t want to end up with odd dependencies hindering changes or randomly bubbled events causing bugs.&lt;/p&gt;

&lt;h3 id=&#34;event-pooling-a-quick-review:b1aa778a626daa40c556fbd74954875f&#34;&gt;Event Pooling: A Quick Review&lt;/h3&gt;

&lt;p&gt;What is event pooling and why is it important?&amp;nbsp; Quite simply it&amp;#8217;s a way to manage dependencies.&amp;nbsp; You create a loosely coupled system between the thing which triggers an action to happen and the thing which responds to the action, called the binder.&amp;nbsp; jQuery has some cool bind and trigger functionality which allows you to create custom events for event pooling- and you can use this to easily wire up multiple functions to write complex javascript with ease.&amp;nbsp; I encourage you to check out the original how-to article &lt;a href=&#34;../index.php/2008/12/event-pooling-with-jquery-using-bind-and-trigger-managing-complex-javascript/&#34;&gt;Event Pooling with jQuery&amp;#8217;s Bind and Trigger&lt;/a&gt; to learn more. &amp;nbsp;It&amp;#8217;s a very powerful technique.&lt;/p&gt;

&lt;p&gt;Now, as we all know, with great power comes great responsibility.&amp;nbsp; If you structure the relationship between binders and triggers incorrectly you&amp;#8217;ll end up with a mess on your hands, a spider web of logic which is almost impossible to unwind.&amp;nbsp; Here are some tips to better structure your binders and triggers for a logical and maintainable application&lt;/p&gt;

&lt;h3 id=&#34;presenting-the-problem:b1aa778a626daa40c556fbd74954875f&#34;&gt;Presenting the Problem&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://i2.wp.com/www.michaelhamrah.com/blog/wp-content/uploads/2009/12/Stupid-Form1.png&#34;&gt;&lt;img class=&#34;alignleft size-medium wp-image-292&#34; title=&#34;Stupid Form&#34; src=&#34;http://i1.wp.com/www.michaelhamrah.com/blog/wp-content/uploads/2009/12/Stupid-Form1-300x179.png?resize=300%2C179&#34; alt=&#34;Stupid Form&#34; data-recalc-dims=&#34;1&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s take a look at an example app. &amp;nbsp;Here&amp;#8217;s a simple form where a user can draft a report, save it for later, or send it immediately. There are three options to enter data in the name/email/department field.&amp;nbsp; The user can enter it manually, choose from the autosuggest area at left, or simply select one of the favorite links.&amp;nbsp; The autosuggest/favorite link would pre-populate the textboxes used in the form. &amp;nbsp;If all the data is there, the send button is enabled. &amp;nbsp;If not, it&amp;#8217;s disabled.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s discuss how we&amp;#8217;d deal with enabling and disabling the send button. &amp;nbsp;There are many ways to approach this. &amp;nbsp;A traditional way is to wire up some standard event to our textboxes:&lt;/p&gt;

&lt;pre class=&#34;brush: jscript; title: ; notranslate&#34; title=&#34;&#34;&gt;$(&#39;#name&#39;).keyup(function(){
    //Logic (hopefully structured in a reusable way across all controls).
});
//Do this for all other input controls.
&lt;/pre&gt;

&lt;p&gt;This solution is perfectly valid and works, but it has some shortcomings. &amp;nbsp;First, you need to wire up all three controls and route them to the same function. &amp;nbsp;Next, even though the keyup will handle user input, the textboxes could change in other ways- either from the favorite link or the auto suggest box. &amp;nbsp;We&amp;#8217;ll need to call our validation function in numerous places. &amp;nbsp;There may also be other logic we want to incorporate within the text change event unrelated to enabling of the send button- email validation, for instance, which is only applicable to the email textbox, or a certain length requirement on the name textbox. &amp;nbsp;What happens if there&amp;#8217;s a new requirement where the subject/body must be filled to enable the send button? Where does all this functionality fall into our larger requirements?&lt;/p&gt;

&lt;p&gt;You can imagine the complexity of writing the javascript required for this UI. &amp;nbsp;We need a slew of functions to deal with validation logic: Both for enabling the send button and other input controls. &amp;nbsp;We need to wire up all our onkeyup and on click events across the auto suggest field, textboxes, and favorite links. &amp;nbsp;Function calls are everywhere. &amp;nbsp;It will take all your code complete skills to manage those dependencies and keep this code lean.&lt;/p&gt;

&lt;p&gt;This is where event pooling comes into play: instead of direct dependencies between these controls and logic, you bubble events to a middle man and allow interested parties to respond accordingly. &amp;nbsp;Instead of all the controls telling the send button to enable/disable itself, the send button &amp;#8220;listens&amp;#8221; for changes it cares about- when the value of the textbox changes- and responds accordingly. &amp;nbsp;The responsibility is reversed- the function which needs to be called can choose when it&amp;#8217;s called, rather than waiting for something to call it.&lt;/p&gt;

&lt;h3 id=&#34;dependencies-between-binders-and-triggers:b1aa778a626daa40c556fbd74954875f&#34;&gt;Dependencies Between Binders and Triggers&lt;/h3&gt;

&lt;p&gt;With event pooling there are two things you need to be conscience of:&amp;nbsp; the events themselves and the data passed between the binder and trigger.&amp;nbsp; These items form the two dependencies between binders and triggers.&amp;nbsp; The event serves as a link between the binder and trigger and the data is the information which is passed between the two.&amp;nbsp; It&amp;#8217;s essential to properly structure your events and choose the right data transfer option to avoid pitfalls over the life of the application.&amp;nbsp; We&amp;#8217;ll deal with each aspect individually. &amp;nbsp;This post will be about the structure of events, and I&amp;#8217;ll write various ways to pass data between parties in another post.&lt;/p&gt;

&lt;h3 id=&#34;structuring-custom-events:b1aa778a626daa40c556fbd74954875f&#34;&gt;Structuring Custom Events&lt;/h3&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: normal;&#34;&gt;Most people are familiar with the standard javascript events: click, blur, enter, exit, etc.&amp;nbsp; These are what you usually wire up to functions when you want to do something.&amp;nbsp; However, they only go so far- you need custom events when you have a lot of stuff happening. &amp;nbsp;Why use them?&amp;nbsp; Quite simply, it&amp;#8217;s more logical for your application control flow. &amp;nbsp;For our send button functionality, we want our validation function to act when something happens. &amp;nbsp;This &amp;#8220;something&amp;#8221; will be a custom event we create. &amp;nbsp;We have two options for naming our event: we can name the event after what is intended, like &amp;#8220;ENABLE_DISABLE_SEND_BUTTON&amp;#8221;, or name the event after what has happened, like &amp;#8220;NAME_CHANGED&amp;#8221; or &amp;#8220;FAVORITE_LINK_SELECTED&amp;#8221;. &amp;nbsp;The former option requires multiple events to be fired when something happens. &amp;nbsp;The autosuggest box, for instance, would require the ENABLE_DISABLE_SEND_BUTTON trigger, a SELECTED_CONTACT event for setting the textboxes, and whatever else happens after a contact is selected. &amp;nbsp;The latter option requires just one trigger to be fired, but the binder must subscribe to multiple events. &amp;nbsp;The choice can also be presented like this: do we want each element to fire a trigger for each action which should occur, or have a function to listen for multiple triggered events?&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: normal;&#34;&gt;&lt;a href=&#34;http://i0.wp.com/www.michaelhamrah.com/blog/wp-content/uploads/2009/12/Event_Pooling-2-e1261347350823.png&#34;&gt;&lt;img class=&#34;aligncenter size-full wp-image-300&#34; title=&#34;Event_Pooling-2&#34; src=&#34;http://i0.wp.com/www.michaelhamrah.com/blog/wp-content/uploads/2009/12/Event_Pooling-2-e1261347350823.png?resize=600%2C317&#34; alt=&#34;&#34; data-recalc-dims=&#34;1&#34; /&gt;&lt;/a&gt;&lt;br /&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Naming events may seem like an arbitrary and thoughtless act, but it&amp;#8217;s essential to have a naming strategy with event pooling. &amp;nbsp;Just like wiring up functions directly can be unwieldy, so can a slew of events wired up every which way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For event pooling, it&amp;#8217;s more important to name events after what has happened, rather than what is intended.&lt;/strong&gt; So the correct approach is to go with things like &amp;#8220;NAME_CHANGED&amp;#8221;, &amp;#8220;CONTACT_SELECTED&amp;#8221;, or &amp;#8220;EMAIL_CHANGED&amp;#8221;. &amp;nbsp;The rationale has to do with dependencies themselves: &amp;nbsp;we don&amp;#8217;t want functions called from random parts of the system via specific events: &amp;nbsp;this is no better than calling functions directly from disparate parts of the system. &amp;nbsp;And with specific action related events like &amp;#8220;ENABLE_SEND&amp;#8221; you just know someone is going to take a shortcut and wire some random binder to a totally unrelated trigger, because that trigger is fired from the control they want to monitor. &amp;nbsp;Binders- and the functions they are wired to- should proactively &amp;#8220;listen&amp;#8221; for things which it&amp;#8217;s interested in. &amp;nbsp;This allows you to easily know why a function is being called. &amp;nbsp;If you need to change why or how something is handled, you go to the recipient, not the caller. &amp;nbsp;The caller, after all, could be anything, and more importantly the caller could be triggering multiple things.&lt;/p&gt;

&lt;pre class=&#34;brush: jscript; title: ; notranslate&#34; title=&#34;&#34;&gt;//Funnel all possibilities to single custom trigger
$(&#39;#name&#39;).bind(&#39;keyup enter&#39;, function() {
 $(document).trigger(&#39;NAME_CHANGED&#39;);
});

//Funnel all possibilites to single custom trigger
$(&#39;#email&#39;).bind(&#39;keyup enter&#39;, function() {
$(document).trigger(&#39;EMAIL_CHANGED&#39;);
});

//I know why this is being called because I&#39;ve subscribed
//to the events I&#39;m interested in.
$(document).bind(&#39;NAME_CHANGED EMAIL_CHANGED&#39;, function()
{
 //Handle validation, etc.
});
&lt;/pre&gt;

&lt;p&gt;The cool thing about this approach is there may be something else which will cause an email or name changed event to happen: specifically, when someone has selected a contact from the autosuggest list or a favorite link is selected. &amp;nbsp;You can fire the name_changed event from multiple places and not worry about wiring up any new triggers. &amp;nbsp;The code would look something like this:&lt;/p&gt;

&lt;pre class=&#34;brush: jscript; title: ; notranslate&#34; title=&#34;&#34;&gt;//Fired from elsewhere
$(document).bind(&#39;FAVORITE_LINK_SELECTED&#39;, function()
{
  //Handle selection
  //Set Name, Email, etc.
  //Fire event:
  $(document).trigger(&#39;EMAIL_CHANGED&#39;);
  $(document).trigger(&#39;NAME_CHANGED&#39;);
});
&lt;/pre&gt;

&lt;p&gt;How nice: &amp;nbsp;another part of the system changes the name indirectly, and we don&amp;#8217;t have to worry about hooking anything up because the binder is already subscribed to the NAME_CHANGED event.&lt;/p&gt;

&lt;p&gt;Note the name doesn&amp;#8217;t necessarily correspond to a specific element: It&amp;#8217;s not a textbox_name_changed event, nor are any specific html id&amp;#8217;s involved except for wiring up a trigger from a standard keyup event. &amp;nbsp;This is an important difference: we could rename the id&amp;#8217;s, or switch to some other input control, and not have to rewire everything. &amp;nbsp;We don&amp;#8217;t care about the textbox nor that the textbox&amp;#8217;s value has changed. &amp;nbsp;We care that the textbox respresents the name entered or the email address- and we want to know when the name or email has changed. &amp;nbsp;The favorite link clicked is a good example of this nuanced difference. &amp;nbsp;Take a look at the following html:&lt;/p&gt;

&lt;pre class=&#34;brush: xml; title: ; notranslate&#34; title=&#34;&#34;&gt;&amp;lt;a href=&#39;#&#39; id=&#39;fav1&#39; class=&#39;favorite&#39;&amp;gt;My Favorite 1&amp;lt;/a&amp;gt;
&amp;lt;a href=&#39;#&#39; id=&#39;fav2&#39; class=&#39;favorite&#39;&amp;gt;My Favorite 2&amp;lt;/a&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Imagine we&amp;#8217;ve wired the click event to fire a FAVORITE_LINK_SELECTED trigger. &amp;nbsp;With this trigger, we don&amp;#8217;t care that the link with id fav1 or fav2 has been clicked, nor the a.favorite selector has been clicked. &amp;nbsp;We don&amp;#8217;t care about ids or css classes. &amp;nbsp;We care a FAVORITE_LINK_SELECTED event has happened because that&amp;#8217;s what the id fav1 and favorite class represents- the favorite link- and we want to know when that has been selected. &amp;nbsp;We can rename the id, change the class, or even change the entire element. &amp;nbsp;As long as FAVORITE_LINK_SELECTED is fired we&amp;#8217;re good to go. &amp;nbsp;Our custom FAVORITE_LINK_SELECTED trigger is the abstraction which creates the loosely coupled system.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:b1aa778a626daa40c556fbd74954875f&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;One thing I haven&amp;#8217;t discuss is how data is passed from trigger to binder. &amp;nbsp;It&amp;#8217;s the other important dependency between triggers and binders which we&amp;#8217;ll discuss in another post. &amp;nbsp;The important thing to take away is why you&amp;#8217;d want to use custom named events to create a loosely coupled system. &amp;nbsp;For very straightforward pages it&amp;#8217;s probably not worth the overhead- the abstraction isn&amp;#8217;t required. &amp;nbsp;However, in a complex form where there are lots of validation dependencies, or many routes to the same function, or when multiple events can trigger an update- you want to use event pooling. &amp;nbsp;More importantly, you want to think about your strategy when it comes to naming events, because it&amp;#8217;s the description linking the caller and method together. &amp;nbsp;You do not want to code yourself into a corner!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Event Pooling with jQuery Using Bind and Trigger: Managing Complex Javascript</title>
          <link>http://blog.michaelhamrah.com/2008/12/event-pooling-with-jquery-using-bind-and-trigger-managing-complex-javascript/</link>
          <pubDate>Fri, 05 Dec 2008 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2008/12/event-pooling-with-jquery-using-bind-and-trigger-managing-complex-javascript/</guid>
          <description>&lt;p&gt;&lt;strong&gt;Managing Complexity in the UI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As everyone knows, the more dependencies you have in a system, the harder maintaining that system is.  Javascript is no exception- and orchestrating actions across complex user interfaces can be a nightmare if not done properly.&lt;/p&gt;

&lt;p&gt;Luckily, there&amp;#8217;s a great pattern for orchestrating complex interaction in a disconnected way. No, it&amp;#8217;s not the Observer pattern.  It&amp;#8217;s a take on the Observer pattern called Event Pooling which is a piece of cake with jQuery&amp;#8217;s &lt;a href=&#34;http://docs.jquery.com/Events/bind&#34; title=&#34;jQuery Bind&#34;&gt;bind&lt;/a&gt; and &lt;a href=&#34;http://docs.jquery.com/Events/trigger&#34; title=&#34;jQuery Trigger&#34;&gt;trigger&lt;/a&gt; functions.  &lt;a title=&#34;jQuery bind and trigger example&#34; href=&#34;http://www.michaelhamrah.com/blog/wp-content/uploads/jqueryEventPool/index.html&#34; target=&#34;_blank&#34;&gt;For the get to the code folks, here&amp;#8217;s an example of using jQuery&amp;#8217;s bind and trigger for event pooling&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problems with the Observer Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The observer pattern is great for some things, but it still requires a dependency between the observer and the subject.  The publish/subscribe scenario creates a direct relationship between two objects- and makes orchestrating a lot of events difficult when you have to manage so many direct references.&lt;figure id=&#34;attachment_56&#34; style=&#34;width: 300px;&#34; class=&#34;wp-caption aligncenter&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i2.wp.com/www.michaelhamrah.com/blog/wp-content/uploads/2008/12/observer.png&#34;&gt;&lt;img class=&#34;size-medium wp-image-56&#34; title=&#34;observer pattern&#34; src=&#34;http://i0.wp.com/www.michaelhamrah.com/blog/wp-content/uploads/2008/12/observer-300x91.png?resize=300%2C91&#34; alt=&#34;observer pattern&#34; data-recalc-dims=&#34;1&#34; /&gt;&lt;/a&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;observer pattern&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Event Pooling&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Event pooling is simply a variation on the Observer pattern, where a &amp;#8220;middle man&amp;#8221; is used to orchestrate the publish/subscribe system.  First, an observer will register with the event pool by saying &amp;#8220;I need to call this function when this event is fired&amp;#8221;.  Next, the subject will tell the event pool &amp;#8220;I&amp;#8217;m firing this event&amp;#8221;.  Finally, the event pool will call the function the observer registered on behalf of the subject.  The observer and subject only need to know about the event pool, not each other.&lt;figure id=&#34;attachment_57&#34; style=&#34;width: 300px;&#34; class=&#34;wp-caption aligncenter&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i2.wp.com/www.michaelhamrah.com/blog/wp-content/uploads/2008/12/event-pool.png&#34;&gt;&lt;img class=&#34;size-medium wp-image-57&#34; title=&#34;event-pool&#34; src=&#34;http://i2.wp.com/www.michaelhamrah.com/blog/wp-content/uploads/2008/12/event-pool-300x147.png?resize=300%2C147&#34; alt=&#34;Event Pool&#34; data-recalc-dims=&#34;1&#34; /&gt;&lt;/a&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;Event Pool&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;This provides some cool functionality- especially because if you need to reference the subject (called the publisher), you can get a direct reference via the event pool.  This is similar to the object sender parameter in .NET&amp;#8217;s event system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Show me Code!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We are going to do two things: First, update a span tag to show an address when a user enters a name, city, or state.  Second, show some complex behavior by daisy changing events and binding a single function to multiple triggers. &lt;a title=&#34;jQuery bind and trigger example&#34; href=&#34;http://www.michaelhamrah.com/blog/wp-content/uploads/jqueryEventPool/index.html&#34; target=&#34;_blank&#34;&gt;Check out the example.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have an UpdateOutput() function that updates the span:&lt;/p&gt;

&lt;pre class=&#34;syntax js&#34;&gt;function UpdateOutput() {
    var name = $(&#39;#txtName&#39;).val();
    var address = $(&#39;#txtAddress&#39;).val();
    var city = $(&#39;#txtCity&#39;).val();

    $(&#39;#output&#39;).html(name + &#39; &#39; + address + &#39; &#39; + city);
}
&lt;/pre&gt;

&lt;p&gt;This is wired up via the bind function:&lt;/p&gt;

&lt;pre class=&#34;syntax js&#34;&gt;$(document).bind(&#39;NAME_CHANGE ADDRESS_CHANGE CITY_CHANGE&#39;, function() {
    UpdateOutput();
});
&lt;/pre&gt;

&lt;p&gt;Notice how we&amp;#8217;re wiring up multiple event names with a single function which calls UpdateOutput.  This allows us to encapsulate common functionality in a single function which could be called from various sources.&lt;/p&gt;

&lt;p&gt;We&amp;#8217;re also binding and firing to $(document).  Document provides a global bucket all functionality has access to- a static class that can be referenced from anywhere, making pooling easy.&lt;/p&gt;

&lt;p&gt;We can also wire up another function with the NAME_CHANGE event without effecting any other logic:&lt;/p&gt;

&lt;pre class=&#34;syntax js&#34;&gt;$(document).bind(&#39;NAME_CHANGE&#39;, function(e) {
    UpdateName();
    UpdateOtherText(e);
});
&lt;/pre&gt;

&lt;p&gt;Here, NAME_CHANGE will also trigger UpdateName and UpdateOther.&lt;/p&gt;

&lt;p&gt;Firing an event is done with the trigger function:&lt;/p&gt;

&lt;pre class=&#34;syntax js&#34;&gt;$(&#39;#txtAddress&#39;).keyup(function() {
    $(document).trigger(&#39;ADDRESS_CHANGE&#39;);
});
$(&#39;#txtCity&#39;).keyup(function() {
    $(document).trigger(&#39;CITY_CHANGE&#39;);
});
&lt;/pre&gt;

&lt;p&gt;It can also be called directly from html:&lt;/p&gt;

&lt;pre class=&#34;syntax html escaped&#34;&gt;Name: &amp;lt;input type=&#34;text&#34; id=&#34;txtName&#34; onkeyup=&#34;javascript:$(document).trigger(&#39;NAME_CHANGE&#39;);&#34; /&amp;gt;
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Advanced Functionality&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are two more things you can do with bind and trigger: Inspect who fired the trigger (this can be important if you&amp;#8217;re wiring up a single function from multiple subjects) and pass data to the event.&lt;/p&gt;

&lt;p&gt;In our next example, our function definition takes in two parameters: e, which is the event&amp;#8217;s sender, and data, a generic data bucket:&lt;/p&gt;

&lt;pre class=&#34;syntax js&#34;&gt;$(document).bind(&#39;FIRST_UPDATED&#39;, function(e, data) {
    UpdateOtherText(e, data);
});
&lt;/pre&gt;

&lt;p&gt;The first parameter will always be the event&amp;#8217;s sender.  You can wire up as many other parameters as you want.  You pass data as a comma delimited list between brackets [parm1,parm2] when calling trigger:&lt;/p&gt;

&lt;pre class=&#34;syntax js&#34;&gt;$(document).trigger(&#39;FIRST_UPDATED&#39;, [data]);
&lt;/pre&gt;

&lt;p&gt;and from html:&lt;/p&gt;

&lt;pre class=&#34;syntax js escaped&#34;&gt;&amp;lt;input type=&#34;text&#34; id=&#34;txtData&#34; onkeyup=&#34;javascript:$(document).trigger(&#39;DATA_CHANGED&#39;, [$(this).val()]);&#34; /&amp;gt;
&lt;/pre&gt;

&lt;p&gt;The sender object has a couple of properties, but the most important is &amp;#8216;type&amp;#8217;, which let&amp;#8217;s you know what triggered the event:&lt;/p&gt;

&lt;pre class=&#34;syntax js&#34;&gt;function UpdateOtherText(e, text) {
var text;
if (e.type == &#39;FIRST_UPDATED&#39;)
 text = &#39;from first: &#39; + text;
else
 text = e.type;
$(&#39;#eventFired&#39;).html(text);
}
&lt;/pre&gt;

&lt;p&gt;Check out my follow up article &lt;a href=&#34;http://www.michaelhamrah.com/blog/index.php/2009/12/organizing-javascript-for-event-pooling-with-jquery/&#34;&gt;Organizing Events for Event Pooling.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[]&lt;a href=&#34;http://www.michaelhamrah.com/blog/index.php/2009/12/organizing-javascript-for-event-pooling-with-jquery/&#34;&gt;5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fwww.michaelhamrah.com%2fblog%2findex.php%2f2008%2f12%2fevent-pooling-with-jquery-using-bind-and-trigger-managing-complex-javascript%2f&#34;&gt;&lt;img src=&#34;http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fwww.michaelhamrah.com%2fblog%2findex.php%2f2008%2f12%2fevent-pooling-with-jquery-using-bind-and-trigger-managing-complex-javascript%2f&amp;bgcolor=0000FF&#34; border=&#34;0&#34; alt=&#34;kick it on DotNetKicks.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
