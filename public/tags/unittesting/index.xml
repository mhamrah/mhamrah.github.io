<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> </title>
    <link>http://blog.michaelhamrah.com/tags/unittesting/</link>
    <language>en-us</language>
    <author>Michael Hamrah</author>
    <rights>(C) 2015</rights>
    <updated>2009-02-25 00:00:00 &#43;0000 UTC</updated>

    
      
        <item>
          <title>Using Moq to Implement Tests (and Avoid Stubs)</title>
          <link>http://blog.michaelhamrah.com/2009/02/using-moq-3-to-implement-tests-and-avoid-stubs/</link>
          <pubDate>Wed, 25 Feb 2009 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2009/02/using-moq-3-to-implement-tests-and-avoid-stubs/</guid>
          <description>

&lt;p&gt;In &lt;a href=&#34;http://www.michaelhamrah.com/blog/index.php/2008/12/understand-unit-testing-and-td-getting-better-code-coverage/&#34;&gt;my previous post on understanding TDD&lt;/a&gt; I discussed how to analyze existing code for creating unit tests.  This was somewhat of &amp;#8220;reverse TDD&amp;#8221;, the idea being to look for what to needs to be tested- the relationship between what one class expects and what another class actually does.  Unfortunately I stopped short of actually implementing those tests- which is the subject of this post.&lt;/p&gt;

&lt;p&gt;As a quick refresher, our demo app has some simple functionality which involves getting an order from a data tier then uses a shipping service to ship the order.  You can &lt;a href=&#34;http://www.michaelhamrah.com/blog/wp-content/uploads/2009/02/unittestexamplewithmoq.zip&#34;&gt;download the sample app here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;prefer-mocking-over-stubs:dc6d1fe85225b3a1b9bf1fc833403f60&#34;&gt;Prefer Mocking Over Stubs&lt;/h3&gt;

&lt;p&gt;Had I written this post about two months ago, I would have favored creating a suite of stub classes to mimic the expected behavior of our interfaces.  The approach would involve creating various stub classes for our dependent interfaces- the IShippingService and IOrderRepository- and plugging those stubs into the various unit tests.  In the simplest sense these would be hard coded classes to do what I wanted- from throwing exceptions to hard coding return values.  Probably even use some fancy random number generation for ids. However, I&amp;#8217;m learning from a current project that the stub approach isn&amp;#8217;t the best route to take.&lt;/p&gt;

&lt;h4 id=&#34;the-problem-distilled:dc6d1fe85225b3a1b9bf1fc833403f60&#34;&gt;The Problem, Distilled&lt;/h4&gt;

&lt;p&gt;Stubbing is definitely easy, but code quickly spirals out of control.  With stub classes, especially those backed by interfaces, more classes are created which then need to be managed and supported.  In an evolving software project this management creates added infrastructure which gets in the way when making changes to the original functionality.  An interface change, for example (either adding a new method or refactoring parameters) causes numerous changes to be made in stubbed out classes.  What&amp;#8217;s worse, there can easily be a divergence in the behavior of the stubbed out class with the behavior it&amp;#8217;s supposed to represent.  True, this can happen with mocking, but as we&amp;#8217;ll see mocking is much more granular and can be tailored to specific circumstances with minimal code duplication.&lt;/p&gt;

&lt;p&gt;There&amp;#8217;s simply no need to create extensive, or multiple, stub objects with all those great mocking frameworks around.  Most mocking frameworks offer a ton of features creating granular control of expectations, return values, parameter verification, and method invocation checking.  I strongly recommend reading Martin Fowler&amp;#8217;s &lt;a href=&#34;http://martinfowler.com/articles/mocksArentStubs.html&#34;&gt;Mocks Aren&amp;#8217;t Stubs&lt;/a&gt; article for more information on the difference between mocks and stubs.&lt;/p&gt;

&lt;h3 id=&#34;using-moq-to-mimic-behavior:dc6d1fe85225b3a1b9bf1fc833403f60&#34;&gt;Using Moq to Mimic Behavior&lt;/h3&gt;

&lt;p&gt;We&amp;#8217;ll use &lt;a href=&#34;http://code.google.com/p/moq/&#34;&gt;Moq&lt;/a&gt; 3 to demo what you can do with mocking.  Let&amp;#8217;s start off with our first unit test, ShipOrder_Returns_New_Shipment_With_Order_Items.  We simply want to call our ShipOrder function and ensure we get a shipment back with shipment items.  To begin with, we&amp;#8217;ll use &lt;a href=&#34;http://code.google.com/p/moq/&#34;&gt;Moq&lt;/a&gt; to mock our IOrderStorage and IShipmentService so we can construct our OrderShipmentManager.&lt;/p&gt;

&lt;pre class=&#34;syntax c#&#34;&gt;[TestMethod()]
public void OrderShipmentManager_ShipOrder_Returns_New_Shipment_With_Shipment_Items()
{
var mockOrderStorage = new Mock&amp;lt;IOrderStorage&gt;();
var mockShipmentService = new Mock&amp;lt;IShipmentService&gt;();

var osm = new OrderShipmentManager(mockOrderStorage.Object, mockShipmentService.Object);

var shipment = osm.ShipOrder(5);

Assert.IsNotNull(shipment, &#34;Returned Shipment was not null&#34;);
Assert.IsInstanceOfType(shipment, typeof(Shipment), &#34;Returned object was not of type shipment.&#34;);
Assert.IsNotNull(shipment.ShipmentProducts, &#34;ShipmentProducts were null&#34;);
Assert.IsTrue(shipment.ShipmentProducts.Count &gt; 0, &#34;ShipmentProducts were empty&#34;);
}
&lt;/pre&gt;

&lt;p&gt;This test will fail because we haven&amp;#8217;t specified any functionality for our interfaces!  But, we didn&amp;#8217;t get a failing test with a null reference exception when calling GetOrder()- we got a failing test because our returned shipment object from GetOrder was null.  Stepping through code you&amp;#8217;ll see that Moq returned void when calling the IOrderStorage.GetOrder method.  Moq creates a simple &amp;#8220;dumb&amp;#8221; proxy class for the interface automatically.  You can specify a strict behavior using MockBehavior.Strict in the constructor to throw an exception for anything that isn&amp;#8217;t explicitly set up.  This can be helpful for ensuring control flow.&lt;/p&gt;

&lt;p&gt;The solution to pass our test is to explicitly tell Moq what to do when this method is called, like so:&lt;/p&gt;

&lt;pre class=&#34;syntax c#&#34;&gt;mockOrderStorage.Setup(os =&gt; os.GetOrder(It.IsAny&amp;lt;int&gt;())).Returns((int id) =&gt; {
var order = new Order() { OrderId = id };
return order;
});
&lt;/pre&gt;

&lt;p&gt;When working with Moq you may struggle with the extensive use of Lambda expressions the framework requires.  But after a couple of tests you&amp;#8217;ll become a lambda ninja.  Moq relies on a pair of Setup/Return calls to dictate behavior.  Also notice how we didn&amp;#8217;t have to implement every method in our interfaces- we only had to implement the ones we needed to make the test pass.  That saves a lot of code from being written!&lt;/p&gt;

&lt;p&gt;The previous expression states &amp;#8220;when you call GetOrder, with any int value, return a new order with the input id&amp;#8221;.  Moq gives a lot of power in dictating the behavior of the return call based on the expected function.  By specifing (int id) in our return Lambda we can get a reference to our input parameter, which helps us construct a valid Order object based on any input. This is helpful when setting up exceptions.  By using a predicate expression with It.Is instead of It.IsAny, we can have our call throw an exception for an invalid input:&lt;/p&gt;

&lt;pre class=&#34;syntax c#&#34;&gt;mockShipmentService.Setup(ss =&gt; ss.CreateShipment(It.Is&amp;lt;int&gt;(id =&gt; id &amp;lt; 0))).Throws&amp;lt;ArgumentException&gt;();
&lt;/pre&gt;

&lt;p&gt;Setting up exceptions using Moq is instrumental in properly dealing with exception handling in your code.  Also, using It.Is to tailor return methods can help out when dealing with validation or verifying state.  It&amp;#8217;s much faster and easier to use Moq to create behavior than hard coding stub classes.&lt;/p&gt;

&lt;p&gt;There&amp;#8217;s one final advantage to using Moq which you can&amp;#8217;t easily do with stubs.  It&amp;#8217;s verifying method invocation.  In our sample project, we have a call to _shipmentService.Ship(shipment).  What does Ship() do? It doesn&amp;#8217;t return anything so checking a return parameter is difficult.  It doesn&amp;#8217;t manipulate the shipment (or, let&amp;#8217;s pretend it doesn&amp;#8217;t).  We want to ensure this function is called.  The solution? Use Moq&amp;#8217;s Verify() method, like so:&lt;/p&gt;

&lt;pre class=&#34;syntax c#&#34;&gt;mockShipmentService.Verify(svc =&gt; svc.Ship(shipment));
&lt;/pre&gt;

&lt;p&gt;This code will throw an exception if Ship wasn&amp;#8217;t called with the shipment variable, ensuring that Ship was actually called if it should.  Using Verify() is helpful when testing out methods returning void- like sending an e-mail, doing a file operation, or ftp.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:dc6d1fe85225b3a1b9bf1fc833403f60&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Spending some time getting up to speed with a mocking framework will be instramental in learning TDD.  It&amp;#8217;ll also come in handy with just writing unit tests.  Mocking provides a simple, slimmed down solution that&amp;#8217;s much easier to manage than stub classes.&lt;/p&gt;

&lt;p&gt;I like Moq because it&amp;#8217;s quick to express what you want done- but the heavy use of lambdas can be a struggle with getting started.  The &lt;a href=&#34;http://code.google.com/p/moq/wiki/QuickStart&#34;&gt;moq quickstart&lt;/a&gt; is a great guide to the framework and covers all the bases.  The bottom line is don&amp;#8217;t worry about which mocking framework you choose.  They all have their respective advantages.  Pick one, learn it, use it.  If you don&amp;#8217;t like how it does something, switch to something else down the line which does what you want.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fwww.michaelhamrah.com%2fblog%2findex.php%2f2009%2f02%2fusing-moq-3-to-implement-tests-and-avoid-stubs%2f&#34;&gt;&lt;img src=&#34;http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fwww.michaelhamrah.com%2fblog%2findex.php%2f2009%2f02%2fusing-moq-3-to-implement-tests-and-avoid-stubs%2f&amp;#038;bgcolor=0000FF&#34; border=&#34;0&#34; alt=&#34;kick it on DotNetKicks.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Understand Unit Testing and TDD: Getting Better Code Coverage</title>
          <link>http://blog.michaelhamrah.com/2008/12/understand-unit-testing-and-td-getting-better-code-coverage/</link>
          <pubDate>Thu, 18 Dec 2008 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2008/12/understand-unit-testing-and-td-getting-better-code-coverage/</guid>
          <description>&lt;p&gt;One of the biggest challenges in unleashing the power of unit testing is getting good code coverage.  Most of the time, especially when teams are just starting out with Test Driven Development, unit testing usually gets in the way.  A lot of people (I succumb to this syndrome sometimes) add tests &lt;em&gt;after&lt;/em&gt; they develop code.  The audacity! Some people just don&amp;#8217;t unit test at all- especially when struggling with mocking a dependency, like a database or the HttpContext object.  And forget about finding more than one unit test for functions- you already have one for a function which passes- so you&amp;#8217;re done, right?&lt;/p&gt;

&lt;p&gt;The secret in unit testing is understanding what you need to test.  You are not just testing something works- you&amp;#8217;re testing specific functionality behaves &lt;em&gt;as expected&lt;/em&gt;.  Once you understand this difference, not only will TDD be easier to achieve, but developing large projects, ensuring business rules, enforcing API guidelines, and concurrent development on the same feature will be easier and faster for you and your team.&lt;/p&gt;

&lt;p&gt;This post will help you think about testing: what you need to do to add unit tests to your existing project or add to what you already have.  We&amp;#8217;re not doing test first- hopefully, this will be a precursor to TDD in getting you thinking about what to get out of your unit tests so you can get into the TDD groove.&lt;/p&gt;

&lt;p&gt;**Expectations And Reactions&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;Each class- and each function- has a specific purpose.  Systems are built on the interaction of these classes and functions.  Classes call functions.  Functions call other functions.  Data is processed.  Objects are returned.  Exceptions are thrown.  All of this interaction is like a clock- the pendulum swings, the gears turn, the hands move.  When everything does what it should, you have a healthy, usable, working system.  When something doesn&amp;#8217;t, chaos ensues and thing don&amp;#8217;t work- the hands of the clock don&amp;#8217;t move.&lt;/p&gt;

&lt;p&gt;This boils down to a simple concept of expectations and reactions.  Class A expects Class B to do something when Class A calls a function on Class B.  Class A is &lt;em&gt;dependent&lt;/em&gt; on Class B&amp;#8217;s behavior.  What you&amp;#8217;re looking to do is create a suite of tests to ensure Class B is actually doing the behavior Class A expects- from valid return values to handling exceptions- so the hands on the clock always turn.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://michaelhamrah.com/blog/wp-content/uploads/unittestexample.zip&#34;&gt;Download the sample code here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve created some simple code which represents an ordering system we&amp;#8217;ll say is part of typical three tier MVC application, similar to &lt;a href=&#34;http://blog.wekeroad.com/mvc-storefront/&#34; target=&#34;_blank&#34;&gt;Rob Conery&amp;#8217;s MVC Storefront&lt;/a&gt;, I&amp;#8217;ve backed everything with interfaces.  To keep things simple, I&amp;#8217;ve done this as a single class library- you can imagine all the other mumbo jumbo thrown in there.&lt;/p&gt;

&lt;p&gt;We&amp;#8217;re simply going to be shipping an order- which involves getting an order from our data tier and then using a shipping service to ship the order.  For this series, I&amp;#8217;m only going to focus on a single method in our business tier: the OrderShipmentManager.ShipOrder() function.  This will help us look at one of the two main components for a successful test suite: knowing what to tests and setting up mock objects.  In a real world application, you&amp;#8217;ll want to apply the expectation/reaction approach to each layer.&lt;/p&gt;

&lt;p&gt;Currently, I&amp;#8217;m only going to focus on what tests we need to have.  I&amp;#8217;ll dig into how to set up mocking in another post.  Let&amp;#8217;s start by looking at how our ShipOrder is being called in the controller:&lt;/p&gt;

&lt;p&gt;IOrderShipmentManager opm = new OrderShipmentManager(new DataTier.OrderStorage(), new DataTier.ShipmentService());&lt;/p&gt;

&lt;p&gt;Shipment shipment = null;&lt;/p&gt;

&lt;p&gt;try&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;shipment = opm.ShipOrder(orderId);&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;catch (OrderShipmentException ope)&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;System.Diagnostics.Debug.Write(&amp;#8220;Whoops: {0}&amp;#8221;, ope.Message);&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;View(shipment);&lt;/p&gt;

&lt;p&gt;Most controllers should look like this: very light, with the bulk of your application in your business logic layer.  This is a fairly simple call: in my controller, I take in an orderId I want to ship, and pass it to ShipOrder(). The controller expects two things to happen: a shipment to be returned, which it can pass to the view; or an exception to be thrown.&lt;/p&gt;

&lt;p&gt;So let&amp;#8217;s make sure we have two unit tests to cover these two expectations (Note: I always prefix unit tests with CLASS_FUNCTION.  This makes viewing test results easier. I didn&amp;#8217;t add that here because of redundancy- but the test project will have each test prefixed with OrderShipmentManager_ShipOrder):&lt;/p&gt;

&lt;p&gt;[TestMethod()]&lt;/p&gt;

&lt;p&gt;public void Returns_Shipment_Object()&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[TestMethod()]&lt;/p&gt;

&lt;p&gt;public void Throws_OrderShipmentException_When_What()&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;So I have my two unit tests- but the problem is, when should ShipOrder return a shipment? What should it actually do? And when does ShipOrder throw an exception?  What the hell do I write in these tests? We could look at the view to figure out what it does with the Shipment object.  We could read the requirements to figure out what ShipOrder should do (or, in an agile world, figure this out from our user story).  But we don&amp;#8217;t have these things.  So let&amp;#8217;s look at the function to see if we can make heads or tells of this:&lt;/p&gt;

&lt;p&gt;public Shipment ShipOrder(int orderId)&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;Order order;&lt;/p&gt;

&lt;p&gt;Shipment shipment;&lt;/p&gt;

&lt;p&gt;if (orderId &amp;lt; 0) throw new OrderShipmentException(&amp;ldquo;OrderId cannot be less than zero&amp;rdquo;); order = _orderStorage.GetOrder(orderId); if (order == null) return null; if (order.ShipmentStatus == ShipmentStatus.Shipped) { throw new OrderShipmentException(&amp;ldquo;Can&amp;rsquo;t ship an order that&amp;rsquo;s shipped!&amp;rdquo;); } shipment = _shipmentService.CreateShipment(order.Customer.CustomerId); shipment.ShipmentProducts = new List&lt;Product&gt;();&lt;/p&gt;

&lt;p&gt;order.OrderItems.ForEach(oi =&amp;gt; shipment.ShipmentProducts.Add(oi.Product));&lt;/p&gt;

&lt;p&gt;_shipmentService.CalculateShipment(shipment);&lt;/p&gt;

&lt;p&gt;_shipmentService.Ship(shipment);&lt;/p&gt;

&lt;p&gt;order.ShipmentStatus = ShipmentStatus.Shipped;&lt;/p&gt;

&lt;p&gt;order.ShipmentId = shipment.ShipmentId;&lt;/p&gt;

&lt;p&gt;_orderStorage.SaveOrder(order);&lt;/p&gt;

&lt;p&gt;return shipment;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Ahh, I get it now! We get the order from our order storage.  If it&amp;#8217;s null, we can&amp;#8217;t ship, so we return null- n0 need for an exception.  If the order&amp;#8217;s been shipped, throw an exception.  Next, create a shipment with our shipment service, calculate the shipment cost, and save the order.  Return the shipment and we&amp;#8217;re done.  Now we can add a suite a tests.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s focus on exceptions.  Here, we plan on throwing exceptions when either the orderId is bad or the order has already been shipped.  Other code will expect an exception to be thrown under these circumstances.  If we change this logic, things could get screwed up- code can&amp;#8217;t react accordingly, and chaos ensues.  People may have already written code based on these expectations.  So let&amp;#8217;s write some unit tests to ensure we&amp;#8217;re always throwing an exception under these circumstances.&lt;/p&gt;

&lt;p&gt;[TestMethod()]&lt;/p&gt;

&lt;p&gt;public void Throws_OrderShipmentException_When_OrderId_Is_Less_Than_Zero()&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[TestMethod()]&lt;/p&gt;

&lt;p&gt;public void Throws_OrderShipmentException_When_Order_Status_Is_Shipped()&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;We&amp;#8217;ve essentially enforced two business rules with these unit tests: when to throw our two exceptions.  (You can argue when or when not to throw an exception.  Personally, I follow the rule: If a function can&amp;#8217;t do what it should, throw an exception).&lt;/p&gt;

&lt;p&gt;Coincidentally, we&amp;#8217;re also guaranteeing something else: that our ShipOrder function will always react the same way under certain circumstances.  Here, ShipOrder will always throw an exception with an invalid orderId.  It won&amp;#8217;t return null- and it won&amp;#8217;t continue.  That&amp;#8217;s important for processing logic- we wouldn&amp;#8217;t want to create a shipment when we don&amp;#8217;t have an order.&lt;/p&gt;

&lt;p&gt;Next, let&amp;#8217;s go into functional logic.  I want to make sure a couple of things are happening, mainly that the workflow is consistent.  Let&amp;#8217;s add some unit tests around the order object:&lt;/p&gt;

&lt;p&gt;[TestMethod()]&lt;/p&gt;

&lt;p&gt;public void Gets_Order_From_Storage()&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[TestMethod()]&lt;/p&gt;

&lt;p&gt;public void Saves_Order_With_ShipmentId_And_Status()&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[TestMethod()]&lt;/p&gt;

&lt;p&gt;public void Returns_Null_When_No_Order()&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Next, our shipment object does a couple of more things:&lt;/p&gt;

&lt;p&gt;[TestMethod()]&lt;/p&gt;

&lt;p&gt;public void OrderShipmentManager_ShipOrder_Creates_Shipment_For_Customer()&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[TestMethod()]&lt;/p&gt;

&lt;p&gt;public void OrderShipmentManager_ShipOrder_Copies_OrderItems_To_Shipment()&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[TestMethod()]&lt;/p&gt;

&lt;p&gt;public void OrderShipmentManager_ShipOrder_Calculates_Shipment()&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[TestMethod()]&lt;/p&gt;

&lt;p&gt;public void OrderShipmentManager_ShipOrder_Ships_Product()&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Finally, we now know what this function should return:&lt;/p&gt;

&lt;p&gt;[TestMethod()]&lt;/p&gt;

&lt;p&gt;public void OrderShipmentManager_ShipOrder_Returns_New_Shipment_With_Order_Items()&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;We have a pretty robust suite of tests around our ship order function.  We&amp;#8217;re not only testing how the controller deals with this function, but the internal workings of the function as well- the expectations other objects have of our ShipOrder method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What This Means&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The core principal of testing is to make sure something works as expected.  In principal that&amp;#8217;s totally obvious and makes perfect sense- why the hell am I even writing about it?  In reality, implementing something which meets that definition is extremely vague and easily debatable.  The pitfall most people get into in attempting TDD- or even writing unit tests- is their definition of &amp;#8220;I&amp;#8217;m proving it works as expected&amp;#8221; is wrong.&lt;/p&gt;

&lt;p&gt;Evolving systems- especially those built with agile development- change a great deal over time. What we want to do is make sure the behavior of everything we write is always the same as these changes occur.  Ideally, nothing can be taken for granted- return values, exceptions, processing.  All must be tested.  Changes create little ripples in the interaction between all the dependencies in a system. Unchecked, ripples grow bigger and bigger into tsunamis of horrible, horrible bugs.  It&amp;#8217;s important to understand what these interactions are, and make sure new changes don&amp;#8217;t alter current behavior.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where TDD Fits In&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TDD simply makes you think about these interactions before you code, so you know what each class and function does for the greater good.  For most people, especially getting started with TDD, that&amp;#8217;s a lot to wrap your head around.  Especially when you&amp;#8217;re the type of coder that likes to code first and have the system morph into what you need it to be.  With TDD, you can easily end up over analyzing the situation, testing too much or too little.  That&amp;#8217;s why TDD is very iterative- figure out what you need, write your single test to enforce it, then write code to pass your test.  But it&amp;#8217;s important to note the level you need from your tests.  If you need a ShipOrder function that returns a shipment, don&amp;#8217;t just check it returns a shipment.  Enforce it&amp;#8217;s doing every step it should- your unit tests are guaranteeing every assumption every other piece of code makes is valid.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Up Next&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I didn&amp;#8217;t talk about mocking at all.  Mocking is the second most important factor of testing: after knowing what to test!  In another post, I&amp;#8217;ll talk about how to write the unit tests I outlined above.  Unit tests also provide numerous benefits I mentioned earlier in this post: enforcing standards, allowing concurrent development and faster coding (no need for those console apps for class library development!).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fwww.michaelhamrah.com%2fblog%2findex.php%2f2008%2f12%2funderstand-unit-testing-and-td-getting-better-code-coverage%2f&#34;&gt;&lt;img src=&#34;http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fwww.michaelhamrah.com%2fblog%2findex.php%2f2008%2f12%2funderstand-unit-testing-and-td-getting-better-code-coverage%2f&amp;#038;bgcolor=0000FF&#34; border=&#34;0&#34; alt=&#34;kick it on DotNetKicks.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
