<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> </title>
    <link>http://blog.michaelhamrah.com/tags/golang/</link>
    <language>en-us</language>
    <author>Michael Hamrah</author>
    <rights>(C) 2015</rights>
    <updated>2014-12-07 00:00:00 &#43;0000 UTC</updated>

    
      
        <item>
          <title>Go Style Directory Layout for Scala with SBT</title>
          <link>http://blog.michaelhamrah.com/2014/12/go-style-directory-layout-for-scala-with-sbt/</link>
          <pubDate>Sun, 07 Dec 2014 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2014/12/go-style-directory-layout-for-scala-with-sbt/</guid>
          <description>&lt;p&gt;I&amp;#8217;ve come to appreciate Go&amp;#8217;s directory layout where &lt;em&gt;test&lt;/em&gt; and &lt;em&gt;build&lt;/em&gt; files are located side-by-side. This promotes a conscience testing priority. It also enables easy navigation to usage of a particular class/trait/object along with the implementation. After reading through the &lt;a href=&#34;http://www.scala-sbt.org/0.13.2/docs/Howto/defaultpaths.html&#34;&gt;getting-better-every-day sbt documentation&lt;/a&gt; I noticed you can easily change default directories for sources, alleviating the folder craziness of default projects. Simply add a few lines to your build.sbt:&lt;/p&gt;

&lt;pre class=&#34;syntax scala&#34;&gt;//Why do I need a Scala folder? I don&#39;t!
//Set the folder for Scala sources to the root &#34;src&#34; folder
scalaSource in Compile := baseDirectory.value / &#34;src&#34;

//Do the same for the test configuration. 
scalaSource in Test := baseDirectory.value / &#34;src&#34;

//We&#39;ll suffix our test files with _test, so we can exclude
//then from the main build, and keep the HiddenFileFilter
excludeFilter in (Compile, unmanagedSources) := HiddenFileFilter || &#34;*_test.scala&#34;

//And we need to re-include them for Tests 
excludeFilter in (Test, unmanagedSources) := HiddenFileFilter
&lt;/pre&gt;

&lt;p&gt;Although breaking from the norm of java-build tools may cause confusion, if you like the way something works, go for it; don&amp;#8217;t chain yourself to past practices. I never understood the class-to-file relationship of java sources, and I absolutely &lt;em&gt;hate&lt;/em&gt; navigating one-item folders. Thankfully Scala improved the situation, but the sbt maven-like defaults are still folder-heavy. IDEs make the situation easier, but I prefer simple text editors; and to paraphrase Dan North, &amp;#8220;Your fancy IDE is a painkiller for your shitty language&amp;#8221;.&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
