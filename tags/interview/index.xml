<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> </title>
    <link>http://blog.michaelhamrah.com/tags/interview/</link>
    <language>en-us</language>
    <author>Michael Hamrah</author>
    <rights>(C) 2015</rights>
    <updated>2009-02-23 00:00:00 &#43;0000 UTC</updated>

    
      
        <item>
          <title>How to Hire a Software Developer: The In House Interview (Part Two)</title>
          <link>http://blog.michaelhamrah.com/2009/02/how-to-hire-a-software-developer-the-in-house-interview-part-two/</link>
          <pubDate>Mon, 23 Feb 2009 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2009/02/how-to-hire-a-software-developer-the-in-house-interview-part-two/</guid>
          <description>

&lt;p&gt;&lt;em&gt;Note: This is part of a series on hiring software developers.  See &lt;a title=&#34;Interview&#34; href=&#34;http://www.michaelhamrah.com/blog/index.php/tag/interview/&#34; target=&#34;_self&#34;&gt;articles tagged with interview for the series&lt;/a&gt;.  The in house interview post has two parts.  This part focuses on non-development questions.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;key-concepts:3dcafca7ca783ca88343fc510ece7ff5&#34;&gt;&lt;strong&gt;Key Concepts&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Present yourself well- the candidate is checking you out too.&lt;/li&gt;
&lt;li&gt;Prefer a group style interview approach over one-on-ones.&lt;/li&gt;
&lt;li&gt;Ask specific non-development questions and evlove the follow ups.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;they-8217-re-interviewing-you-too:3dcafca7ca783ca88343fc510ece7ff5&#34;&gt;They&amp;#8217;re Interviewing You Too&lt;/h3&gt;

&lt;p&gt;It&amp;#8217;s important to note that you- both as a company, a potential co-worker, or a future boss- are being interviewed too.  A smart candidate (read: one you want to hire) will be sizing up the situation and the interview process themselves.  What&amp;#8217;s the office like?  Do people know what&amp;#8217;s going on?  Where is the interview going to happen? Am I, the candidate, waiting around a lot for something to happen, or someone to do something? How fluid is the entire process?  Are people droning on at their desks or do they look happy?&lt;/p&gt;

&lt;p&gt;What goes on during the interview will give the developer hints as to what to expect during the day to day of the job. If the office is awesome, the people are cool, and things are moving smoothly, a much better impression will be made on the candidate than a sloppy process where people are totally frazzled, have no interest in what&amp;#8217;s going on, or are treated/act like sheep.&lt;/p&gt;

&lt;p&gt;Bottom line: be respectful.  Present yourself- and your company- as the epitome of who you&amp;#8217;re expecting to hire.  Joel Spolsky, of &lt;a href=&#34;http://www.joelonsoftware.com&#34;&gt;Joel on Software&lt;/a&gt;, puts great effort into making his office and company a kick-ass place.  Even his blog makes you sit at your desk wishing you worked at Fog Creek.  Hell, the New York Times &lt;a href=&#34;http://www.nytimes.com/2009/02/08/realestate/commercial/08sqft.html?_r=1&amp;amp;partner=permalink&amp;amp;exprod=permalink&#34;&gt;even wrote an article&lt;/a&gt; on the office architecture!  Don&amp;#8217;t be afraid to sell yourself.&lt;/p&gt;

&lt;h3 id=&#34;the-interviewers:3dcafca7ca783ca88343fc510ece7ff5&#34;&gt;The Interviewers&lt;/h3&gt;

&lt;p&gt;It&amp;#8217;s important to have the candidate meet with a variety of team members.  This shouldn&amp;#8217;t be considered a chore for people, but an honor.  It&amp;#8217;s important when building a cohesive team to give current members a voice as to who&amp;#8217;s joining the team.  Most people have no idea how to interview- so make sure to give current members specific questions, role playing scenarios or guidelines on how to conduct the interview.  Make sure meetings are timed box- to between 5 to 20 minutes- so the interviewer knows the correct pace.  There&amp;#8217;s nothing worse than awkward silence.&lt;/p&gt;

&lt;h3 id=&#34;the-interview-structure:3dcafca7ca783ca88343fc510ece7ff5&#34;&gt;The Interview Structure&lt;/h3&gt;

&lt;p&gt;There are essentially two ways to structure the interview: a series of one on one interviews where different developers ask a distinct set of questions, or a group style interview where a group of developers have a round table discussion with a candidate.  The way you decide to structure the interview says a lot about your company and how you conduct your development (that whole thing about presenting yourself).&lt;/p&gt;

&lt;p&gt;Personally, I don&amp;#8217;t like the one-on-one style.  It&amp;#8217;s pretty exhaustive, both for you and the candidate.  The candidate is constantly bombarded with questions in an interrogation-like manner.  If the questions aren&amp;#8217;t planned ahead of time people will also ask the same set of questions (Um,  so, why are you leaving your job? Why do you want to work here?).  More importantly, it&amp;#8217;s hard for the candidate to get into a rhythm- the mandatory warm up time, body, and wrap up is just too cramped.  Finally, the one on one approach offers poor breadth of a candidate.  If each person is only focusing on a specific set of questions, no one person can see the big picture.&lt;/p&gt;

&lt;p&gt;A roundtable discussion is a much better approach, even if there are only two interviewers.  This is much more representative of an agile development team- you want to see how the group dynamic plays with a new person.  It also gives every person an opportunity to determine breadth- you see the whole package, and not just individual parts.  The conversation has a much better chance to evolve in a solid discussion- the positive attributes of each interviewer can shine while the negative attributes are mitigated by the group.&lt;/p&gt;

&lt;p&gt;The one advantage to the one-on-one style is you can interview more people easily.  It&amp;#8217;s just math- let&amp;#8217;s say you&amp;#8217;re interviewing four candidates with four developers.  An interview should last about two hours.  That&amp;#8217;s eight hours using all four developers!  On the other hand, if each developer spent 30 minutes with each candidate concurrently, that&amp;#8217;s only four hours total- half the time!&lt;/p&gt;

&lt;h3 id=&#34;personal-non-technical-questions:3dcafca7ca783ca88343fc510ece7ff5&#34;&gt;Personal/Non-Technical Questions&lt;/h3&gt;

&lt;p&gt;It&amp;#8217;s important to ask non-development questions.  You want to get a sense of how well rounded a candidate is and what their personality is like.  Here are some example questions:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you stay on top of technology?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m looking to know what their go-to resources are for learning and keeping up with stuff.  Google is not a good answer.  Do they read blogs? What are their favorite books? Have they been to any conferences?  Subscribe to any magazines?  What can they bring to the table?&lt;/p&gt;

&lt;p style=&#34;margin-left: 1.6pt;&#34;&gt;
  &lt;strong&gt;What personal program projects have you worked on, if any?&lt;/strong&gt;
&lt;/p&gt;

&lt;p style=&#34;margin-left: 1.6pt;&#34;&gt;
  I&amp;#8217;m interested to know if they have any programming experience outside of work.  Not too bad if they don&amp;#8217;t, but it shows how into programming they are.
&lt;/p&gt;

&lt;p style=&#34;margin-left: 1.6pt;&#34;&gt;
  &lt;strong&gt;What is the coolest thing you&amp;#8217;ve done with technology? What are you proud of?&lt;/strong&gt;
&lt;/p&gt;

&lt;p style=&#34;margin-left: 1.6pt;&#34;&gt;
  One of my favorites.  It&amp;#8217;s important to hire people who are proud of what they do.  You can&amp;#8217;t beat someone who&amp;#8217;s about personal responsibility.
&lt;/p&gt;

&lt;p style=&#34;margin-left: 1.6pt;&#34;&gt;
  &lt;strong&gt;What are some websites you&amp;#8217;ve used where you appreciate the design of the site? Why?&lt;/strong&gt;
&lt;/p&gt;

&lt;p style=&#34;margin-left: 1.6pt;&#34;&gt;
  An analytical question.  Developers with design insight are rare.  A developer who shows appreciation for good design, or can &amp;#8220;talk&amp;#8221; design, is invaluable.
&lt;/p&gt;

&lt;p style=&#34;margin-left: 1.6pt;&#34;&gt;
  &lt;strong&gt;What do you want to be doing in a couple of years? What is one area where you want to be developing your skill set?&lt;/strong&gt;
&lt;/p&gt;

&lt;p style=&#34;margin-left: 1.6pt;&#34;&gt;
  I used to hate asking this question because its so cookie cutter.  But it&amp;#8217;s important to ask and to have the candidate elaborate on.  It does two things- let you know how driven the candidate is, and what they&amp;#8217;re interested in doing and evolving.  Both important things to know.  A good follow up is &amp;#8220;How are you going to do that?&amp;#8221;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color: black;&#34;&gt;Describe how you would handle a situation if you were required to finish multiple tasks by the end of the day, and there was no conceivable way that you could finish them. &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Answer: Prioritize.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color: black;&#34;&gt;If you could get rid of any one of the US states, which one would you get rid of, and why? &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: black;&#34;&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Answer: Canada.  Just kidding.  This one&amp;#8217;s good to change pace of the conversation if needed.  Ask if the candidate completely failed another question or is feeling insecure.  It can help them get on track.  It&amp;#8217;s one of those silly filler questions that&amp;#8217;s good at wasting time if you need too or changing the mood.&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: black;&#34;&gt;&lt;strong&gt;With your eyes closed, tell me step-by-step how to tie my shoes.&lt;/strong&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color: black;&#34;&gt;If selected for this position, can you describe your strategy for the first 90 days?&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You may not need this if you&amp;#8217;re doing role-playing development questions, but it&amp;#8217;s a good question to gauge how well a candidate can explain something.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color: black;&#34;&gt;Describe a criticism you were given at a job and how you worked to improve it.&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: black;&#34;&gt;This is another good question to ask.  Most people don&amp;#8217;t respond well to criticism, or aren&amp;#8217;t that self critical.  You don&amp;#8217;t want someone to be cocky nor beat themselves up.  But there are times when people do things they shouldn&amp;#8217;t or simply make mistakes.  Being self-aware and improving on weaknesses is one of the best qualities a person can have.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: black;&#34;&gt;&lt;br /&gt; &lt;/span&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Hiring Software Developers: The In House Interview (Open Ended Questions)</title>
          <link>http://blog.michaelhamrah.com/2008/12/hiring-software-developers-the-in-house-interview-open-ended-questions/</link>
          <pubDate>Wed, 10 Dec 2008 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2008/12/hiring-software-developers-the-in-house-interview-open-ended-questions/</guid>
          <description>&lt;p&gt;&lt;em&gt;Note: This is part of a series on hiring software developers.  See &lt;a title=&#34;Interview&#34; href=&#34;http://www.michaelhamrah.com/blog/index.php/tag/interview/&#34; target=&#34;_self&#34;&gt;articles tagged with interview for the series&lt;/a&gt;.  I needed to break the in house interview post into two parts.  This part focuses on open ended questions.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The in house interview is by far the most important part of the hiring process.  It&amp;#8217;s also the most difficult.  You need to vet a person thoroughly in a very short time.  If you don&amp;#8217;t have a strategy for the in house interview you will not effectively gauge a candidate nor be able to make a confident &amp;#8216;yes&amp;#8217; decision.  Furthermore, if you enter into a bargaining/negotiating process, you want enough information to know how far to go in the negotiations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open Ended Questions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Quite simply, you&amp;#8217;re testing a developer on how well they solve problems.  No, not those ridiculous how many dentists are in San Fransisco questions.  Development problems- that measure a candidate in how well they analyze information, gather requirements, structure applications, organize data, implement software and scale for the future.  These are development- not programming- problems.  They&amp;#8217;re not algorithms or set theory or knowing the best collection class to use.  These are problems regarding how well you go from a customer or product owner telling you something to a living, breathing software system.  If you&amp;#8217;re an agile development shop, or want to be one, it&amp;#8217;s essential you hire developers- not programmers- who do this well.&lt;/p&gt;

&lt;p&gt;Open ended questions offer a suite of scenarios where you explore various skills that define a good developer.  These scenarios are really up to you and can include everything from data modeling to application architecture to user interface design.  Essentially, you simply tee up a situation and see how the developer deals with the situation.  There&amp;#8217;s no right or wrong answer, just good or bad discussions.  More importantly, it requires solid communication- the ability to understand and explain ideas- which is the cornerstone of a good developer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Questions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first example focuses on application design and analysis.  Here in New York, we have MTA vending machines.  These are straightforward machines that let you buy either a prepaid or an all-you-can ride pass with credit or cash.  It&amp;#8217;s a simple system, everyone in New York has probably used it, and is perfect system to talk system design.  A regular ATM machine or other common system also works well- you want the developer already have an understanding of the system so they can focus on application design.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Design the system architecture for an MTA vending machine.  How would you break up the system into various components? How would the system work? What problems can occur? How can you deal with them?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I get to see how well a candidate can come up with all the different things you&amp;#8217;d need to know about a vending machine, and how thorough they are in their application design.  If they say &amp;#8220;I&amp;#8217;ll create a user input class and a payment processor&amp;#8221; they&amp;#8217;re not thinking through the issues. If they ramble on for ten minutes, they&amp;#8217;re not organized with their thoughts or approach.  I want to know how well they understand tiers and class design- roles and responsibilities and program organization.  Don&amp;#8217;t be afraid to ask what classes they would create to implement this system.&lt;/p&gt;

&lt;p&gt;This question should focus on a system the user is already comfortable with.  Don&amp;#8217;t have them gather requirements- it throws another dimension which can be difficult to maneuver, and takes away from the core point of system design.  It&amp;#8217;s important to ease them into this interview approach, so they don&amp;#8217;t get flustered or confused (however, it probably says a lot about them if they do).&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s a data modelling question inspired by Flickr:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Design a data model for photo album software.  There should be photos, where each photo belongs to one, and only one album.  Albums belong to users.  Users can view other people&amp;#8217;s photos if they are marked as public.  If a photo is private, no one can see the photo.  Each photo can be tagged using a simple &amp;#8220;tagging&amp;#8221; system.  Photos can have comments, which are linked to both the photo and the user who wrote the comment.  Finally, photos can belong to sets.  A set is a group of photos from various users.  A set is owned by a single user, but anyone can add a photo to a set.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This question works well on two fronts.  First, it obviously covers data modelling.  More importantly, it gauges the candidates ability to absorb information.  The question is explaining what we need from a business perspective- it doesn&amp;#8217;t list any specific attributes.  The candidate should think and ask what we need to put in these tables.  The question also highlights entity relationships, to see how well the candidate can deal with joins and data organization.  Unlike the MTA question, I&amp;#8217;m not approaching this as if they new what system I was talking about.  I could make this like the MTA question by saying, &amp;#8220;Datamodel Flickr&amp;#8221;.  I didn&amp;#8217;t.  I&amp;#8217;m looking how well they go from what the customer wants to an implementation- specifically, a data model.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s a web service related question:&lt;/p&gt;

&lt;p style=&#34;margin-left: 1.6pt;&#34;&gt;
  &lt;em&gt;Let&amp;#8217;s say I have two existing systems- an ordering system and a warehouse system.  The ordering system handles billing customers and fulfilling orders.  The warehouse system tracks inventory and sends shipments.  Currently, each night, orders are printed from the ordering system and faxed to the warehouse, where they are checked to see if they have any inventory.  If they are, they are fulfilled.  If not, they get put on hold and the warehouse calls the sales rep to have them update the ordering system to mark the order â€œon holdâ€ until the product comes in.  Your job is to make the ordering system and warehouse system talk to each other via web services.  What does the communication between the two system will look like?  What functions need to be exposed at which points? &lt;/em&gt;
&lt;/p&gt;

&lt;p style=&#34;margin-left: 1.6pt;&#34;&gt;
  There&amp;#8217;s a part two:
&lt;/p&gt;

&lt;p style=&#34;margin-left: 1.6pt;&#34;&gt;
  &lt;em&gt;A problem has occurred: Unfortunately, the connection between the two sites may be unreliable, but will never be down for more than a day.  Itâ€™s too cost prohibitive to upgrade the connection, and you&amp;#8217;re asked if there&amp;#8217;s anything you can do with the new service.  How would you design the system so a user can enter an order on a web page that will eventually get fulfilled by the warehouse?&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;I like this because not only does it talk about vanilla web services, it also hints on extensibility.  Here, the candidate is asked to lay out a web service design and come up with some schemas.  If they can boil this down to a simple client/server service, great.  If they come up with a complex two way communication system bad.  But, after they laid out the initial design, they&amp;#8217;re confronted with a major issue.  What do they need to do to deal with this problem given what the original solution?&lt;/p&gt;

&lt;p&gt;The big kahuna question- everything rolled into one:&lt;/p&gt;

&lt;p&gt;This one is mostly geared towards senior level programmers.  I was asked this question once in an interview and loved it- it was very draining, but in the end, it allowed me to show the company I was worth it.  It essentially wraps up all kinds of role playing questions into one big one.  Be warned- it also takes a while to do thoroughly.&lt;/p&gt;

&lt;p&gt;Essentially, you, as the interviewer, sketch out a set of web pages on paper.  Do this before hand.  When I got asked the question it was an insurance site.  A CMS system, blog site, or project tracking system works well too.  For the insurance system, there were four pages: The account owner, with a bunch of the usual fields (name, address, city, SS#).  Then, there was a form for cars- an owner insured a car.  Make, model, year, etc.  Next, there was a form for insured drivers.  This could just be account owner, or members of their family.  Cars were linked to insured drivers, and offered a price for the insurance.  The owner could buy the insurance or not.  You need to have four or five hand drawn web pages, each with a form, all related.&lt;/p&gt;

&lt;p&gt;So you walk the candidate through the hand drawn forms and what needs to happen, and you have them do numerous things.  They need a data model.  They need to design the application- data tier, business objects, web pages, whatever classes they need- see what they come up with.  They need to figure out how to get from one page to another and maintain state.  Sometimes I throw in a curve ball- in order to figure out the quote price, you need to call a long web service which could take ten to twenty seconds.  What&amp;#8217;s the user experience like? How do you deal with this?  Finally, you tell them they&amp;#8217;re running a dev team, and ask how they would break up the work to the different developers.  See how they approach this- it will give you a sense of well they know how to delegate and run a team.&lt;/p&gt;

&lt;p&gt;**What You&amp;#8217;re looking For&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;Remember, with the phone interview done, you should have a solid understanding of the technical ability of the candidate.  But that&amp;#8217;s not the most important quality of a candidate.  Google will tell me how to use ThreadPool.QueueUserWorkItem for multithreaded programming.  The real quality is knowing when I need multithreaded programming and knowing the difference between the ThreadPool API and asynchronous delegates. That&amp;#8217;s what you&amp;#8217;re looking for in these answers- the meat, not the special sauce.&lt;/p&gt;

&lt;p&gt;You can also create your own questions depending on the work you do.  The point is to focus on a specific thing you&amp;#8217;re looking for- data modelling,  SOA, application architecture, user interface design, business objects, or everything all in one- and try and stear the conversation in the general direction you want.  But let the candidate do most of the driving.&lt;/p&gt;

&lt;p&gt;With each question, have a specific area of focus.  See what their toolbox is like if you want to know about implementation or programming.  If it&amp;#8217;s about requirements, see how well the analyze the problem and cover the bases.  You know the problems you need to solve- so set up sandbox environments to see if they have the skills to solve your problems in various areas.  You decide how specific to get- and whether these are one, five or 20 minute questions.&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;re not getting what they want, you may need to nudge them a little.  But be careful not to ask lead in questions.  If you set up a question like, &amp;#8220;Okay, tell me how you would handle error in the MTA machine?&amp;#8221; and they reply with, &amp;#8220;Exceptions&amp;#8221; they simply don&amp;#8217;t get it.  If the struggle with the answer they probably don&amp;#8217;t know what to do- you&amp;#8217;ll easily spot this when you see it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;#8217;s Next&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There&amp;#8217;s a lot more to the in house interview- everything isn&amp;#8217;t solved with open ended questions.  My next post will cover what else to ask- those personal, character building questions as well as how to structure the interview.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>How to Hire a Software Developer: The Phone Interview</title>
          <link>http://blog.michaelhamrah.com/2008/12/how-to-hire-a-software-developer-the-phone-interview/</link>
          <pubDate>Mon, 01 Dec 2008 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2008/12/how-to-hire-a-software-developer-the-phone-interview/</guid>
          <description>&lt;p style=&#34;text-align: left;&#34;&gt;
  &lt;em&gt;Note: This is part of a series on hiring software developers.  See &lt;a title=&#34;Interview&#34; href=&#34;http://www.michaelhamrah.com/blog/index.php/tag/interview/&#34; target=&#34;_self&#34;&gt;articles tagged with interview for the series&lt;/a&gt;. &lt;/em&gt;
&lt;/p&gt;

&lt;p style=&#34;text-align: left;&#34;&gt;
  &lt;em&gt;&lt;/em&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;The Phone Interview&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;&lt;span&gt;The purpose of the phone interview is twofold.  First, a simple baseline for communication is established.  Communication is the most important quality a candidate can have.  You can always learn new technology, but if you can&amp;#8217;t communicate clearly- your ideas, your work, and your ability- you probably won&amp;#8217;t work well in a collaborative environment.  Secondly, the phone interview provides a benchmark for technical ability.  This is usually a list of straightforward programming questions in the particular language most important to the job. &lt;a title=&#34;.NET Questions&#34; href=&#34;http://www.michaelhamrah.com/blog/index.php/net-interview-questions/&#34; target=&#34;_self&#34;&gt;I use this list of .NET questions to get a sense of surface area and depth&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;Communication&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;How do you know a candidate is a good communicator? A two prong approach works best: first, have them go over their resume.&lt;span&gt; &lt;/span&gt;Ask about the projects theyâ€™ve worked on, and what they did on those projects.&lt;span&gt; &lt;/span&gt;How good are their answers? Do you have an understanding of the work they did?&lt;span&gt; &lt;/span&gt;Did they ramble on too much, or not provide enough depth, or repeat themselves?&lt;span&gt; &lt;/span&gt;If you asked any questions did they give a direct answer?&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Second, find out how well they answer technical questions.&lt;span&gt; &lt;/span&gt;This isnâ€™t an issue of right and wrong, itâ€™s about complexity.&lt;span&gt; &lt;/span&gt;Did they provide a clear explanation of the answer? Were they concise and confident they knew what they were talking about? Was there a hint of ego in their response? The more you phone interview the more you can tell someone who is good or bad at communication.&lt;span&gt; &lt;/span&gt;Itâ€™s that â€œthingâ€ that makes you say, â€œTell me more!â€&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;Technical Questions&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;There are plenty of sites out there for programming type questions- whether C#, PHP, Java, etc.  You know the technology you work with- so ask the candidate if they know it too.  Be flexible on this, we often interview people without any knowledge of the programming language we use.  If you&amp;#8217;re an expert in one language, you can probably pick up another pretty well.  Try and figure out how well the candidate has dug into their craft.  This will also give you the opportunity to rank a candidate as junior, mid-level, or senior.  It also lets you know how much they&amp;#8217;ve hyped up their ability (if you have the audacity to list php, .NET, java, perl, cobol and fortan as your &amp;#8220;expert languages&amp;#8221;, I&amp;#8217;m calling you out on it).&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Break up technical questions into a standard set of categories.&lt;span&gt; &lt;/span&gt;This includes SQL/Database work, class design/architecture, web programming, web services, html, javascript, language/framework how-toâ€™s. Go in with more than you can possibly fit into the allotted time: this will allow you to maneuver during the technical interview. &lt;span&gt; &lt;/span&gt;It doesnâ€™t make any sense to ask a candidate who has no sql experience a bunch of sql questions.&lt;span&gt; &lt;/span&gt;Instead, focus on their stronger skills or go for more surface area.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;How many questions to ask? Thatâ€™s easy: ask until they get something wrong.&lt;span&gt; &lt;/span&gt;This is important, because it allows you to see how they handle themselves when they donâ€™t know something.&lt;span&gt; &lt;/span&gt;Theyâ€™ll either flat out admit they donâ€™t know it, make an educated guess (hint: theyâ€™ll have a good sense of reasoning skills), or lie.&lt;span&gt; &lt;/span&gt;I prefer going for surface area then depth.&lt;span&gt; &lt;/span&gt;First, find out how much they know about different things.&lt;span&gt; &lt;/span&gt;Second, pick some of the most important areas youâ€™re looking for and go for depth: see how much they know in that area.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a title=&#34;.NET Questions&#34; href=&#34;http://www.michaelhamrah.com/blog/index.php/net-interview-questions/&#34; target=&#34;_self&#34;&gt;Here are some questions I use for the phone interview, or the in house interview if needed&lt;/a&gt;.&lt;span&gt; &lt;/span&gt;Note, Iâ€™m not going for detailed how-toâ€™s.&lt;span&gt; &lt;/span&gt;I like to keep things high level, as I believe itâ€™s important to know concepts.&lt;span&gt; &lt;/span&gt;Google will tell me how to expire cache after ten minutes.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;Divide and Conquer&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Usually, the phone interview is handed out to a lot of different people, as itâ€™s somewhat time consuming and very hit or miss.&lt;span&gt; &lt;/span&gt;Some prefer to have one person do the phone interview so they can easily compare candidates to make it to the next round.&lt;span&gt; &lt;/span&gt;Either way, itâ€™s important to make a checklist.&lt;span&gt; &lt;/span&gt;A checklist lets you remember the differences between candidates, and allows other developers to easily summarize their phone interviews.&lt;span&gt; &lt;/span&gt;Iâ€™ve gotten a lot of blank stares and â€œHow do I do this?â€ after asking developers to do phone interviews.&lt;span&gt; &lt;/span&gt;Give them a set of questions- and a checklist for them to fill out- will make your and their lives easier.&lt;span&gt; &lt;/span&gt;If you canâ€™t into trouble (i.e. sued) for not bringing somebody in, a checklist will also give you cover.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;Conclusion&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;The most important thing for you to know is donâ€™t worry about ending the interview early.&lt;span&gt; &lt;/span&gt;If clearly you donâ€™t like them, you just say any number of things:&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;1)&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;â€œIâ€™m sorry; weâ€™re looking for someone with more experience. Thank you for applying.â€&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;2)&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;â€œThank you for your time.&lt;span&gt; &lt;/span&gt;Unfortunately, we wonâ€™t be able to move forward.â€&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;3)&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;If you want to postpone the face to face, thereâ€™s always â€œWeâ€™re in the process of interviewing candidates now and will let you know about the next round in XX days.â€&lt;span&gt; &lt;/span&gt;Then, e-mail them no in XX days. This works if someone else is doing the phone interview, or you want to mull it over. Giving them an e-mail date prevents them from living in limbo when youâ€™ll get back to them.&lt;span&gt; &lt;/span&gt;Itâ€™s simple respect.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;You can even add in â€œWeâ€™ll keep your resume on fileâ€ if you feel guilty.&lt;span&gt; &lt;/span&gt;My point is, be respectful: if you know theyâ€™re a no, donâ€™t waste their time or yours.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;How do you decide you makes it or who doesnâ€™t? Simple: if they impress you and you want to know more, invite them in.&lt;span&gt; &lt;/span&gt;Your gut check should be, â€œThis person has potential.â€ If not, donâ€™t move forward.&lt;span&gt; &lt;/span&gt;If youâ€™re on the fence, put them on hold until you seriously would want to hire them.&lt;span&gt; &lt;/span&gt;Donâ€™t bring them in for the sake of bringing them in- the in house interview should take some time, and if youâ€™re not serious about them, donâ€™t have them put on a suit, take time away from their current job/life, and make them travel just to use as a benchmark for something else.&lt;span&gt; &lt;/span&gt;Itâ€™s not right.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Ideally, 15% of your applicant pool you want to do a phone interview with.  Maybe 25% if you are in a tight technical market like NYC.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;p class=&#34;MsoNormal&#34;&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>How to Hire a Software Developer</title>
          <link>http://blog.michaelhamrah.com/2008/11/how-to-hire-a-software-developer/</link>
          <pubDate>Sat, 29 Nov 2008 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2008/11/how-to-hire-a-software-developer/</guid>
          <description>&lt;p&gt;&lt;em&gt;Note: This is part of a series on hiring software developers.  See &lt;a title=&#34;Interview&#34; href=&#34;http://www.michaelhamrah.com/blog/index.php/tag/interview/&#34; target=&#34;_self&#34;&gt;articles tagged with interview for the series&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We just finished a round of recruiting at our company, and I&amp;#8217;m somewhat happy it&amp;#8217;s over.  Hiring software developers, or any other type of employee, is never an easy task.  How do you know you&amp;#8217;re picking the right person? How do you know if they&amp;#8217;re qualified? How do you know they&amp;#8217;ll deliver as well as they interview?  These are all questions we ask ourselves as we&amp;#8217;re harassed by recruiters, rummage over resumes, and get our interview questions ready.  However, I&amp;#8217;ve learned a great deal during this last round of recruiting, and am happy to say it&amp;#8217;s no longer a painful process.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s the one liner: If you go into the hiring process without a strategy, like most things, you&amp;#8217;re doomed to fail.  It&amp;#8217;s important to get your strategy down before you even post the job ad.  You need a clear pipeline from start to finish, so you can manage the process easily.  Plus, hiring somebody who&amp;#8217;s part of a team should never be a one person job.  That doesn&amp;#8217;t mean give the bad parts (like phone screenings) to other people.  That means getting your team involved- and allowing them to give critical feedback on a candidate.  It&amp;#8217;s easy to do that if you have a strategy that allows clear benchmarks when comparing candidates.&lt;/p&gt;

&lt;p&gt;We break our hiring pipeline into three major parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Phone Interview&lt;/li&gt;
&lt;li&gt;The In House Interview&lt;/li&gt;
&lt;li&gt;The Follow Up Interview&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I&amp;#8217;ll dig into each part in later posts, but it&amp;#8217;s important to note it all starts with getting resumes in the first place-  and that requires a solid ad.  You&amp;#8217;re not only announcing the job position, but you&amp;#8217;re selling yourself to the world.  The ad, as well as resumes, will be the subject of our next post.&lt;/p&gt;

&lt;p&gt;Stay tuned!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>How to Interview a Software Developer: The Ad and Resumes</title>
          <link>http://blog.michaelhamrah.com/2008/11/how-to-interview-a-software-developer-the-ad-and-resumes/</link>
          <pubDate>Sat, 29 Nov 2008 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2008/11/how-to-interview-a-software-developer-the-ad-and-resumes/</guid>
          <description>&lt;p&gt;&lt;em&gt;Note: This is part of a series on hiring software developers.  See &lt;a title=&#34;Interview&#34; href=&#34;http://www.michaelhamrah.com/blog/index.php/tag/interview/&#34; target=&#34;_self&#34;&gt;articles tagged with interview for the series&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Ad&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The ad is one of the most important parts of the hiring process, as it sets the tone for who you&amp;#8217;re asking to apply.  If you write a careless, generic ad you&amp;#8217;re going to get generic candidates.  Well, you&amp;#8217;re always going to get generic candidates, but with a generic ad you&amp;#8217;re definitely not going to get any good or great candidates.  It&amp;#8217;s as simple as this: If you want a good developer, you need a good ad.&lt;/p&gt;

&lt;p&gt;It doesn&amp;#8217;t take a lot of effort to see the difference between generic ads and good ads.  Just do a simple search of C# on Dice.com and you&amp;#8217;ll see them- bland titles, boring summaries.  Would you apply for these jobs? I don&amp;#8217;t even want to look at them!&lt;/p&gt;

&lt;p&gt;Here are some guidelines:**&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be proud of the company and the job, and be proud of the work you do.&lt;/strong&gt; Show that in the ad, and show why good people will excel at your company. There should be an exciting summary of the company, as well as the job.  It&amp;#8217;s important to put development work in the correct context, and allow people to see how they can fit and contribute.  A good ad will open the door to a positive answer when you ask, &amp;#8220;Why do you want to work for us?&amp;#8221; later.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#8217;t hide your company behind a recruiting agency.&lt;/strong&gt; Disclaimer: I hate recruiters.  99 out of 100 times they&amp;#8217;re awful people, shoveling the worst resumes in your face and harassing you.  About half my phone calls are recruiters- and I hang up on all them.  It&amp;#8217;s worthless.  More importantly, quality candidates probably aren&amp;#8217;t going to work with recruiters, because they don&amp;#8217;t need to.  It&amp;#8217;s their market, not yours.  Be open about the company, the job and the work.  A good candidate isn&amp;#8217;t going to apply just because the ad says &amp;#8220;C#/Javascript/Sql Server&amp;#8221;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explain about the lifestyle of the company in the ad.&lt;/strong&gt; Be somewhat silly, but honest.  People want to feel at home at work- and relaxed.  Show off the perks a little.  This will get people excited about the opportunity, and will make them want it more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explain what you&amp;#8217;re really looking for, not just certain skill sets.&lt;/strong&gt; If you&amp;#8217;re demanding people know one language or another, you&amp;#8217;re cutting off a lot of your applicant pool, and that&amp;#8217;s bad.  Sure, if you want someone who&amp;#8217;s going to do low-level device driver programming, you can be picky.  But for most things, it doesn&amp;#8217;t matter if a candidate knows C#, PHP, or Java.  A good candidate will learn a new language quickly.  It&amp;#8217;s more important they know the principals of programming.  Explain the skills on a high level- web programming, application architecture, content management systems, social websites- and let the candidate apply their knowledge to your needs.  If they can do that, you&amp;#8217;re golden.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resumes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hopefully you&amp;#8217;ll get a lot of resumes- and you may think it&amp;#8217;s hard to separate the good from the bad.  It&amp;#8217;s not- and if you&amp;#8217;re on the fence about somebody, then they&amp;#8217;e a &amp;#8220;NO&amp;#8221;.  Don&amp;#8217;t waste your time!  Here are some tips:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You&amp;#8217;re only goal is to see if the candidate is worth a phone call, that&amp;#8217;s it.  You&amp;#8217;re not hiring them based on their resume.&lt;/li&gt;
&lt;li&gt;If the have certain items in bold, they&amp;#8217;re no good.  Who bolds items on their resume? I see this all the time.  If you have to bold items in your resume, tailor your resume.&lt;/li&gt;
&lt;li&gt;A resume should be one page, two pages max.  If you get an eight page resume, pass.  It&amp;#8217;s all filler.&lt;/li&gt;
&lt;li&gt;A candidate should explain how they solved problems at their job.  You&amp;#8217;re hiring a problem solver.  If a candidate writes &amp;#8220;Created user controls and a site map for a website,&amp;#8221; don&amp;#8217;t call them.  That&amp;#8217;s a gimme.  Should they write they double clicked the visual studio icon also? I look for how they applied their knowledge to get things done.  You should too.&lt;/li&gt;
&lt;li&gt;Look for typos.  I see a lot of these- even small things, like capitalization errors.  If a candidate isn&amp;#8217;t going to take the time to clean up their resume, they&amp;#8217;re probably going to be sloppy programmers.&lt;/li&gt;
&lt;li&gt;I can live with someone specifying every technology since the dawn of man on their resume, but I&amp;#8217;m going to call you out on it.  I really don&amp;#8217;t believe people when I see &amp;#8220;PHP, ASP.NET 1.0/1.&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt;.0/3.0/3.5, WCF, WWF, WPF,WebForms,Cobol, Java,EJB, Windows Vista, XP, NT, Server, Abacus, Sql Server 7.0/2000/2005/2008&amp;#8243;!  Really? The abacus? You used the abacus at a job?  Somehow, somewhere, someone told candidates to list every possible buzzword on their resume, and people blindly followed.  FYI: Nobody&amp;#8217;s going to say &amp;#8220;Oh, sorry, you didn&amp;#8217;t list VB 6 in your skillset, I&amp;#8217;m not calling you.&amp;#8221;  If they do- don&amp;#8217; worry- you don&amp;#8217;t want to work for them.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Luckily, you&amp;#8217;ll be calling about 15% of the resumes you get.  In a tight job market like NYC, maybe 20-25%.  If you hire a lot, I&amp;#8217;m sure you&amp;#8217;ll find the resume says a lot about the candidate- and the ones that stand out are easy to spot.  **If you think you&amp;#8217;re not getting any good resumes in, then you&amp;#8217;re writing a poor ad.&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
