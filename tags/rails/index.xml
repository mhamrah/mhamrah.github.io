<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> </title>
    <link>http://blog.michaelhamrah.com/tags/rails/</link>
    <language>en-us</language>
    <author>Michael Hamrah</author>
    <rights>(C) 2015</rights>
    <updated>2011-08-12 00:00:00 &#43;0000 UTC</updated>

    
      
        <item>
          <title>Data Modeling at Scale:  MongoDb &#43; Mongoid, Callbacks, and Denormalizing Data for Efficiency</title>
          <link>http://blog.michaelhamrah.com/2011/08/data-modeling-at-scale-mongodb-mongoid-callbacks-and-denormalizing-data-for-efficiency/</link>
          <pubDate>Fri, 12 Aug 2011 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2011/08/data-modeling-at-scale-mongodb-mongoid-callbacks-and-denormalizing-data-for-efficiency/</guid>
          <description>

&lt;p&gt;I found myself confronted with a MongoDb data modeling problem. I have your vanilla User model which has many Items. The exact nature of an Item is irrelevant, but let us say a User can have lots of Items. I struggled with trying to figure out how to model this data in a flexible way while still leveraging the documented-orientated nature of MongoDb. The answer may seem obvious to some but it is interesting to weigh the options available.&lt;/p&gt;

&lt;h3 id=&#34;to-embed-or-not-to-embed:f1205cf7689e3c00acdefcf31ce7d859&#34;&gt;To Embed or Not to Embed&lt;/h3&gt;

&lt;p&gt;The main choice was to embed Items in a User or have that as a separate collection. I do not think it makes sense to go vice versa, as Users are unique and clearly a top level entity. It would not make sense to have thousands of the same User in an Items collection. So the choice was between having Items in its own collection or embedding it in Users. A couple of factors came into play: How can I access, sort, or page through Item results if it is embedded in a User? What happens if I had so many Items in a User class I hit the MongoDb 4mb document size limit? (Unlikely: 4mb is a lot of data, but I would certainly not want to have to refactor that logic later on!) What would sharding look like with a large number of very large User documents? Most importantly, at what point would the number of Items be problematic with this approach? A hundred? A thousand? A hundred thousand?&lt;/p&gt;

&lt;h3 id=&#34;when-to-embed:f1205cf7689e3c00acdefcf31ce7d859&#34;&gt;When to Embed&lt;/h3&gt;

&lt;p&gt;I think embedded documents are an awesome feature of MongoDb, and the general approach, as recommended on the docs, is to say &amp;#8220;Why wouldn&amp;#8217;t I put this in an embedded document?&amp;#8221;. I would say if the number of Items a User would have is relatively small (say, enough that you would not need to page them on a UI, or if it would not create large network io by just accessing that field) then it can be an embedded document. The decision is a lot simpler if it is a 1..1 relationship as the potential size is clearly defined. 1..N relationships break down with embedded relations when N becomes so large that accessing it as a whole is impractical. As far as I know there does not seem to be a way to page or sort through an embedded array directly within MongoDb: you need to pull the entire field out of the database with field selection and then page on the client. Note MongoDb offers numerous ways to find data within a document no matter how it is stored within the document (see the &lt;a href=&#34;http://www.mongodb.org/display/DOCS/Dot+Notation+%28Reaching+into+Objects%29&#34;&gt;docs on dot notation&lt;/a&gt; for more). You can even query on the position of elements in an array, which is helpful with sorted embedded lists (find me all Users who have Item Z as the first element). But sadly you cannot say &amp;#8220;give me the first to the Nth element in an embedded array&amp;#8221;. It is all or nothing.&lt;/p&gt;

&lt;p&gt;Now Mongoid does offer the ability to page through an embedded association using a gem (seems like people use &lt;a href=&#34;https://github.com/amatsuda/kaminari&#34;&gt;Kaminari&lt;/a&gt; as will_paginate was removed from Mongoid some time ago). However, this paging is done within the ruby object for embedded relations. More importantly, it is only done on a per-document basis. Under the hood you need to grab the entire embedded relation &lt;em&gt;embedded within its root document&lt;/em&gt; (think an array of Users containing an array of Items, not a plain array of Items). This means you cannot grab a collection of embedded documents which span multiple root documents. You cannot say &amp;#8220;give me all Items of type &amp;#8216;X&amp;#8217;. You need to say &amp;#8220;give me all Users and its Items containing Items of type &amp;#8216;X&amp;rsquo;&amp;#8221;. If you ever ran into the &amp;#8220;Access to the collection for XXX is not allowed since it is an embedded document, please access a collection from the root document&amp;#8221; error you are probably trying to issue an unsupported Mongoid query by bypassing a root document. You think you can treat embedded relations like normal collections, but you can&amp;#8217;t.&lt;/p&gt;

&lt;h3 id=&#34;when-to-have-separate-collections:f1205cf7689e3c00acdefcf31ce7d859&#34;&gt;When to Have Separate Collections&lt;/h3&gt;

&lt;p&gt;So where does that leave us: If the relation is small enough, than an embedded relation is fine: we just need to realize that we can never really treat elements in that collection across its top level document and that getting those elements is an all-or-nothing decision for each parent document. For the sake of argument, let us say a User can have thousands of Items, and we wanted the ability to list Items across Users in a single view. That would be too much to manage as its own field as an embedded document, and we could not aggregate Items across Users easily. So it needs to be in its own collection. This now gives us numerous sorting options and paging features like skip and limit to reduce network traffic. If we have Items as its own collection then we can create a DBRef between the two. This is a classical relational breakdown. The thing that smells with this approach, specifically when using MongoDb, is that if I were viewing a list of Items, and wanted to show the username associated with them, I would either have to use a DBRef command to pull user information or make two queries. Less than ideal. A JOIN would certainly be easier (albeit at scale, impractical, but probably for the DbRef approach too).&lt;/p&gt;

&lt;h3 id=&#34;the-solution:f1205cf7689e3c00acdefcf31ce7d859&#34;&gt;The Solution&lt;/h3&gt;

&lt;p&gt;So what I&amp;#8217;m really looking for is the ability to show the username with a list of Items when each has its own collection. The trick is I do not need to aggregate this data when I am pulling it out of the database. Instead I can assemble it before I put in the database and it will all be there when I take it out. Classic denormalization. With Mongoid and &lt;a href=&#34;http://mongoid.org/docs/callbacks.html&#34;&gt;Callbacks&lt;/a&gt; this becomes extremely easy.&lt;/p&gt;

&lt;p&gt;On my Items class I add a _:belongs&lt;em&gt;to :user&lt;/em&gt; property along with a &lt;em&gt;:username&lt;/em&gt; property. I want to ensure that a &lt;em&gt;:user&lt;/em&gt; always exists, so I add a &lt;em&gt;validates_presence_of :user&lt;/em&gt; validation. I do not need to add &lt;em&gt;:username&lt;/em&gt; to this validation as we will see below. Then I leverage callbacks like so:&lt;/p&gt;

&lt;pre class=&#34;syntax ruby&#34;&gt;before_save :add_username

protected
def add_username
  if user_id_changed?
    self.username = user.username
  end
end&lt;/pre&gt;

&lt;p&gt;What will happen is if the User property changed Mongoid will set the current Item&amp;#8217;s username value to the user.username property value. The username field is now stored within the Item document, and I can query on this field as easily as any other Item property (including the user_id relation on the Item document). More importantly, it is already available in a query result so there is no need to make an additional query on User.username for display. Any time the user changes (if Items can switch Users) the username will be updated automatically before the save to maintain consistency. Because the :user object is required, there is no need to also make :username required. Username will read from the required User property before each save. There is a slight catch with this approach: callbacks will only be run on document which received the save call, so be careful with cascading updates. As always a great test suite will always ensure the behavior you want is enforced.&lt;/p&gt;

&lt;h3 id=&#34;sharding:f1205cf7689e3c00acdefcf31ce7d859&#34;&gt;Sharding&lt;/h3&gt;

&lt;p&gt;The other point about the user relation, whether it is via the username field or on user_id, is that it makes a good shard key. If we shard off of this field (probably in conjunction of another key) you can control things like write scaling while keeping relevant data close together for querying. For instance, sharding only on username will put all data in the same server to make querying a user&amp;#8217;s items extremely efficient. Sharding on username and something else will get writes distributed across servers at the expense of having to gather elements across servers when returning results. The bottom line is know your use case: are faster writes more important than faster reads? Which one are you doing more of?&lt;/p&gt;

&lt;h3 id=&#34;in-conclusion:f1205cf7689e3c00acdefcf31ce7d859&#34;&gt;In Conclusion&lt;/h3&gt;

&lt;p&gt;I think there are two important things to realize when it comes to modeling with not just Mongoid but with any type of data store, sql or nosql. First when you are dealing with scale you want to put your data in the same way you want to get it out. Know your data access patterns. Sql allows a tremendous amount of flexibility, but joining numerous tables across millions of rows is extremely inefficient. More importantly, if you model your data in NoSql incorrectly, you could end up with similar performance problems. In the case of the data denormalization exercise above, adding a username field to the Items collections saves us from a DbRef later. Plus, with the use of callbacks, getting our data into Mongoid in a denormalized way is easy. We could easily apply the same principle to a sql-based solution: add a username column to a Item table or create a materialized view/indexed view on the Users/Items data. If you are debating a no-sql solution over a sql one, take a look at the cost/benefit of one approach over another in terms of how easy it is to model your data around data access. I think MongoDb gives a good amount of flexibility, especially with querying and indices, while still promoting some of the NoSql goodies like easy sharding for scalability and easy replication for reliability and read scaling.&lt;/p&gt;

&lt;p&gt;Secondly, it is extremely important to know your toolset. With MongoDb, you get a tremendous amount of querying power: filtering on any field, no matter the nesting, even if it&amp;#8217;s an array; creating indices on said fields; map/reduce views; only retrieving specific fields from a document; the list is nearly endless. ORM features are important too: How does Mongoid map its API to MongoDB commands? How does it deal with dirty tracking? What callbacks are available? The coolest thing on the &lt;a href=&#34;http://www.mongoid.org&#34;&gt;Mongoid&lt;/a&gt; website is the statement &lt;em&gt;This is why the documentation provides the exact queries that Mongoid is executing against the database when you call a persistence operation. If we took the time to tell you, you should listen.&lt;/em&gt; VERY TRUE! I like that. The point being, there should be a purpose why you are choosing a NoSql solution: so know what it is and leverage it. It will mean the difference of succeeding at scale or failing at launch.&lt;/p&gt;

&lt;h3 id=&#34;cassandra:f1205cf7689e3c00acdefcf31ce7d859&#34;&gt;Cassandra&lt;/h3&gt;

&lt;p&gt;As an interesting footnote, I think Cassandra exemplifies the query-first approach to data modeling (I mean, it states so on its wiki!). Cassandra&amp;#8217;s uniqueness is in its masterless approach as a key/value store. It comes with some interesting features: the choice of using a secondary index vs. columnfamily as index, numerous comparison operators on columnfamily names, super columns vs. columns for storing data, replication and write consistency options across multiple data centers. This leads to plenty of benefits but with a certain cost. As for the know your tools/know your data philosophy, an example is the typical choice of &amp;#8220;Do you create a row and use its respected columns as an index, choosing an appropriate column comparison type, or do you treat your data as a key/value store and use a secondary index for queries?&amp;#8221; One the one hand, you have a pre-sorted list that queries from one machine and with one call with slices for paging; on the other, you may need to farm out to a lot of machines to get the data you want. Knowing your options is important, and knowing what you have to do to implement your choice is nearly as important. Even with the best Cassandra ORMs you still need to do a lot of prep to get your data into and out of Cassandra in a meaningful way.&lt;/p&gt;

&lt;h3 id=&#34;final-thought:f1205cf7689e3c00acdefcf31ce7d859&#34;&gt;Final Thought&lt;/h3&gt;

&lt;p&gt;In a bit of contradictory advice, I&amp;#8217;d say don&amp;#8217;t sweat it too much. Do some preliminary research, go with your hunch and trust your ability to refactor when needed. If you wait to figure out the perfect solution, you won&amp;#8217;t build anything!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Machinist 2 &#43; Mongoid &#43; Embeds_Many Goodness</title>
          <link>http://blog.michaelhamrah.com/2010/12/machinist-2-mongoid-embeds_many-goodness/</link>
          <pubDate>Fri, 10 Dec 2010 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2010/12/machinist-2-mongoid-embeds_many-goodness/</guid>
          <description>&lt;p&gt;I had a heck of a time getting fixtures working with &lt;a href=&#34;http://mongoid.org/&#34;&gt;Mongoid&lt;/a&gt; when it came to a required embeds_many property.  No matter what I did, I kept getting an error: &amp;#8220;&lt;em&gt;Access to the collection for&lt;/em&gt; XXX &lt;em&gt;is not allowed since it is an embedded document, please access a collection from the root document.&amp;#8221;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Then I stumbled upon &lt;a href=&#34;https://github.com/notahat/machinist&#34;&gt;Machinist&lt;/a&gt; v2 and the &lt;a href=&#34;https://github.com/nmerouze/machinist_mongo&#34;&gt;machinist_mongo&lt;/a&gt; gem which solved the problem.  And it had a nice API, to boot!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Getting Started&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As of this post, you&amp;#8217;ll need to pull the machinist_mongo gem directly from git and get the machinist2 branch.  That&amp;#8217;s easy with Rails 3:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;gem &amp;#8216;machinist_mongo&amp;#8217;, :git =&amp;gt; &amp;#8216;&lt;a href=&#34;https://github.com/nmerouze/machinist_mongo.git&amp;amp;#8217&#34;&gt;https://github.com/nmerouze/machinist_mongo.git&amp;amp;#8217&lt;/a&gt;;, :require =&amp;gt; &amp;#8216;machinist/mongoid&amp;#8217;, :branch =&amp;gt; &amp;#8216;machinist2&amp;#8242;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Next, run&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;syntax bash&#34;&gt;bundle&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to update your gems.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m using RSpec, so I put my blueprints in the spec/support/ directory so they get automatically loaded. Let&amp;#8217;s say I have a User class with a :username and an embeds_many :authentications property (as if you&amp;#8217;re following the Railscasts episode on using Devise and Omniauth).  The blueprint will look like this:&lt;/p&gt;

&lt;pre class=&#34;syntax ruby&#34;&gt;Authentication.blueprint do
     uid { &#34;user#{serial_number}&#34; }
     provider { &#34;machinist&#34; }
end

User.blueprint do
     username { &#34;user#{serial_number}&#34; }
     authentications(1) { Authentication.make }
end
&lt;/pre&gt;

&lt;p&gt;My authentications blueprint sets a unique id using the #{serial_number} counter in machinist 2. Then I&amp;#8217;m declaring an array of one item in my authentications array, and calling Authentication.make to load the Authentication blueprint. This essentially lazy loads the authentications property via the root document, which is exactly what Mongoid wants, as there&amp;#8217;s no Authentications table or root-level document.&lt;/p&gt;

&lt;p&gt;Now you can build away using Machinist 2&amp;#8217;s User.make (for creating an object without saving it) or make! (which makes and saves the object).&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Getting Ruby 1.9, Readline, Rails, and Mysql all running on Snow Leopard</title>
          <link>http://blog.michaelhamrah.com/2009/12/getting-ruby-1-9-readline-rails-and-mysql-all-running-on-snow-leopard/</link>
          <pubDate>Sun, 27 Dec 2009 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2009/12/getting-ruby-1-9-readline-rails-and-mysql-all-running-on-snow-leopard/</guid>
          <description>

&lt;p&gt;In my never ending love/hate relationship with Ruby, Rails and my Mac I&amp;#8217;ve finally gotten Ruby 1.9 up and running with Rails 2.3 and MySql 64 bit.  All on Snow Leopard.  There was an even a little detour with Readline.  If you&amp;#8217;ve scoured other posts about Snow Leopard, Ruby, Rails and Mysql and ended up here I feel your pain.  I hope this helps you on your way. &lt;a href=&#34;http://wonko.com/post/how-to-compile-ruby-191&#34;&gt;Most of this info&lt;/a&gt; is from other places which I&amp;#8217;ve explained in a little (just a little) but more depth.&lt;/p&gt;

&lt;h3 id=&#34;install-xcode:c926fa09a3f264a43863b502ab5b6f5a&#34;&gt;Install XCode&lt;/h3&gt;

&lt;p&gt;You need XCode to do any of this, so install it.  If you&amp;#8217;re upgrading to Snow Leopard, reinstall XCode so you get the correct c compiler.&lt;/p&gt;

&lt;h3 id=&#34;your-profile:c926fa09a3f264a43863b502ab5b6f5a&#34;&gt;Your profile&lt;/h3&gt;

&lt;p&gt;Here&amp;#8217;s the deal.  We&amp;#8217;re going to install ruby 1.9 to your /usr/local directory.  It will dump stuff in /usr/local/bin and other stuff in /usr/local/lib.  Why here?  That&amp;#8217;s where it goes.  The default install of ruby on Snow Leopard 1.8, lives in /System/Library/Frameworks/Ruby.framework/Versions/Current.  Current is really an alias (actually, symlink) to the 1.8 directory at the same level.  For some it may seem like a good idea to install ruby 1.9 here.  It&amp;#8217;s not.  Just put in /usr/local like everyone else.&lt;/p&gt;

&lt;p&gt;Because ruby 1.9 will live in our /usr/local you have to help out your terminal a little.  You have to tell it where to look for the bin of ruby 1.9.  So when you run &amp;#8220;ruby&amp;#8221; from terminal you get the 1.9 version in /usr/local, not the 1.8 version in the System Library.  That&amp;#8217;s why you have to add a path to /usr/local in your profile.  Do this from the terminal:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;mate ~/.bash_profile
&lt;/pre&gt;

&lt;p&gt;This says, &amp;#8220;open or create the file .bash_profile, in the home directory (~/), using textmate&amp;#8221;.  You can use any other editor if you know how- but if you did you probably wouldn&amp;#8217;t need to read this.  So just buy- and use- textmate.  It&amp;#8217;s a nice app.  Now, .bash_profile is a file used by bash, aka the terminal app, for settings.  Some places you&amp;#8217;ll see &amp;#8220;mate .profile&amp;#8221; instead.  &lt;a href=&#34;http://hayne.net/MacDev/Notes/unixFAQ.html&#34;&gt;This will work too&lt;/a&gt;&amp;#8211; but if you have a .profile and .bash_profile you may run in to problems.  Just have one, preferably .bash_profile, and write this in it:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;export PATH=/usr/local/bin:/usr/local/sbin:/usr/local/mysql/bin:$PATH
&lt;/pre&gt;

&lt;p&gt;This appends our /usr/local/bin and sbin to the current list of directories to search for when trying to find out where all those little commands live which you type into the terminal.  Keen eyes may have noticed the mysql/bin thrown in there.  This is for later.  The :$PATH at the end is extremely important- it includes other paths which are included in other places. Once this is done then type &amp;#8220;source .bash_profile&amp;#8221; from terminal to load the changes.&lt;/p&gt;

&lt;h3 id=&#34;try-installing-ruby:c926fa09a3f264a43863b502ab5b6f5a&#34;&gt;Try Installing Ruby&lt;/h3&gt;

&lt;p&gt;One way to install ruby is by using &lt;a href=&#34;http://www.macports.org/&#34;&gt;MacPorts&lt;/a&gt;.  If you want to get a little more hands on, we&amp;#8217;re going to pull the source down and build it ourselves.  MacPorts is probably the easiest option.  We&amp;#8217;re not doing the easy option.&lt;/p&gt;

&lt;p&gt;Note: Read all this first!  In the terminal, make sure you&amp;#8217;re in your home directory by doing a simple &amp;#8220;cd&amp;#8221;.  Then, do this:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;mkdir src
cd src
&lt;/pre&gt;

&lt;p&gt;We&amp;#8217;re creating a new directory called src for our source files, and moving into said directory.  Now we can get the code:&lt;/p&gt;

&lt;p&gt;curl -O &lt;a href=&#34;ftp://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.1-p376.tar.gz&#34;&gt;ftp://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.1-p376.tar.gz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;tar xzvf ruby-1.9.1-p376.tar.gz&lt;/p&gt;

&lt;p&gt;cd ruby-1.9.1-p376/&lt;/p&gt;

&lt;p&gt;Curl is a nice little app to pull things from the internet.  The -O option simply names the local file the same as the remote file.  Ruby 1.9.1-p376 was the latest version as of this writing, but [In my never ending love/hate relationship with Ruby, Rails and my Mac I&amp;#8217;ve finally gotten Ruby 1.9 up and running with Rails 2.3 and MySql 64 bit.  All on Snow Leopard.  There was an even a little detour with Readline.  If you&amp;#8217;ve scoured other posts about Snow Leopard, Ruby, Rails and Mysql and ended up here I feel your pain.  I hope this helps you on your way. &lt;a href=&#34;http://wonko.com/post/how-to-compile-ruby-191&#34;&gt;Most of this info&lt;/a&gt; is from other places which I&amp;#8217;ve explained in a little (just a little) but more depth.&lt;/p&gt;

&lt;h3 id=&#34;install-xcode-1:c926fa09a3f264a43863b502ab5b6f5a&#34;&gt;Install XCode&lt;/h3&gt;

&lt;p&gt;You need XCode to do any of this, so install it.  If you&amp;#8217;re upgrading to Snow Leopard, reinstall XCode so you get the correct c compiler.&lt;/p&gt;

&lt;h3 id=&#34;your-profile-1:c926fa09a3f264a43863b502ab5b6f5a&#34;&gt;Your profile&lt;/h3&gt;

&lt;p&gt;Here&amp;#8217;s the deal.  We&amp;#8217;re going to install ruby 1.9 to your /usr/local directory.  It will dump stuff in /usr/local/bin and other stuff in /usr/local/lib.  Why here?  That&amp;#8217;s where it goes.  The default install of ruby on Snow Leopard 1.8, lives in /System/Library/Frameworks/Ruby.framework/Versions/Current.  Current is really an alias (actually, symlink) to the 1.8 directory at the same level.  For some it may seem like a good idea to install ruby 1.9 here.  It&amp;#8217;s not.  Just put in /usr/local like everyone else.&lt;/p&gt;

&lt;p&gt;Because ruby 1.9 will live in our /usr/local you have to help out your terminal a little.  You have to tell it where to look for the bin of ruby 1.9.  So when you run &amp;#8220;ruby&amp;#8221; from terminal you get the 1.9 version in /usr/local, not the 1.8 version in the System Library.  That&amp;#8217;s why you have to add a path to /usr/local in your profile.  Do this from the terminal:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;mate ~/.bash_profile
&lt;/pre&gt;

&lt;p&gt;This says, &amp;#8220;open or create the file .bash_profile, in the home directory (~/), using textmate&amp;#8221;.  You can use any other editor if you know how- but if you did you probably wouldn&amp;#8217;t need to read this.  So just buy- and use- textmate.  It&amp;#8217;s a nice app.  Now, .bash_profile is a file used by bash, aka the terminal app, for settings.  Some places you&amp;#8217;ll see &amp;#8220;mate .profile&amp;#8221; instead.  &lt;a href=&#34;http://hayne.net/MacDev/Notes/unixFAQ.html&#34;&gt;This will work too&lt;/a&gt;&amp;#8211; but if you have a .profile and .bash_profile you may run in to problems.  Just have one, preferably .bash_profile, and write this in it:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;export PATH=/usr/local/bin:/usr/local/sbin:/usr/local/mysql/bin:$PATH
&lt;/pre&gt;

&lt;p&gt;This appends our /usr/local/bin and sbin to the current list of directories to search for when trying to find out where all those little commands live which you type into the terminal.  Keen eyes may have noticed the mysql/bin thrown in there.  This is for later.  The :$PATH at the end is extremely important- it includes other paths which are included in other places. Once this is done then type &amp;#8220;source .bash_profile&amp;#8221; from terminal to load the changes.&lt;/p&gt;

&lt;h3 id=&#34;try-installing-ruby-1:c926fa09a3f264a43863b502ab5b6f5a&#34;&gt;Try Installing Ruby&lt;/h3&gt;

&lt;p&gt;One way to install ruby is by using &lt;a href=&#34;http://www.macports.org/&#34;&gt;MacPorts&lt;/a&gt;.  If you want to get a little more hands on, we&amp;#8217;re going to pull the source down and build it ourselves.  MacPorts is probably the easiest option.  We&amp;#8217;re not doing the easy option.&lt;/p&gt;

&lt;p&gt;Note: Read all this first!  In the terminal, make sure you&amp;#8217;re in your home directory by doing a simple &amp;#8220;cd&amp;#8221;.  Then, do this:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;mkdir src
cd src
&lt;/pre&gt;

&lt;p&gt;We&amp;#8217;re creating a new directory called src for our source files, and moving into said directory.  Now we can get the code:&lt;/p&gt;

&lt;p&gt;curl -O &lt;a href=&#34;ftp://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.1-p376.tar.gz&#34;&gt;ftp://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.1-p376.tar.gz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;tar xzvf ruby-1.9.1-p376.tar.gz&lt;/p&gt;

&lt;p&gt;cd ruby-1.9.1-p376/&lt;/p&gt;

&lt;p&gt;Curl is a nice little app to pull things from the internet.  The -O option simply names the local file the same as the remote file.  Ruby 1.9.1-p376 was the latest version as of this writing, but]&lt;a href=&#34;http://www.ruby-lang.org/en/&#34;&gt;4&lt;/a&gt; for the latest release.  Tar xzvf simply unpacks the compressed download.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Very helpful hint:&lt;/strong&gt; &lt;em&gt;If you ever are unsure about a command, simply type the command and &amp;#8211;help.  As in, curl &amp;#8211;help.  This is very helpful.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Next, we get to the good stuff.  First, run autoconf simply by typing &amp;#8220;autoconf&amp;#8221;:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;autoconf&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://www.gnu.org/software/autoconf/&#34;&gt;Autoconf&lt;/a&gt; is a tool used for generating configuration scripts.  It&amp;#8217;s important you run this.  Then, run the configuration script.  The thing which worked for me was:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;./configure --prefix=/usr/local/ --enable-shared --with-readline-dir=/usr/local
&lt;/pre&gt;

&lt;p&gt;This tells us to install ruby in the /usr/local directory, build a shared library for ruby, and use the readline installation found in /usr/local. &lt;strong&gt;Very Important:&lt;/strong&gt; some users prefer adding a suffix to the ruby 1.9 install so it doesn&amp;#8217;t interfere with the system install of ruby.  By adding the &amp;#8211;program-suffix=19 option to configure you&amp;#8217;ll append &amp;#8220;19&amp;#8221; to all commands, like &amp;#8220;ruby19&amp;#8243; and &amp;#8220;gem19&amp;#8243;.  This is a smart idea as it won&amp;#8217;t interfere with the default ruby installation.  Using this technique there are ways to easily switch between ruby installations.  If you don&amp;#8217;t care about 1.8, and just want the ease of typing &amp;#8220;ruby&amp;#8221; and getting the latest 1.9, omit the &amp;#8211;program-suffix option.&lt;/p&gt;

&lt;p&gt;If you run ./configure and get an error of:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;configure: WARNING: unrecognized options: &amp;#8211;with-readline-dir&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You did not run autoconf.  Type it and run it, then run configure again.&lt;/p&gt;

&lt;p&gt;Sometimes you&amp;#8217;ll see the &amp;#8211;enable-pthread option.  There seems to be some debate on whether this is a good idea.  I say omit it unless you know what you&amp;#8217;re doing.  You can google for more info.  Feel free to explore and google other configure options- simply type &amp;#8220;configure &amp;#8211;help&amp;#8221; to list them all.&lt;/p&gt;

&lt;p&gt;Next we need to run:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;make&lt;/pre&gt;

&lt;p&gt;This builds all the source files needed for the install.  If you run this and get an error of:&lt;/p&gt;

&lt;p&gt;readline.c: In function â€˜username_completion_proc_callâ€™:&lt;/p&gt;

&lt;p&gt;readline.c:1159: error: â€˜username_completion_functionâ€™ undeclared (first use in this function)&lt;/p&gt;

&lt;p&gt;You don&amp;#8217;t have readline- or at least the proper version of readline- installed.  This is a problem.  Let&amp;#8217;s get it.&lt;/p&gt;

&lt;h3 id=&#34;readline:c926fa09a3f264a43863b502ab5b6f5a&#34;&gt;Readline&lt;/h3&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;cd ~/src
curl -O ftp://ftp.gnu.org/gnu/readline/readline-6.0.tar.gz
tar xzvf readline-6.0.tar.gz
cd readline-6.0
./configure --prefix=/usr/local
make
sudo make install
&lt;/pre&gt;

&lt;p&gt;You&amp;#8217;ve now installed readline.  You may get a warning of &lt;em&gt;install: you may need to run ldconfig at&lt;/em&gt; at the end&lt;em&gt;.&lt;/em&gt; Don&amp;#8217;t worry about it.  At least I didn&amp;#8217;t have to worry about it.&lt;/p&gt;

&lt;h3 id=&#34;do-everything-again:c926fa09a3f264a43863b502ab5b6f5a&#34;&gt;Do everything again&lt;/h3&gt;

&lt;p&gt;By now, you know the drill.  Hop back to the ruby source code directory and try it again.  But if you ran make in the ruby install step and got errors, just run &amp;#8220;make clean&amp;#8221; to reset everything.  It&amp;#8217;s a good idea.&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;make clean
autoconf
./configure --prefix=/usr/local/ --with-readline-dir=/usr/local --enable-shared
make
sudo make install
&lt;/pre&gt;

&lt;p&gt;That should be it.  Hopefully you&amp;#8217;re error free.  Typing:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;which ruby&lt;/pre&gt;

&lt;p&gt;should return:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/usr/local/bin/ruby&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;and typing &amp;#8220;ruby -v&amp;#8221; should return the version of ruby you&amp;#8217;ve just downloaded.  Unless you used the &amp;#8211;program-suffix option above, then it&amp;#8217;s probably &amp;#8220;ruby19 -v&amp;#8221;&lt;/p&gt;

&lt;h3 id=&#34;r-ails:c926fa09a3f264a43863b502ab5b6f5a&#34;&gt;&lt;strong&gt;R&lt;/strong&gt;&lt;strong&gt;ails&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Now you can download and install rails.  Simply run:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;sudo gem update --system
sudo gem install rails
&lt;/pre&gt;

&lt;h3 id=&#34;mysql:c926fa09a3f264a43863b502ab5b6f5a&#34;&gt;Mysql&lt;/h3&gt;

&lt;p&gt;Mysql is a piece of cake.  Simply grab the x86_64 &lt;a href=&#34;http://dev.mysql.com/downloads/mysql/5.1.html#macosx-dmg&#34;&gt;install package from the Mysql site.&lt;/a&gt; Even though it&amp;#8217;s for 10.5, it works fine on 10.6 (Snow Leopard).  Once this is done, you can build the mysql gem:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;sudo env ARCHFLAGS=&#34;-arch x86_64&#34; gem install mysql -- --with-mysql-config=/usr/local/mysql/bin/mysql_config
&lt;/pre&gt;

&lt;h3 id=&#34;fin:c926fa09a3f264a43863b502ab5b6f5a&#34;&gt;Fin&lt;/h3&gt;

&lt;p&gt;Now, try to get everything running.  Go back to your home directory, create a rails app, and see if it works:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;cd ~/
rails playground --databse=mysql
cd playground
rake db:create
script/server
&lt;/pre&gt;

&lt;p&gt;Go to &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;, check your environment settings, and you should see:&lt;/p&gt;

&lt;table style=&#34;height: 164px;&#34; width=&#34;256&#34;&gt;
  &lt;tr&gt;
    &lt;td&gt;
      Ruby version
    &lt;/td&gt;
    
    &lt;td&gt;
      1.9.1 (i386-darwin10.2.0)
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      RubyGems version
    &lt;/td&gt;
    
    &lt;td&gt;
      1.3.5
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Rack version
    &lt;/td&gt;
    
    &lt;td&gt;
      1.0
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Rails version
    &lt;/td&gt;
    
    &lt;td&gt;
      2.3.5
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Active Record version
    &lt;/td&gt;
    
    &lt;td&gt;
      2.3.5
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Active Resource version
    &lt;/td&gt;
    
    &lt;td&gt;
      2.3.5
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Action Mailer version
    &lt;/td&gt;
    
    &lt;td&gt;
      2.3.5
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Active Support version
    &lt;/td&gt;
    
    &lt;td&gt;
      2.3.5
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;And voila, you&amp;#8217;re done!&lt;/p&gt;

&lt;p&gt;UPDATE:&lt;/p&gt;

&lt;p&gt;If you use Textmate to develop with Rails, your Textmate Ruby path will point to the system&amp;#8217;s 1.8 version, so you&amp;#8217;ll get awakard issues of Gems not being available or other weird stuff when trying to run Ruby within Textmate (like when you want to RSpec tests).  This fix is simple: go to Textmate -&amp;gt; Preferences -&amp;gt; Advanced -&amp;gt; Shell Variables and add TM_RUBY with a value of /usr/local/bin/ruby and you&amp;#8217;ll be good to go.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Authlogic and OpenID on Rails</title>
          <link>http://blog.michaelhamrah.com/2009/05/authlogic-and-openid-on-rails/</link>
          <pubDate>Mon, 11 May 2009 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2009/05/authlogic-and-openid-on-rails/</guid>
          <description>&lt;p&gt;So, I&amp;#8217;m working on a Rails App and I want to use OpenID (and only OpenID) for authentication.  I was going to use Restful_Authentication with the open_id_authentication extension, but then I saw Ryan Bates&amp;#8217; &lt;a href=&#34;http://www.railscasts.com&#34;&gt;Railscast&lt;/a&gt; on &lt;a href=&#34;http://github.com/binarylogic/authlogic/tree/master&#34;&gt;AuthLogic&lt;/a&gt;.  Authlogic has an &lt;a href=&#34;http://github.com/binarylogic/authlogic_openid/tree/master&#34;&gt;OpenID extention&lt;/a&gt; which looked perfect for my needs, and Authlogic seemed like a great gem for authentication.  My goal was simple: I wanted to support, and only support, authentication via OpenID.  None of this username/password/salt stuff.&lt;/p&gt;

&lt;p&gt;Now, I should warn you: I HAVE NO IDEA WHAT I AM DOING.  I&amp;#8217;m just getting started with Rails so I hit a few bumps getting this working.  I learned a lot along the way, so here&amp;#8217;s a quick rundown of my adventure with Authlogic and OpenID on Rails.&lt;/p&gt;

&lt;p&gt;First, getting started with sample code is always a good idea.  Authlogic has an &lt;a href=&#34;http://github.com/binarylogic/authlogic_example/tree/master&#34;&gt;example app&lt;/a&gt; on github where you can check out how to use the gem.  After pulling down the code, I was surprised I couldn&amp;#8217;t find anything relating to OpenID.  It turns out, the master repository doesn&amp;#8217;t have the OpenID example.  But there&amp;#8217;s a branch of the master example that does have the OpenID functionality.  Here&amp;#8217;s how to get it:&lt;/p&gt;

&lt;p&gt;First, clone the Authlogic example like so:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;git clone git://github.com/binarylogic/authlogic_example.git&lt;/pre&gt;

&lt;p&gt;Then, cd into the new Authlogic directory and get the OpenID fork like so:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;git checkout --track -b authlogic_with_openid origin/with-openid&lt;/pre&gt;

&lt;p&gt;Then, you can explore away.  My approach was simple: using the OpenID example as a guide, I&amp;#8217;d start a new app and add OpenID support from Authlogic.&lt;/p&gt;

&lt;p&gt;First, I need the required gems.  Authlogic and authlogic-oid are obvious, but I also need ruby-openid.  Authlogic-oid is built on the rails plugin open_id_authentication, which in turn is built on ruby-openid.&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;sudo gem install ruby-openid
sudo gem install authlogic
sudo gem install authlogic-oid
&lt;/pre&gt;

&lt;p&gt;You can also set these in your environment.rb file, like so:&lt;/p&gt;

&lt;pre class=&#34;brush: ruby; title: ; notranslate&#34; title=&#34;&#34;&gt;config.gem &#34;authlogic&#34;
config.gem &#34;authlogic-oid&#34;, :lib =&amp;gt; &#34;authlogic_openid&#34;
config.gem &#34;ruby-openid&#34;, :lib =&amp;gt; &#34;openid&#34;
&lt;/pre&gt;

&lt;p&gt;Note: I got thwarted when I tried running the app using the config.gem approach.  I kept getting an &amp;#8220;Uninitialized constant Authlogic&amp;#8221; in User_sessions.rb when I ran the app.  It sucked!  It took me a while to figure this out, but it was a horrible beginner mistake.  I was doing rake gems:install instead of sudo rake gems:install.  So when I ran my app, the proper gems weren&amp;#8217;t in the right place.  Ouch!&lt;/p&gt;

&lt;p&gt;Next, it&amp;#8217;s time to install the open_id_authentication plugin which is required by Authlogic-oid.  It&amp;#8217;s not available as a gem.&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;script/plugin install git://github.com/rails/open_id_authentication.git&lt;/pre&gt;

&lt;p&gt;The next step is to create the necessary migration scripts for the open_id_authentication plugin.&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;rake open_id_authentication:db:create&lt;/pre&gt;

&lt;p&gt;Another beginner mistake: I got a failure when I tried doing open_id_authentication:db:create before I installed the Authlogic gem.  Something about &amp;#8220;acts_as_authenticated&amp;#8221; wasn&amp;#8217;t there.  So the order of installation is important!&lt;/p&gt;

&lt;p&gt;Next, use the authlogic command to create the user_session model.  I&amp;#8217;m prettying much following instructions from the Authlogic github pages at this point:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;script/generate session user_session
script/generate model user
&lt;/pre&gt;

&lt;p&gt;Another beginner mistake: if you&amp;#8217;re making changes to your migration files without creating a new migration, make sure your schema is correct. I don&amp;#8217;t know the best way to do this except by using rake db:drop, rake db:create, and rake db:migrate.  This was due to an error I was seeing in my view: &amp;#8220;undefined method :openid_identifier&amp;#8221;.  I had a text_field in my form for the openid field, and I had the openid_identifier field in my model.  The problem? It wasn&amp;#8217;t in the database schema so Rails couldn&amp;#8217;t do its thing to make it a property of the user model and render the textfield correctly.&lt;/p&gt;

&lt;p&gt;From there, the views and controllers are pretty much the same as the example.  My user model is also pretty slim:&lt;/p&gt;

&lt;pre class=&#34;brush: ruby; title: ; notranslate&#34; title=&#34;&#34;&gt;class CreateUsers &amp;lt; ActiveRecord::Migration
def self.up
create_table :users do |t|
t.string :email, :null=&amp;gt;false
t.string :persistence_token, :null=&amp;gt; false
t.string :openid_identifier, :null=&amp;gt; false
t.datetime :last_request_at
t.timestamps
end
add_index :users, :openid_identifier
add_index :users, :persistence_token
end
def self.down
drop_table :users
end
end
&lt;/pre&gt;

&lt;p&gt;Now, when I put everything together to run the app, I got some weird failures.  When trying to login using my OpenID, I got a nasty error:&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;undefined local variable or method &#39;crypted_password_field&#39;&lt;/pre&gt;

&lt;p&gt;Not having a crypted_pasword field made sense seeing how I wasn&amp;#8217;t supporting login or password fields. But I wasn&amp;#8217;t expecting &lt;em&gt;not&lt;/em&gt; having it to be an issue.  In fact, from the docs the only required field on the user model is :persistance_token. So what&amp;#8217;s going on?&lt;/p&gt;

&lt;p&gt;Well, it turns out the Authlogic OpenID extension is designed to work with a login/password by default.  I had to dig through the stack trace and source code, but was able to figure out what&amp;#8217;s going on.  There&amp;#8217;s a method called &lt;span class=&#34;name&#34;&gt;attributes_to_save which is responsible for persisting form fields across the OpenID process.  By default, &lt;/span&gt;&lt;span class=&#34;name&#34;&gt;attributes_to_save includes password related information.  It treats the crypted password and password salt fields a little differently, which causes a problem when you don&amp;#8217;t have a :crypted_password attribute on your model.  The solution is simple: just override the method with one which doesn&amp;#8217;t include the password fields.  The user model will look like this:&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;name&#34;&gt;&lt;/p&gt;

&lt;pre class=&#34;brush: ruby; title: ; notranslate&#34; title=&#34;&#34;&gt;
class User &amp;lt; ActiveRecord::Base
acts_as_authentic do |c|
def attributes_to_save # :doc:
attrs_to_save = attributes.clone.delete_if do |k, v|
[ :persistence_token, :perishable_token, :single_access_token, :login_count,
:failed_login_count, :last_request_at, :current_login_at, :last_login_at, :current_login_ip, :last_login_ip, :created_at,
:updated_at, :lock_version].include?(k.to_sym)
end
end
end
end
&lt;/pre&gt;

&lt;p&gt;
  &lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  The second mistake was because I got ahead of myself.  In the example app there&amp;#8217;s code in the application.html.erb file rendering a login/register link or user info based on the current_user method in the application controller.  I was getting an error:
&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;unknown method &#39;logged_out?&#39;&lt;/pre&gt;

&lt;p&gt;
  &lt;span class=&#34;n&#34;&gt;which was occurring deep in the Authlogic codebase.  The problem was I didn&amp;#8217;t go a good job copying everything I needed from the example files!  The authlogic example project used the&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span class=&#34;n&#34;&gt;logout_on_timeout true&lt;/p&gt; 
  

&lt;p&gt;&lt;p&gt;
    &lt;/span&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;span class=&#34;n&#34;&gt;filter on the UserSession method.  After digging through the documentation, this callback relies on the &lt;/span&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;pre class=&amp;quot;brush: ruby; title: ; notranslate&amp;quot; title=&amp;quot;&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;t.datetime :last_request_at
&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;
  &amp;lt;/span&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
  &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;field on the user model, which I didn&amp;amp;#8217;t have at the time.  And not having this field was throwing everything off.  (The best part was the documentation clearly states you need that attribute on the model for the callback to work correctly.&amp;lt;br /&amp;gt; &amp;lt;/span&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
  &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;Lesson learned: always know what you&amp;amp;#8217;re doing. (Also: don&amp;amp;#8217;t be afraid of source code).&amp;lt;br /&amp;gt; &amp;lt;/span&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
  The whole process has really made me appreciate Authlogic.  It&amp;amp;#8217;s very extensible and extremely easy to customize.  If you know what you&amp;amp;#8217;re doing it&amp;amp;#8217;s pretty slick- the best way to figure it out is by reading the documentation and playing around with some code.
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
  Good luck!
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>How I Got Started Learning Ruby on Rails</title>
          <link>http://blog.michaelhamrah.com/2009/02/how-i-got-started-learning-ruby-on-rails/</link>
          <pubDate>Fri, 20 Feb 2009 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2009/02/how-i-got-started-learning-ruby-on-rails/</guid>
          <description>

&lt;p&gt;As I wrote recently in a previous post, &lt;a href=&#34;http://www.michaelhamrah.com/blog/index.php/2009/02/digging-into-ruby-on-rails-from-c-and-mvc-aspnet-mvc/&#34;&gt;I&amp;#8217;ve been playing around with Rails&lt;/a&gt;.   I wanted to touch on how I got up and running learning and digging into Rails.&lt;/p&gt;

&lt;h2 id=&#34;learning-ruby-on-rails:07a84db2bfd60e17f47a574617953835&#34;&gt;Learning Ruby on Rails&lt;/h2&gt;

&lt;h3 id=&#34;the-web:07a84db2bfd60e17f47a574617953835&#34;&gt;The Web:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://guides.rails.info/&#34;&gt;Ruby on Rails Guides&lt;/a&gt; is the best place to learn Rails.  People looking to get started should definitely start here.  The guides are broken down into various topics, and are extremely well written with good coverage.  You&amp;#8217;ll get exactly what you need, even if you&amp;#8217;re an experienced programmer.&lt;/p&gt;

&lt;h3 id=&#34;books:07a84db2bfd60e17f47a574617953835&#34;&gt;Books:&lt;/h3&gt;

&lt;p&gt;I bought &lt;a href=&#34;http://www.amazon.com/Simply-Rails-2-Patrick-Lenz/dp/0980455200/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1231523564&amp;amp;sr=1-1&#34;&gt;Simply Rails 2&lt;/a&gt; and almost immediately returned it.  It&amp;#8217;s geared towards someone who has no programming experience whatsover.  It has minimal depth, if any.  Don&amp;#8217;t buy this book.&lt;/p&gt;

&lt;p&gt;I then bought &lt;a href=&#34;http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321445619/ref=pd_bxgy_b_img_c&#34;&gt;The Rails Way&lt;/a&gt; which I did not return, and now use as a reference.  It&amp;#8217;s a pretty big book with a decent amount of whitespace.  However, I like this book because it&amp;#8217;s not a how-to book.  It&amp;#8217;s also not really for learning Rails, but by explaining what Rails does and why.  It has a good format- with snippets from contributors highlighting certain points (think of the comments in &lt;a href=&#34;http://www.amazon.com/Framework-Design-Guidelines-Conventions-Development/dp/0321545613/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1234999371&amp;amp;sr=1-1&#34;&gt;Framework Design Guidelines&lt;/a&gt;).  To be honest, you can get what you need from the Rails guides, but if you like books, get The Rails Way.&lt;/p&gt;

&lt;p&gt;I also found some PDF&amp;#8217;s of Rails Recipes and Advanced Rails Recipes which I found useful.  However, Rails changes pretty frequently, so a lot of books get outdated pretty quickly.  Rails Guides is simply your best bet.&lt;/p&gt;

&lt;h3 id=&#34;peepcode-and-railscasts:07a84db2bfd60e17f47a574617953835&#34;&gt;Peepcode and Railscasts:&lt;/h3&gt;

&lt;p&gt;I&amp;#8217;m usually not a fan of screencasts, but I bought a 5 pack from &lt;a href=&#34;http://peepcode.com/&#34;&gt;Peepcode&lt;/a&gt; and am glad I did.  I wish I bought the unlimited.  Peepcode offers very well done videos about various topics on Rails.  There are also some pdf e-books you can download.  So far I&amp;#8217;ve bought The [As I wrote recently in a previous post, &lt;a href=&#34;http://www.michaelhamrah.com/blog/index.php/2009/02/digging-into-ruby-on-rails-from-c-and-mvc-aspnet-mvc/&#34;&gt;I&amp;#8217;ve been playing around with Rails&lt;/a&gt;.   I wanted to touch on how I got up and running learning and digging into Rails.&lt;/p&gt;

&lt;h2 id=&#34;learning-ruby-on-rails-1:07a84db2bfd60e17f47a574617953835&#34;&gt;Learning Ruby on Rails&lt;/h2&gt;

&lt;h3 id=&#34;the-web-1:07a84db2bfd60e17f47a574617953835&#34;&gt;The Web:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://guides.rails.info/&#34;&gt;Ruby on Rails Guides&lt;/a&gt; is the best place to learn Rails.  People looking to get started should definitely start here.  The guides are broken down into various topics, and are extremely well written with good coverage.  You&amp;#8217;ll get exactly what you need, even if you&amp;#8217;re an experienced programmer.&lt;/p&gt;

&lt;h3 id=&#34;books-1:07a84db2bfd60e17f47a574617953835&#34;&gt;Books:&lt;/h3&gt;

&lt;p&gt;I bought &lt;a href=&#34;http://www.amazon.com/Simply-Rails-2-Patrick-Lenz/dp/0980455200/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1231523564&amp;amp;sr=1-1&#34;&gt;Simply Rails 2&lt;/a&gt; and almost immediately returned it.  It&amp;#8217;s geared towards someone who has no programming experience whatsover.  It has minimal depth, if any.  Don&amp;#8217;t buy this book.&lt;/p&gt;

&lt;p&gt;I then bought &lt;a href=&#34;http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321445619/ref=pd_bxgy_b_img_c&#34;&gt;The Rails Way&lt;/a&gt; which I did not return, and now use as a reference.  It&amp;#8217;s a pretty big book with a decent amount of whitespace.  However, I like this book because it&amp;#8217;s not a how-to book.  It&amp;#8217;s also not really for learning Rails, but by explaining what Rails does and why.  It has a good format- with snippets from contributors highlighting certain points (think of the comments in &lt;a href=&#34;http://www.amazon.com/Framework-Design-Guidelines-Conventions-Development/dp/0321545613/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1234999371&amp;amp;sr=1-1&#34;&gt;Framework Design Guidelines&lt;/a&gt;).  To be honest, you can get what you need from the Rails guides, but if you like books, get The Rails Way.&lt;/p&gt;

&lt;p&gt;I also found some PDF&amp;#8217;s of Rails Recipes and Advanced Rails Recipes which I found useful.  However, Rails changes pretty frequently, so a lot of books get outdated pretty quickly.  Rails Guides is simply your best bet.&lt;/p&gt;

&lt;h3 id=&#34;peepcode-and-railscasts-1:07a84db2bfd60e17f47a574617953835&#34;&gt;Peepcode and Railscasts:&lt;/h3&gt;

&lt;p&gt;I&amp;#8217;m usually not a fan of screencasts, but I bought a 5 pack from &lt;a href=&#34;http://peepcode.com/&#34;&gt;Peepcode&lt;/a&gt; and am glad I did.  I wish I bought the unlimited.  Peepcode offers very well done videos about various topics on Rails.  There are also some pdf e-books you can download.  So far I&amp;#8217;ve bought The]&lt;a href=&#34;https://peepcode.com/products/rails-2-pdf&#34;&gt;7&lt;/a&gt; e-book which is worth the $9, and the [As I wrote recently in a previous post, &lt;a href=&#34;http://www.michaelhamrah.com/blog/index.php/2009/02/digging-into-ruby-on-rails-from-c-and-mvc-aspnet-mvc/&#34;&gt;I&amp;#8217;ve been playing around with Rails&lt;/a&gt;.   I wanted to touch on how I got up and running learning and digging into Rails.&lt;/p&gt;

&lt;h2 id=&#34;learning-ruby-on-rails-2:07a84db2bfd60e17f47a574617953835&#34;&gt;Learning Ruby on Rails&lt;/h2&gt;

&lt;h3 id=&#34;the-web-2:07a84db2bfd60e17f47a574617953835&#34;&gt;The Web:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://guides.rails.info/&#34;&gt;Ruby on Rails Guides&lt;/a&gt; is the best place to learn Rails.  People looking to get started should definitely start here.  The guides are broken down into various topics, and are extremely well written with good coverage.  You&amp;#8217;ll get exactly what you need, even if you&amp;#8217;re an experienced programmer.&lt;/p&gt;

&lt;h3 id=&#34;books-2:07a84db2bfd60e17f47a574617953835&#34;&gt;Books:&lt;/h3&gt;

&lt;p&gt;I bought &lt;a href=&#34;http://www.amazon.com/Simply-Rails-2-Patrick-Lenz/dp/0980455200/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1231523564&amp;amp;sr=1-1&#34;&gt;Simply Rails 2&lt;/a&gt; and almost immediately returned it.  It&amp;#8217;s geared towards someone who has no programming experience whatsover.  It has minimal depth, if any.  Don&amp;#8217;t buy this book.&lt;/p&gt;

&lt;p&gt;I then bought &lt;a href=&#34;http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321445619/ref=pd_bxgy_b_img_c&#34;&gt;The Rails Way&lt;/a&gt; which I did not return, and now use as a reference.  It&amp;#8217;s a pretty big book with a decent amount of whitespace.  However, I like this book because it&amp;#8217;s not a how-to book.  It&amp;#8217;s also not really for learning Rails, but by explaining what Rails does and why.  It has a good format- with snippets from contributors highlighting certain points (think of the comments in &lt;a href=&#34;http://www.amazon.com/Framework-Design-Guidelines-Conventions-Development/dp/0321545613/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1234999371&amp;amp;sr=1-1&#34;&gt;Framework Design Guidelines&lt;/a&gt;).  To be honest, you can get what you need from the Rails guides, but if you like books, get The Rails Way.&lt;/p&gt;

&lt;p&gt;I also found some PDF&amp;#8217;s of Rails Recipes and Advanced Rails Recipes which I found useful.  However, Rails changes pretty frequently, so a lot of books get outdated pretty quickly.  Rails Guides is simply your best bet.&lt;/p&gt;

&lt;h3 id=&#34;peepcode-and-railscasts-2:07a84db2bfd60e17f47a574617953835&#34;&gt;Peepcode and Railscasts:&lt;/h3&gt;

&lt;p&gt;I&amp;#8217;m usually not a fan of screencasts, but I bought a 5 pack from &lt;a href=&#34;http://peepcode.com/&#34;&gt;Peepcode&lt;/a&gt; and am glad I did.  I wish I bought the unlimited.  Peepcode offers very well done videos about various topics on Rails.  There are also some pdf e-books you can download.  So far I&amp;#8217;ve bought The [As I wrote recently in a previous post, &lt;a href=&#34;http://www.michaelhamrah.com/blog/index.php/2009/02/digging-into-ruby-on-rails-from-c-and-mvc-aspnet-mvc/&#34;&gt;I&amp;#8217;ve been playing around with Rails&lt;/a&gt;.   I wanted to touch on how I got up and running learning and digging into Rails.&lt;/p&gt;

&lt;h2 id=&#34;learning-ruby-on-rails-3:07a84db2bfd60e17f47a574617953835&#34;&gt;Learning Ruby on Rails&lt;/h2&gt;

&lt;h3 id=&#34;the-web-3:07a84db2bfd60e17f47a574617953835&#34;&gt;The Web:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://guides.rails.info/&#34;&gt;Ruby on Rails Guides&lt;/a&gt; is the best place to learn Rails.  People looking to get started should definitely start here.  The guides are broken down into various topics, and are extremely well written with good coverage.  You&amp;#8217;ll get exactly what you need, even if you&amp;#8217;re an experienced programmer.&lt;/p&gt;

&lt;h3 id=&#34;books-3:07a84db2bfd60e17f47a574617953835&#34;&gt;Books:&lt;/h3&gt;

&lt;p&gt;I bought &lt;a href=&#34;http://www.amazon.com/Simply-Rails-2-Patrick-Lenz/dp/0980455200/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1231523564&amp;amp;sr=1-1&#34;&gt;Simply Rails 2&lt;/a&gt; and almost immediately returned it.  It&amp;#8217;s geared towards someone who has no programming experience whatsover.  It has minimal depth, if any.  Don&amp;#8217;t buy this book.&lt;/p&gt;

&lt;p&gt;I then bought &lt;a href=&#34;http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321445619/ref=pd_bxgy_b_img_c&#34;&gt;The Rails Way&lt;/a&gt; which I did not return, and now use as a reference.  It&amp;#8217;s a pretty big book with a decent amount of whitespace.  However, I like this book because it&amp;#8217;s not a how-to book.  It&amp;#8217;s also not really for learning Rails, but by explaining what Rails does and why.  It has a good format- with snippets from contributors highlighting certain points (think of the comments in &lt;a href=&#34;http://www.amazon.com/Framework-Design-Guidelines-Conventions-Development/dp/0321545613/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1234999371&amp;amp;sr=1-1&#34;&gt;Framework Design Guidelines&lt;/a&gt;).  To be honest, you can get what you need from the Rails guides, but if you like books, get The Rails Way.&lt;/p&gt;

&lt;p&gt;I also found some PDF&amp;#8217;s of Rails Recipes and Advanced Rails Recipes which I found useful.  However, Rails changes pretty frequently, so a lot of books get outdated pretty quickly.  Rails Guides is simply your best bet.&lt;/p&gt;

&lt;h3 id=&#34;peepcode-and-railscasts-3:07a84db2bfd60e17f47a574617953835&#34;&gt;Peepcode and Railscasts:&lt;/h3&gt;

&lt;p&gt;I&amp;#8217;m usually not a fan of screencasts, but I bought a 5 pack from &lt;a href=&#34;http://peepcode.com/&#34;&gt;Peepcode&lt;/a&gt; and am glad I did.  I wish I bought the unlimited.  Peepcode offers very well done videos about various topics on Rails.  There are also some pdf e-books you can download.  So far I&amp;#8217;ve bought The]&lt;a href=&#34;https://peepcode.com/products/rails-2-pdf&#34;&gt;7&lt;/a&gt; e-book which is worth the $9, and the]&lt;a href=&#34;https://peepcode.com/products/textmate-for-rails-2&#34;&gt;8&lt;/a&gt; video (I use a Mac).  I&amp;#8217;m very happy with them.  I&amp;#8217;ve also heard great things about the &lt;a href=&#34;https://peepcode.com/products/rest-for-rails-2&#34;&gt;Rest&lt;/a&gt; screencast (now in version 2, I&amp;#8217;ve seen version 1 and liked it).  I plan on getting the Git and RSpec videos as well.&lt;/p&gt;

&lt;p&gt;If you don&amp;#8217;t want to spend money, check out &lt;a href=&#34;http://railscasts.com/&#34;&gt;Railscasts&lt;/a&gt;.  These are done by the same people from peepcode and offer shorter videos on specific topics.  Well worth it.  (For those .NET people, think of &lt;a href=&#34;http://dimecasts.net/&#34;&gt;Dimecasts&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;the-hardware-software-setup:07a84db2bfd60e17f47a574617953835&#34;&gt;The Hardware/Software Setup&lt;/h3&gt;

&lt;p&gt;I use a MacBook Pro.  It&amp;#8217;s pretty easy to get setup with Rails on a Mac.  Google for the how-to.  For an editor, I use &lt;a href=&#34;http://www.macromates.com&#34;&gt;Textmate&lt;/a&gt; and love it. (Especially after watching the Peepcode screencast).  I played around with [As I wrote recently in a previous post, &lt;a href=&#34;http://www.michaelhamrah.com/blog/index.php/2009/02/digging-into-ruby-on-rails-from-c-and-mvc-aspnet-mvc/&#34;&gt;I&amp;#8217;ve been playing around with Rails&lt;/a&gt;.   I wanted to touch on how I got up and running learning and digging into Rails.&lt;/p&gt;

&lt;h2 id=&#34;learning-ruby-on-rails-4:07a84db2bfd60e17f47a574617953835&#34;&gt;Learning Ruby on Rails&lt;/h2&gt;

&lt;h3 id=&#34;the-web-4:07a84db2bfd60e17f47a574617953835&#34;&gt;The Web:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://guides.rails.info/&#34;&gt;Ruby on Rails Guides&lt;/a&gt; is the best place to learn Rails.  People looking to get started should definitely start here.  The guides are broken down into various topics, and are extremely well written with good coverage.  You&amp;#8217;ll get exactly what you need, even if you&amp;#8217;re an experienced programmer.&lt;/p&gt;

&lt;h3 id=&#34;books-4:07a84db2bfd60e17f47a574617953835&#34;&gt;Books:&lt;/h3&gt;

&lt;p&gt;I bought &lt;a href=&#34;http://www.amazon.com/Simply-Rails-2-Patrick-Lenz/dp/0980455200/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1231523564&amp;amp;sr=1-1&#34;&gt;Simply Rails 2&lt;/a&gt; and almost immediately returned it.  It&amp;#8217;s geared towards someone who has no programming experience whatsover.  It has minimal depth, if any.  Don&amp;#8217;t buy this book.&lt;/p&gt;

&lt;p&gt;I then bought &lt;a href=&#34;http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321445619/ref=pd_bxgy_b_img_c&#34;&gt;The Rails Way&lt;/a&gt; which I did not return, and now use as a reference.  It&amp;#8217;s a pretty big book with a decent amount of whitespace.  However, I like this book because it&amp;#8217;s not a how-to book.  It&amp;#8217;s also not really for learning Rails, but by explaining what Rails does and why.  It has a good format- with snippets from contributors highlighting certain points (think of the comments in &lt;a href=&#34;http://www.amazon.com/Framework-Design-Guidelines-Conventions-Development/dp/0321545613/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1234999371&amp;amp;sr=1-1&#34;&gt;Framework Design Guidelines&lt;/a&gt;).  To be honest, you can get what you need from the Rails guides, but if you like books, get The Rails Way.&lt;/p&gt;

&lt;p&gt;I also found some PDF&amp;#8217;s of Rails Recipes and Advanced Rails Recipes which I found useful.  However, Rails changes pretty frequently, so a lot of books get outdated pretty quickly.  Rails Guides is simply your best bet.&lt;/p&gt;

&lt;h3 id=&#34;peepcode-and-railscasts-4:07a84db2bfd60e17f47a574617953835&#34;&gt;Peepcode and Railscasts:&lt;/h3&gt;

&lt;p&gt;I&amp;#8217;m usually not a fan of screencasts, but I bought a 5 pack from &lt;a href=&#34;http://peepcode.com/&#34;&gt;Peepcode&lt;/a&gt; and am glad I did.  I wish I bought the unlimited.  Peepcode offers very well done videos about various topics on Rails.  There are also some pdf e-books you can download.  So far I&amp;#8217;ve bought The [As I wrote recently in a previous post, &lt;a href=&#34;http://www.michaelhamrah.com/blog/index.php/2009/02/digging-into-ruby-on-rails-from-c-and-mvc-aspnet-mvc/&#34;&gt;I&amp;#8217;ve been playing around with Rails&lt;/a&gt;.   I wanted to touch on how I got up and running learning and digging into Rails.&lt;/p&gt;

&lt;h2 id=&#34;learning-ruby-on-rails-5:07a84db2bfd60e17f47a574617953835&#34;&gt;Learning Ruby on Rails&lt;/h2&gt;

&lt;h3 id=&#34;the-web-5:07a84db2bfd60e17f47a574617953835&#34;&gt;The Web:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://guides.rails.info/&#34;&gt;Ruby on Rails Guides&lt;/a&gt; is the best place to learn Rails.  People looking to get started should definitely start here.  The guides are broken down into various topics, and are extremely well written with good coverage.  You&amp;#8217;ll get exactly what you need, even if you&amp;#8217;re an experienced programmer.&lt;/p&gt;

&lt;h3 id=&#34;books-5:07a84db2bfd60e17f47a574617953835&#34;&gt;Books:&lt;/h3&gt;

&lt;p&gt;I bought &lt;a href=&#34;http://www.amazon.com/Simply-Rails-2-Patrick-Lenz/dp/0980455200/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1231523564&amp;amp;sr=1-1&#34;&gt;Simply Rails 2&lt;/a&gt; and almost immediately returned it.  It&amp;#8217;s geared towards someone who has no programming experience whatsover.  It has minimal depth, if any.  Don&amp;#8217;t buy this book.&lt;/p&gt;

&lt;p&gt;I then bought &lt;a href=&#34;http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321445619/ref=pd_bxgy_b_img_c&#34;&gt;The Rails Way&lt;/a&gt; which I did not return, and now use as a reference.  It&amp;#8217;s a pretty big book with a decent amount of whitespace.  However, I like this book because it&amp;#8217;s not a how-to book.  It&amp;#8217;s also not really for learning Rails, but by explaining what Rails does and why.  It has a good format- with snippets from contributors highlighting certain points (think of the comments in &lt;a href=&#34;http://www.amazon.com/Framework-Design-Guidelines-Conventions-Development/dp/0321545613/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1234999371&amp;amp;sr=1-1&#34;&gt;Framework Design Guidelines&lt;/a&gt;).  To be honest, you can get what you need from the Rails guides, but if you like books, get The Rails Way.&lt;/p&gt;

&lt;p&gt;I also found some PDF&amp;#8217;s of Rails Recipes and Advanced Rails Recipes which I found useful.  However, Rails changes pretty frequently, so a lot of books get outdated pretty quickly.  Rails Guides is simply your best bet.&lt;/p&gt;

&lt;h3 id=&#34;peepcode-and-railscasts-5:07a84db2bfd60e17f47a574617953835&#34;&gt;Peepcode and Railscasts:&lt;/h3&gt;

&lt;p&gt;I&amp;#8217;m usually not a fan of screencasts, but I bought a 5 pack from &lt;a href=&#34;http://peepcode.com/&#34;&gt;Peepcode&lt;/a&gt; and am glad I did.  I wish I bought the unlimited.  Peepcode offers very well done videos about various topics on Rails.  There are also some pdf e-books you can download.  So far I&amp;#8217;ve bought The]&lt;a href=&#34;https://peepcode.com/products/rails-2-pdf&#34;&gt;7&lt;/a&gt; e-book which is worth the $9, and the [As I wrote recently in a previous post, &lt;a href=&#34;http://www.michaelhamrah.com/blog/index.php/2009/02/digging-into-ruby-on-rails-from-c-and-mvc-aspnet-mvc/&#34;&gt;I&amp;#8217;ve been playing around with Rails&lt;/a&gt;.   I wanted to touch on how I got up and running learning and digging into Rails.&lt;/p&gt;

&lt;h2 id=&#34;learning-ruby-on-rails-6:07a84db2bfd60e17f47a574617953835&#34;&gt;Learning Ruby on Rails&lt;/h2&gt;

&lt;h3 id=&#34;the-web-6:07a84db2bfd60e17f47a574617953835&#34;&gt;The Web:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://guides.rails.info/&#34;&gt;Ruby on Rails Guides&lt;/a&gt; is the best place to learn Rails.  People looking to get started should definitely start here.  The guides are broken down into various topics, and are extremely well written with good coverage.  You&amp;#8217;ll get exactly what you need, even if you&amp;#8217;re an experienced programmer.&lt;/p&gt;

&lt;h3 id=&#34;books-6:07a84db2bfd60e17f47a574617953835&#34;&gt;Books:&lt;/h3&gt;

&lt;p&gt;I bought &lt;a href=&#34;http://www.amazon.com/Simply-Rails-2-Patrick-Lenz/dp/0980455200/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1231523564&amp;amp;sr=1-1&#34;&gt;Simply Rails 2&lt;/a&gt; and almost immediately returned it.  It&amp;#8217;s geared towards someone who has no programming experience whatsover.  It has minimal depth, if any.  Don&amp;#8217;t buy this book.&lt;/p&gt;

&lt;p&gt;I then bought &lt;a href=&#34;http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321445619/ref=pd_bxgy_b_img_c&#34;&gt;The Rails Way&lt;/a&gt; which I did not return, and now use as a reference.  It&amp;#8217;s a pretty big book with a decent amount of whitespace.  However, I like this book because it&amp;#8217;s not a how-to book.  It&amp;#8217;s also not really for learning Rails, but by explaining what Rails does and why.  It has a good format- with snippets from contributors highlighting certain points (think of the comments in &lt;a href=&#34;http://www.amazon.com/Framework-Design-Guidelines-Conventions-Development/dp/0321545613/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1234999371&amp;amp;sr=1-1&#34;&gt;Framework Design Guidelines&lt;/a&gt;).  To be honest, you can get what you need from the Rails guides, but if you like books, get The Rails Way.&lt;/p&gt;

&lt;p&gt;I also found some PDF&amp;#8217;s of Rails Recipes and Advanced Rails Recipes which I found useful.  However, Rails changes pretty frequently, so a lot of books get outdated pretty quickly.  Rails Guides is simply your best bet.&lt;/p&gt;

&lt;h3 id=&#34;peepcode-and-railscasts-6:07a84db2bfd60e17f47a574617953835&#34;&gt;Peepcode and Railscasts:&lt;/h3&gt;

&lt;p&gt;I&amp;#8217;m usually not a fan of screencasts, but I bought a 5 pack from &lt;a href=&#34;http://peepcode.com/&#34;&gt;Peepcode&lt;/a&gt; and am glad I did.  I wish I bought the unlimited.  Peepcode offers very well done videos about various topics on Rails.  There are also some pdf e-books you can download.  So far I&amp;#8217;ve bought The [As I wrote recently in a previous post, &lt;a href=&#34;http://www.michaelhamrah.com/blog/index.php/2009/02/digging-into-ruby-on-rails-from-c-and-mvc-aspnet-mvc/&#34;&gt;I&amp;#8217;ve been playing around with Rails&lt;/a&gt;.   I wanted to touch on how I got up and running learning and digging into Rails.&lt;/p&gt;

&lt;h2 id=&#34;learning-ruby-on-rails-7:07a84db2bfd60e17f47a574617953835&#34;&gt;Learning Ruby on Rails&lt;/h2&gt;

&lt;h3 id=&#34;the-web-7:07a84db2bfd60e17f47a574617953835&#34;&gt;The Web:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://guides.rails.info/&#34;&gt;Ruby on Rails Guides&lt;/a&gt; is the best place to learn Rails.  People looking to get started should definitely start here.  The guides are broken down into various topics, and are extremely well written with good coverage.  You&amp;#8217;ll get exactly what you need, even if you&amp;#8217;re an experienced programmer.&lt;/p&gt;

&lt;h3 id=&#34;books-7:07a84db2bfd60e17f47a574617953835&#34;&gt;Books:&lt;/h3&gt;

&lt;p&gt;I bought &lt;a href=&#34;http://www.amazon.com/Simply-Rails-2-Patrick-Lenz/dp/0980455200/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1231523564&amp;amp;sr=1-1&#34;&gt;Simply Rails 2&lt;/a&gt; and almost immediately returned it.  It&amp;#8217;s geared towards someone who has no programming experience whatsover.  It has minimal depth, if any.  Don&amp;#8217;t buy this book.&lt;/p&gt;

&lt;p&gt;I then bought &lt;a href=&#34;http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321445619/ref=pd_bxgy_b_img_c&#34;&gt;The Rails Way&lt;/a&gt; which I did not return, and now use as a reference.  It&amp;#8217;s a pretty big book with a decent amount of whitespace.  However, I like this book because it&amp;#8217;s not a how-to book.  It&amp;#8217;s also not really for learning Rails, but by explaining what Rails does and why.  It has a good format- with snippets from contributors highlighting certain points (think of the comments in &lt;a href=&#34;http://www.amazon.com/Framework-Design-Guidelines-Conventions-Development/dp/0321545613/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1234999371&amp;amp;sr=1-1&#34;&gt;Framework Design Guidelines&lt;/a&gt;).  To be honest, you can get what you need from the Rails guides, but if you like books, get The Rails Way.&lt;/p&gt;

&lt;p&gt;I also found some PDF&amp;#8217;s of Rails Recipes and Advanced Rails Recipes which I found useful.  However, Rails changes pretty frequently, so a lot of books get outdated pretty quickly.  Rails Guides is simply your best bet.&lt;/p&gt;

&lt;h3 id=&#34;peepcode-and-railscasts-7:07a84db2bfd60e17f47a574617953835&#34;&gt;Peepcode and Railscasts:&lt;/h3&gt;

&lt;p&gt;I&amp;#8217;m usually not a fan of screencasts, but I bought a 5 pack from &lt;a href=&#34;http://peepcode.com/&#34;&gt;Peepcode&lt;/a&gt; and am glad I did.  I wish I bought the unlimited.  Peepcode offers very well done videos about various topics on Rails.  There are also some pdf e-books you can download.  So far I&amp;#8217;ve bought The]&lt;a href=&#34;https://peepcode.com/products/rails-2-pdf&#34;&gt;7&lt;/a&gt; e-book which is worth the $9, and the]&lt;a href=&#34;https://peepcode.com/products/textmate-for-rails-2&#34;&gt;8&lt;/a&gt; video (I use a Mac).  I&amp;#8217;m very happy with them.  I&amp;#8217;ve also heard great things about the &lt;a href=&#34;https://peepcode.com/products/rest-for-rails-2&#34;&gt;Rest&lt;/a&gt; screencast (now in version 2, I&amp;#8217;ve seen version 1 and liked it).  I plan on getting the Git and RSpec videos as well.&lt;/p&gt;

&lt;p&gt;If you don&amp;#8217;t want to spend money, check out &lt;a href=&#34;http://railscasts.com/&#34;&gt;Railscasts&lt;/a&gt;.  These are done by the same people from peepcode and offer shorter videos on specific topics.  Well worth it.  (For those .NET people, think of &lt;a href=&#34;http://dimecasts.net/&#34;&gt;Dimecasts&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;the-hardware-software-setup-1:07a84db2bfd60e17f47a574617953835&#34;&gt;The Hardware/Software Setup&lt;/h3&gt;

&lt;p&gt;I use a MacBook Pro.  It&amp;#8217;s pretty easy to get setup with Rails on a Mac.  Google for the how-to.  For an editor, I use &lt;a href=&#34;http://www.macromates.com&#34;&gt;Textmate&lt;/a&gt; and love it. (Especially after watching the Peepcode screencast).  I played around with]&lt;a href=&#34;http://www.aptana.com&#34;&gt;13&lt;/a&gt; and &lt;a href=&#34;http://www.netbeans.com&#34;&gt;NetBeans&lt;/a&gt;, but stopped using them both.  It&amp;#8217;s not worth it if you&amp;#8217;re just starting out- these two programs are good IDE&amp;#8217;s, but they wrap a lot of functionality that I&amp;#8217;m finding is just easier to do on the command line.  Get comfortable with the simple first and add what you feel you&amp;#8217;re missing.  On Windows, I&amp;#8217;ve played around with &lt;a href=&#34;http://www.e-texteditor.com/&#34;&gt;e Text Editor&lt;/a&gt; and found it pretty nice.&lt;/p&gt;

&lt;p&gt;IDE&amp;#8217;s are very important.  As a .NET developer, I love Visual Studio.  It&amp;#8217;s awesome- I love the intellisense, resharper, the immediate window, debugging, tfs integration, I&amp;#8217;m spoiled.  You can pry code completion from my cold, dead hands.  I wanted that in Rails IDE.  But don&amp;#8217;t try finding Visual Studio for Rails- Rails doesn&amp;#8217;t need Visual Studio, and it will just get in the way.  Everything you need to do can be done in a simple text editor and the terminal window.  When you feel like you&amp;#8217;re lacking something, there&amp;#8217;s an easy way to do it.  Different is okay.&lt;/p&gt;

&lt;h3 id=&#34;other-stuff:07a84db2bfd60e17f47a574617953835&#34;&gt;Other Stuff&lt;/h3&gt;

&lt;p&gt;This is random:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://tryruby.hobix.com/&#34;&gt;Ruby in 15 minutes&lt;/a&gt; is a great site for learning Ruby.&lt;/li&gt;
&lt;li&gt;Learn and understand &lt;a href=&#34;http://github.com&#34;&gt;Git&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You seriously haven&amp;#8217;t checked out [As I wrote recently in a previous post, &lt;a href=&#34;http://www.michaelhamrah.com/blog/index.php/2009/02/digging-into-ruby-on-rails-from-c-and-mvc-aspnet-mvc/&#34;&gt;I&amp;#8217;ve been playing around with Rails&lt;/a&gt;.   I wanted to touch on how I got up and running learning and digging into Rails.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;learning-ruby-on-rails-8:07a84db2bfd60e17f47a574617953835&#34;&gt;Learning Ruby on Rails&lt;/h2&gt;

&lt;h3 id=&#34;the-web-8:07a84db2bfd60e17f47a574617953835&#34;&gt;The Web:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://guides.rails.info/&#34;&gt;Ruby on Rails Guides&lt;/a&gt; is the best place to learn Rails.  People looking to get started should definitely start here.  The guides are broken down into various topics, and are extremely well written with good coverage.  You&amp;#8217;ll get exactly what you need, even if you&amp;#8217;re an experienced programmer.&lt;/p&gt;

&lt;h3 id=&#34;books-8:07a84db2bfd60e17f47a574617953835&#34;&gt;Books:&lt;/h3&gt;

&lt;p&gt;I bought &lt;a href=&#34;http://www.amazon.com/Simply-Rails-2-Patrick-Lenz/dp/0980455200/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1231523564&amp;amp;sr=1-1&#34;&gt;Simply Rails 2&lt;/a&gt; and almost immediately returned it.  It&amp;#8217;s geared towards someone who has no programming experience whatsover.  It has minimal depth, if any.  Don&amp;#8217;t buy this book.&lt;/p&gt;

&lt;p&gt;I then bought &lt;a href=&#34;http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321445619/ref=pd_bxgy_b_img_c&#34;&gt;The Rails Way&lt;/a&gt; which I did not return, and now use as a reference.  It&amp;#8217;s a pretty big book with a decent amount of whitespace.  However, I like this book because it&amp;#8217;s not a how-to book.  It&amp;#8217;s also not really for learning Rails, but by explaining what Rails does and why.  It has a good format- with snippets from contributors highlighting certain points (think of the comments in &lt;a href=&#34;http://www.amazon.com/Framework-Design-Guidelines-Conventions-Development/dp/0321545613/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1234999371&amp;amp;sr=1-1&#34;&gt;Framework Design Guidelines&lt;/a&gt;).  To be honest, you can get what you need from the Rails guides, but if you like books, get The Rails Way.&lt;/p&gt;

&lt;p&gt;I also found some PDF&amp;#8217;s of Rails Recipes and Advanced Rails Recipes which I found useful.  However, Rails changes pretty frequently, so a lot of books get outdated pretty quickly.  Rails Guides is simply your best bet.&lt;/p&gt;

&lt;h3 id=&#34;peepcode-and-railscasts-8:07a84db2bfd60e17f47a574617953835&#34;&gt;Peepcode and Railscasts:&lt;/h3&gt;

&lt;p&gt;I&amp;#8217;m usually not a fan of screencasts, but I bought a 5 pack from &lt;a href=&#34;http://peepcode.com/&#34;&gt;Peepcode&lt;/a&gt; and am glad I did.  I wish I bought the unlimited.  Peepcode offers very well done videos about various topics on Rails.  There are also some pdf e-books you can download.  So far I&amp;#8217;ve bought The [As I wrote recently in a previous post, &lt;a href=&#34;http://www.michaelhamrah.com/blog/index.php/2009/02/digging-into-ruby-on-rails-from-c-and-mvc-aspnet-mvc/&#34;&gt;I&amp;#8217;ve been playing around with Rails&lt;/a&gt;.   I wanted to touch on how I got up and running learning and digging into Rails.&lt;/p&gt;

&lt;h2 id=&#34;learning-ruby-on-rails-9:07a84db2bfd60e17f47a574617953835&#34;&gt;Learning Ruby on Rails&lt;/h2&gt;

&lt;h3 id=&#34;the-web-9:07a84db2bfd60e17f47a574617953835&#34;&gt;The Web:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://guides.rails.info/&#34;&gt;Ruby on Rails Guides&lt;/a&gt; is the best place to learn Rails.  People looking to get started should definitely start here.  The guides are broken down into various topics, and are extremely well written with good coverage.  You&amp;#8217;ll get exactly what you need, even if you&amp;#8217;re an experienced programmer.&lt;/p&gt;

&lt;h3 id=&#34;books-9:07a84db2bfd60e17f47a574617953835&#34;&gt;Books:&lt;/h3&gt;

&lt;p&gt;I bought &lt;a href=&#34;http://www.amazon.com/Simply-Rails-2-Patrick-Lenz/dp/0980455200/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1231523564&amp;amp;sr=1-1&#34;&gt;Simply Rails 2&lt;/a&gt; and almost immediately returned it.  It&amp;#8217;s geared towards someone who has no programming experience whatsover.  It has minimal depth, if any.  Don&amp;#8217;t buy this book.&lt;/p&gt;

&lt;p&gt;I then bought &lt;a href=&#34;http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321445619/ref=pd_bxgy_b_img_c&#34;&gt;The Rails Way&lt;/a&gt; which I did not return, and now use as a reference.  It&amp;#8217;s a pretty big book with a decent amount of whitespace.  However, I like this book because it&amp;#8217;s not a how-to book.  It&amp;#8217;s also not really for learning Rails, but by explaining what Rails does and why.  It has a good format- with snippets from contributors highlighting certain points (think of the comments in &lt;a href=&#34;http://www.amazon.com/Framework-Design-Guidelines-Conventions-Development/dp/0321545613/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1234999371&amp;amp;sr=1-1&#34;&gt;Framework Design Guidelines&lt;/a&gt;).  To be honest, you can get what you need from the Rails guides, but if you like books, get The Rails Way.&lt;/p&gt;

&lt;p&gt;I also found some PDF&amp;#8217;s of Rails Recipes and Advanced Rails Recipes which I found useful.  However, Rails changes pretty frequently, so a lot of books get outdated pretty quickly.  Rails Guides is simply your best bet.&lt;/p&gt;

&lt;h3 id=&#34;peepcode-and-railscasts-9:07a84db2bfd60e17f47a574617953835&#34;&gt;Peepcode and Railscasts:&lt;/h3&gt;

&lt;p&gt;I&amp;#8217;m usually not a fan of screencasts, but I bought a 5 pack from &lt;a href=&#34;http://peepcode.com/&#34;&gt;Peepcode&lt;/a&gt; and am glad I did.  I wish I bought the unlimited.  Peepcode offers very well done videos about various topics on Rails.  There are also some pdf e-books you can download.  So far I&amp;#8217;ve bought The]&lt;a href=&#34;https://peepcode.com/products/rails-2-pdf&#34;&gt;7&lt;/a&gt; e-book which is worth the $9, and the [As I wrote recently in a previous post, &lt;a href=&#34;http://www.michaelhamrah.com/blog/index.php/2009/02/digging-into-ruby-on-rails-from-c-and-mvc-aspnet-mvc/&#34;&gt;I&amp;#8217;ve been playing around with Rails&lt;/a&gt;.   I wanted to touch on how I got up and running learning and digging into Rails.&lt;/p&gt;

&lt;h2 id=&#34;learning-ruby-on-rails-10:07a84db2bfd60e17f47a574617953835&#34;&gt;Learning Ruby on Rails&lt;/h2&gt;

&lt;h3 id=&#34;the-web-10:07a84db2bfd60e17f47a574617953835&#34;&gt;The Web:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://guides.rails.info/&#34;&gt;Ruby on Rails Guides&lt;/a&gt; is the best place to learn Rails.  People looking to get started should definitely start here.  The guides are broken down into various topics, and are extremely well written with good coverage.  You&amp;#8217;ll get exactly what you need, even if you&amp;#8217;re an experienced programmer.&lt;/p&gt;

&lt;h3 id=&#34;books-10:07a84db2bfd60e17f47a574617953835&#34;&gt;Books:&lt;/h3&gt;

&lt;p&gt;I bought &lt;a href=&#34;http://www.amazon.com/Simply-Rails-2-Patrick-Lenz/dp/0980455200/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1231523564&amp;amp;sr=1-1&#34;&gt;Simply Rails 2&lt;/a&gt; and almost immediately returned it.  It&amp;#8217;s geared towards someone who has no programming experience whatsover.  It has minimal depth, if any.  Don&amp;#8217;t buy this book.&lt;/p&gt;

&lt;p&gt;I then bought &lt;a href=&#34;http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321445619/ref=pd_bxgy_b_img_c&#34;&gt;The Rails Way&lt;/a&gt; which I did not return, and now use as a reference.  It&amp;#8217;s a pretty big book with a decent amount of whitespace.  However, I like this book because it&amp;#8217;s not a how-to book.  It&amp;#8217;s also not really for learning Rails, but by explaining what Rails does and why.  It has a good format- with snippets from contributors highlighting certain points (think of the comments in &lt;a href=&#34;http://www.amazon.com/Framework-Design-Guidelines-Conventions-Development/dp/0321545613/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1234999371&amp;amp;sr=1-1&#34;&gt;Framework Design Guidelines&lt;/a&gt;).  To be honest, you can get what you need from the Rails guides, but if you like books, get The Rails Way.&lt;/p&gt;

&lt;p&gt;I also found some PDF&amp;#8217;s of Rails Recipes and Advanced Rails Recipes which I found useful.  However, Rails changes pretty frequently, so a lot of books get outdated pretty quickly.  Rails Guides is simply your best bet.&lt;/p&gt;

&lt;h3 id=&#34;peepcode-and-railscasts-10:07a84db2bfd60e17f47a574617953835&#34;&gt;Peepcode and Railscasts:&lt;/h3&gt;

&lt;p&gt;I&amp;#8217;m usually not a fan of screencasts, but I bought a 5 pack from &lt;a href=&#34;http://peepcode.com/&#34;&gt;Peepcode&lt;/a&gt; and am glad I did.  I wish I bought the unlimited.  Peepcode offers very well done videos about various topics on Rails.  There are also some pdf e-books you can download.  So far I&amp;#8217;ve bought The [As I wrote recently in a previous post, &lt;a href=&#34;http://www.michaelhamrah.com/blog/index.php/2009/02/digging-into-ruby-on-rails-from-c-and-mvc-aspnet-mvc/&#34;&gt;I&amp;#8217;ve been playing around with Rails&lt;/a&gt;.   I wanted to touch on how I got up and running learning and digging into Rails.&lt;/p&gt;

&lt;h2 id=&#34;learning-ruby-on-rails-11:07a84db2bfd60e17f47a574617953835&#34;&gt;Learning Ruby on Rails&lt;/h2&gt;

&lt;h3 id=&#34;the-web-11:07a84db2bfd60e17f47a574617953835&#34;&gt;The Web:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://guides.rails.info/&#34;&gt;Ruby on Rails Guides&lt;/a&gt; is the best place to learn Rails.  People looking to get started should definitely start here.  The guides are broken down into various topics, and are extremely well written with good coverage.  You&amp;#8217;ll get exactly what you need, even if you&amp;#8217;re an experienced programmer.&lt;/p&gt;

&lt;h3 id=&#34;books-11:07a84db2bfd60e17f47a574617953835&#34;&gt;Books:&lt;/h3&gt;

&lt;p&gt;I bought &lt;a href=&#34;http://www.amazon.com/Simply-Rails-2-Patrick-Lenz/dp/0980455200/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1231523564&amp;amp;sr=1-1&#34;&gt;Simply Rails 2&lt;/a&gt; and almost immediately returned it.  It&amp;#8217;s geared towards someone who has no programming experience whatsover.  It has minimal depth, if any.  Don&amp;#8217;t buy this book.&lt;/p&gt;

&lt;p&gt;I then bought &lt;a href=&#34;http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321445619/ref=pd_bxgy_b_img_c&#34;&gt;The Rails Way&lt;/a&gt; which I did not return, and now use as a reference.  It&amp;#8217;s a pretty big book with a decent amount of whitespace.  However, I like this book because it&amp;#8217;s not a how-to book.  It&amp;#8217;s also not really for learning Rails, but by explaining what Rails does and why.  It has a good format- with snippets from contributors highlighting certain points (think of the comments in &lt;a href=&#34;http://www.amazon.com/Framework-Design-Guidelines-Conventions-Development/dp/0321545613/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1234999371&amp;amp;sr=1-1&#34;&gt;Framework Design Guidelines&lt;/a&gt;).  To be honest, you can get what you need from the Rails guides, but if you like books, get The Rails Way.&lt;/p&gt;

&lt;p&gt;I also found some PDF&amp;#8217;s of Rails Recipes and Advanced Rails Recipes which I found useful.  However, Rails changes pretty frequently, so a lot of books get outdated pretty quickly.  Rails Guides is simply your best bet.&lt;/p&gt;

&lt;h3 id=&#34;peepcode-and-railscasts-11:07a84db2bfd60e17f47a574617953835&#34;&gt;Peepcode and Railscasts:&lt;/h3&gt;

&lt;p&gt;I&amp;#8217;m usually not a fan of screencasts, but I bought a 5 pack from &lt;a href=&#34;http://peepcode.com/&#34;&gt;Peepcode&lt;/a&gt; and am glad I did.  I wish I bought the unlimited.  Peepcode offers very well done videos about various topics on Rails.  There are also some pdf e-books you can download.  So far I&amp;#8217;ve bought The]&lt;a href=&#34;https://peepcode.com/products/rails-2-pdf&#34;&gt;7&lt;/a&gt; e-book which is worth the $9, and the]&lt;a href=&#34;https://peepcode.com/products/textmate-for-rails-2&#34;&gt;8&lt;/a&gt; video (I use a Mac).  I&amp;#8217;m very happy with them.  I&amp;#8217;ve also heard great things about the &lt;a href=&#34;https://peepcode.com/products/rest-for-rails-2&#34;&gt;Rest&lt;/a&gt; screencast (now in version 2, I&amp;#8217;ve seen version 1 and liked it).  I plan on getting the Git and RSpec videos as well.&lt;/p&gt;

&lt;p&gt;If you don&amp;#8217;t want to spend money, check out &lt;a href=&#34;http://railscasts.com/&#34;&gt;Railscasts&lt;/a&gt;.  These are done by the same people from peepcode and offer shorter videos on specific topics.  Well worth it.  (For those .NET people, think of &lt;a href=&#34;http://dimecasts.net/&#34;&gt;Dimecasts&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;the-hardware-software-setup-2:07a84db2bfd60e17f47a574617953835&#34;&gt;The Hardware/Software Setup&lt;/h3&gt;

&lt;p&gt;I use a MacBook Pro.  It&amp;#8217;s pretty easy to get setup with Rails on a Mac.  Google for the how-to.  For an editor, I use &lt;a href=&#34;http://www.macromates.com&#34;&gt;Textmate&lt;/a&gt; and love it. (Especially after watching the Peepcode screencast).  I played around with [As I wrote recently in a previous post, &lt;a href=&#34;http://www.michaelhamrah.com/blog/index.php/2009/02/digging-into-ruby-on-rails-from-c-and-mvc-aspnet-mvc/&#34;&gt;I&amp;#8217;ve been playing around with Rails&lt;/a&gt;.   I wanted to touch on how I got up and running learning and digging into Rails.&lt;/p&gt;

&lt;h2 id=&#34;learning-ruby-on-rails-12:07a84db2bfd60e17f47a574617953835&#34;&gt;Learning Ruby on Rails&lt;/h2&gt;

&lt;h3 id=&#34;the-web-12:07a84db2bfd60e17f47a574617953835&#34;&gt;The Web:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://guides.rails.info/&#34;&gt;Ruby on Rails Guides&lt;/a&gt; is the best place to learn Rails.  People looking to get started should definitely start here.  The guides are broken down into various topics, and are extremely well written with good coverage.  You&amp;#8217;ll get exactly what you need, even if you&amp;#8217;re an experienced programmer.&lt;/p&gt;

&lt;h3 id=&#34;books-12:07a84db2bfd60e17f47a574617953835&#34;&gt;Books:&lt;/h3&gt;

&lt;p&gt;I bought &lt;a href=&#34;http://www.amazon.com/Simply-Rails-2-Patrick-Lenz/dp/0980455200/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1231523564&amp;amp;sr=1-1&#34;&gt;Simply Rails 2&lt;/a&gt; and almost immediately returned it.  It&amp;#8217;s geared towards someone who has no programming experience whatsover.  It has minimal depth, if any.  Don&amp;#8217;t buy this book.&lt;/p&gt;

&lt;p&gt;I then bought &lt;a href=&#34;http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321445619/ref=pd_bxgy_b_img_c&#34;&gt;The Rails Way&lt;/a&gt; which I did not return, and now use as a reference.  It&amp;#8217;s a pretty big book with a decent amount of whitespace.  However, I like this book because it&amp;#8217;s not a how-to book.  It&amp;#8217;s also not really for learning Rails, but by explaining what Rails does and why.  It has a good format- with snippets from contributors highlighting certain points (think of the comments in &lt;a href=&#34;http://www.amazon.com/Framework-Design-Guidelines-Conventions-Development/dp/0321545613/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1234999371&amp;amp;sr=1-1&#34;&gt;Framework Design Guidelines&lt;/a&gt;).  To be honest, you can get what you need from the Rails guides, but if you like books, get The Rails Way.&lt;/p&gt;

&lt;p&gt;I also found some PDF&amp;#8217;s of Rails Recipes and Advanced Rails Recipes which I found useful.  However, Rails changes pretty frequently, so a lot of books get outdated pretty quickly.  Rails Guides is simply your best bet.&lt;/p&gt;

&lt;h3 id=&#34;peepcode-and-railscasts-12:07a84db2bfd60e17f47a574617953835&#34;&gt;Peepcode and Railscasts:&lt;/h3&gt;

&lt;p&gt;I&amp;#8217;m usually not a fan of screencasts, but I bought a 5 pack from &lt;a href=&#34;http://peepcode.com/&#34;&gt;Peepcode&lt;/a&gt; and am glad I did.  I wish I bought the unlimited.  Peepcode offers very well done videos about various topics on Rails.  There are also some pdf e-books you can download.  So far I&amp;#8217;ve bought The [As I wrote recently in a previous post, &lt;a href=&#34;http://www.michaelhamrah.com/blog/index.php/2009/02/digging-into-ruby-on-rails-from-c-and-mvc-aspnet-mvc/&#34;&gt;I&amp;#8217;ve been playing around with Rails&lt;/a&gt;.   I wanted to touch on how I got up and running learning and digging into Rails.&lt;/p&gt;

&lt;h2 id=&#34;learning-ruby-on-rails-13:07a84db2bfd60e17f47a574617953835&#34;&gt;Learning Ruby on Rails&lt;/h2&gt;

&lt;h3 id=&#34;the-web-13:07a84db2bfd60e17f47a574617953835&#34;&gt;The Web:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://guides.rails.info/&#34;&gt;Ruby on Rails Guides&lt;/a&gt; is the best place to learn Rails.  People looking to get started should definitely start here.  The guides are broken down into various topics, and are extremely well written with good coverage.  You&amp;#8217;ll get exactly what you need, even if you&amp;#8217;re an experienced programmer.&lt;/p&gt;

&lt;h3 id=&#34;books-13:07a84db2bfd60e17f47a574617953835&#34;&gt;Books:&lt;/h3&gt;

&lt;p&gt;I bought &lt;a href=&#34;http://www.amazon.com/Simply-Rails-2-Patrick-Lenz/dp/0980455200/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1231523564&amp;amp;sr=1-1&#34;&gt;Simply Rails 2&lt;/a&gt; and almost immediately returned it.  It&amp;#8217;s geared towards someone who has no programming experience whatsover.  It has minimal depth, if any.  Don&amp;#8217;t buy this book.&lt;/p&gt;

&lt;p&gt;I then bought &lt;a href=&#34;http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321445619/ref=pd_bxgy_b_img_c&#34;&gt;The Rails Way&lt;/a&gt; which I did not return, and now use as a reference.  It&amp;#8217;s a pretty big book with a decent amount of whitespace.  However, I like this book because it&amp;#8217;s not a how-to book.  It&amp;#8217;s also not really for learning Rails, but by explaining what Rails does and why.  It has a good format- with snippets from contributors highlighting certain points (think of the comments in &lt;a href=&#34;http://www.amazon.com/Framework-Design-Guidelines-Conventions-Development/dp/0321545613/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1234999371&amp;amp;sr=1-1&#34;&gt;Framework Design Guidelines&lt;/a&gt;).  To be honest, you can get what you need from the Rails guides, but if you like books, get The Rails Way.&lt;/p&gt;

&lt;p&gt;I also found some PDF&amp;#8217;s of Rails Recipes and Advanced Rails Recipes which I found useful.  However, Rails changes pretty frequently, so a lot of books get outdated pretty quickly.  Rails Guides is simply your best bet.&lt;/p&gt;

&lt;h3 id=&#34;peepcode-and-railscasts-13:07a84db2bfd60e17f47a574617953835&#34;&gt;Peepcode and Railscasts:&lt;/h3&gt;

&lt;p&gt;I&amp;#8217;m usually not a fan of screencasts, but I bought a 5 pack from &lt;a href=&#34;http://peepcode.com/&#34;&gt;Peepcode&lt;/a&gt; and am glad I did.  I wish I bought the unlimited.  Peepcode offers very well done videos about various topics on Rails.  There are also some pdf e-books you can download.  So far I&amp;#8217;ve bought The]&lt;a href=&#34;https://peepcode.com/products/rails-2-pdf&#34;&gt;7&lt;/a&gt; e-book which is worth the $9, and the [As I wrote recently in a previous post, &lt;a href=&#34;http://www.michaelhamrah.com/blog/index.php/2009/02/digging-into-ruby-on-rails-from-c-and-mvc-aspnet-mvc/&#34;&gt;I&amp;#8217;ve been playing around with Rails&lt;/a&gt;.   I wanted to touch on how I got up and running learning and digging into Rails.&lt;/p&gt;

&lt;h2 id=&#34;learning-ruby-on-rails-14:07a84db2bfd60e17f47a574617953835&#34;&gt;Learning Ruby on Rails&lt;/h2&gt;

&lt;h3 id=&#34;the-web-14:07a84db2bfd60e17f47a574617953835&#34;&gt;The Web:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://guides.rails.info/&#34;&gt;Ruby on Rails Guides&lt;/a&gt; is the best place to learn Rails.  People looking to get started should definitely start here.  The guides are broken down into various topics, and are extremely well written with good coverage.  You&amp;#8217;ll get exactly what you need, even if you&amp;#8217;re an experienced programmer.&lt;/p&gt;

&lt;h3 id=&#34;books-14:07a84db2bfd60e17f47a574617953835&#34;&gt;Books:&lt;/h3&gt;

&lt;p&gt;I bought &lt;a href=&#34;http://www.amazon.com/Simply-Rails-2-Patrick-Lenz/dp/0980455200/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1231523564&amp;amp;sr=1-1&#34;&gt;Simply Rails 2&lt;/a&gt; and almost immediately returned it.  It&amp;#8217;s geared towards someone who has no programming experience whatsover.  It has minimal depth, if any.  Don&amp;#8217;t buy this book.&lt;/p&gt;

&lt;p&gt;I then bought &lt;a href=&#34;http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321445619/ref=pd_bxgy_b_img_c&#34;&gt;The Rails Way&lt;/a&gt; which I did not return, and now use as a reference.  It&amp;#8217;s a pretty big book with a decent amount of whitespace.  However, I like this book because it&amp;#8217;s not a how-to book.  It&amp;#8217;s also not really for learning Rails, but by explaining what Rails does and why.  It has a good format- with snippets from contributors highlighting certain points (think of the comments in &lt;a href=&#34;http://www.amazon.com/Framework-Design-Guidelines-Conventions-Development/dp/0321545613/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1234999371&amp;amp;sr=1-1&#34;&gt;Framework Design Guidelines&lt;/a&gt;).  To be honest, you can get what you need from the Rails guides, but if you like books, get The Rails Way.&lt;/p&gt;

&lt;p&gt;I also found some PDF&amp;#8217;s of Rails Recipes and Advanced Rails Recipes which I found useful.  However, Rails changes pretty frequently, so a lot of books get outdated pretty quickly.  Rails Guides is simply your best bet.&lt;/p&gt;

&lt;h3 id=&#34;peepcode-and-railscasts-14:07a84db2bfd60e17f47a574617953835&#34;&gt;Peepcode and Railscasts:&lt;/h3&gt;

&lt;p&gt;I&amp;#8217;m usually not a fan of screencasts, but I bought a 5 pack from &lt;a href=&#34;http://peepcode.com/&#34;&gt;Peepcode&lt;/a&gt; and am glad I did.  I wish I bought the unlimited.  Peepcode offers very well done videos about various topics on Rails.  There are also some pdf e-books you can download.  So far I&amp;#8217;ve bought The [As I wrote recently in a previous post, &lt;a href=&#34;http://www.michaelhamrah.com/blog/index.php/2009/02/digging-into-ruby-on-rails-from-c-and-mvc-aspnet-mvc/&#34;&gt;I&amp;#8217;ve been playing around with Rails&lt;/a&gt;.   I wanted to touch on how I got up and running learning and digging into Rails.&lt;/p&gt;

&lt;h2 id=&#34;learning-ruby-on-rails-15:07a84db2bfd60e17f47a574617953835&#34;&gt;Learning Ruby on Rails&lt;/h2&gt;

&lt;h3 id=&#34;the-web-15:07a84db2bfd60e17f47a574617953835&#34;&gt;The Web:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://guides.rails.info/&#34;&gt;Ruby on Rails Guides&lt;/a&gt; is the best place to learn Rails.  People looking to get started should definitely start here.  The guides are broken down into various topics, and are extremely well written with good coverage.  You&amp;#8217;ll get exactly what you need, even if you&amp;#8217;re an experienced programmer.&lt;/p&gt;

&lt;h3 id=&#34;books-15:07a84db2bfd60e17f47a574617953835&#34;&gt;Books:&lt;/h3&gt;

&lt;p&gt;I bought &lt;a href=&#34;http://www.amazon.com/Simply-Rails-2-Patrick-Lenz/dp/0980455200/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1231523564&amp;amp;sr=1-1&#34;&gt;Simply Rails 2&lt;/a&gt; and almost immediately returned it.  It&amp;#8217;s geared towards someone who has no programming experience whatsover.  It has minimal depth, if any.  Don&amp;#8217;t buy this book.&lt;/p&gt;

&lt;p&gt;I then bought &lt;a href=&#34;http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321445619/ref=pd_bxgy_b_img_c&#34;&gt;The Rails Way&lt;/a&gt; which I did not return, and now use as a reference.  It&amp;#8217;s a pretty big book with a decent amount of whitespace.  However, I like this book because it&amp;#8217;s not a how-to book.  It&amp;#8217;s also not really for learning Rails, but by explaining what Rails does and why.  It has a good format- with snippets from contributors highlighting certain points (think of the comments in &lt;a href=&#34;http://www.amazon.com/Framework-Design-Guidelines-Conventions-Development/dp/0321545613/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1234999371&amp;amp;sr=1-1&#34;&gt;Framework Design Guidelines&lt;/a&gt;).  To be honest, you can get what you need from the Rails guides, but if you like books, get The Rails Way.&lt;/p&gt;

&lt;p&gt;I also found some PDF&amp;#8217;s of Rails Recipes and Advanced Rails Recipes which I found useful.  However, Rails changes pretty frequently, so a lot of books get outdated pretty quickly.  Rails Guides is simply your best bet.&lt;/p&gt;

&lt;h3 id=&#34;peepcode-and-railscasts-15:07a84db2bfd60e17f47a574617953835&#34;&gt;Peepcode and Railscasts:&lt;/h3&gt;

&lt;p&gt;I&amp;#8217;m usually not a fan of screencasts, but I bought a 5 pack from &lt;a href=&#34;http://peepcode.com/&#34;&gt;Peepcode&lt;/a&gt; and am glad I did.  I wish I bought the unlimited.  Peepcode offers very well done videos about various topics on Rails.  There are also some pdf e-books you can download.  So far I&amp;#8217;ve bought The]&lt;a href=&#34;https://peepcode.com/products/rails-2-pdf&#34;&gt;7&lt;/a&gt; e-book which is worth the $9, and the]&lt;a href=&#34;https://peepcode.com/products/textmate-for-rails-2&#34;&gt;8&lt;/a&gt; video (I use a Mac).  I&amp;#8217;m very happy with them.  I&amp;#8217;ve also heard great things about the &lt;a href=&#34;https://peepcode.com/products/rest-for-rails-2&#34;&gt;Rest&lt;/a&gt; screencast (now in version 2, I&amp;#8217;ve seen version 1 and liked it).  I plan on getting the Git and RSpec videos as well.&lt;/p&gt;

&lt;p&gt;If you don&amp;#8217;t want to spend money, check out &lt;a href=&#34;http://railscasts.com/&#34;&gt;Railscasts&lt;/a&gt;.  These are done by the same people from peepcode and offer shorter videos on specific topics.  Well worth it.  (For those .NET people, think of &lt;a href=&#34;http://dimecasts.net/&#34;&gt;Dimecasts&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;the-hardware-software-setup-3:07a84db2bfd60e17f47a574617953835&#34;&gt;The Hardware/Software Setup&lt;/h3&gt;

&lt;p&gt;I use a MacBook Pro.  It&amp;#8217;s pretty easy to get setup with Rails on a Mac.  Google for the how-to.  For an editor, I use &lt;a href=&#34;http://www.macromates.com&#34;&gt;Textmate&lt;/a&gt; and love it. (Especially after watching the Peepcode screencast).  I played around with]&lt;a href=&#34;http://www.aptana.com&#34;&gt;13&lt;/a&gt; and &lt;a href=&#34;http://www.netbeans.com&#34;&gt;NetBeans&lt;/a&gt;, but stopped using them both.  It&amp;#8217;s not worth it if you&amp;#8217;re just starting out- these two programs are good IDE&amp;#8217;s, but they wrap a lot of functionality that I&amp;#8217;m finding is just easier to do on the command line.  Get comfortable with the simple first and add what you feel you&amp;#8217;re missing.  On Windows, I&amp;#8217;ve played around with &lt;a href=&#34;http://www.e-texteditor.com/&#34;&gt;e Text Editor&lt;/a&gt; and found it pretty nice.&lt;/p&gt;

&lt;p&gt;IDE&amp;#8217;s are very important.  As a .NET developer, I love Visual Studio.  It&amp;#8217;s awesome- I love the intellisense, resharper, the immediate window, debugging, tfs integration, I&amp;#8217;m spoiled.  You can pry code completion from my cold, dead hands.  I wanted that in Rails IDE.  But don&amp;#8217;t try finding Visual Studio for Rails- Rails doesn&amp;#8217;t need Visual Studio, and it will just get in the way.  Everything you need to do can be done in a simple text editor and the terminal window.  When you feel like you&amp;#8217;re lacking something, there&amp;#8217;s an easy way to do it.  Different is okay.&lt;/p&gt;

&lt;h3 id=&#34;other-stuff-1:07a84db2bfd60e17f47a574617953835&#34;&gt;Other Stuff&lt;/h3&gt;

&lt;p&gt;This is random:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://tryruby.hobix.com/&#34;&gt;Ruby in 15 minutes&lt;/a&gt; is a great site for learning Ruby.&lt;/li&gt;
&lt;li&gt;Learn and understand &lt;a href=&#34;http://github.com&#34;&gt;Git&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You seriously haven&amp;#8217;t checked out]&lt;a href=&#34;http://guides.rails.info/&#34;&gt;2&lt;/a&gt; yet?&lt;/li&gt;
&lt;li&gt;I spent too much time searching the Internet learning rails and not enough time programming Rails.  Get to it!&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Digging into Ruby on Rails from C# and .MVC (Asp.Net MVC)</title>
          <link>http://blog.michaelhamrah.com/2009/02/digging-into-ruby-on-rails-from-c-and-mvc-aspnet-mvc/</link>
          <pubDate>Wed, 18 Feb 2009 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2009/02/digging-into-ruby-on-rails-from-c-and-mvc-aspnet-mvc/</guid>
          <description>&lt;p&gt;One of the things I&amp;#8217;ve been doing lately is digging into Ruby on Rails. I&amp;#8217;ve always wanted to learn Rails since I was first exposed to Rails at an AjaxWorld conference in &amp;#8217;06 (at least, I think in 06). David Heinemeier Hansson actually presented!&lt;/p&gt;

&lt;p&gt;Alas, I never could devote enough time to get past the tipping point. I&amp;#8217;m comfortable with C# and ASP.NET and evolving those skills has always been the priority. But the perfect storm has happened recently- in order to save space in my apartment, I got rid of my PC desktop and now only use my MacBook. I got tired of using Parallels and Visual Studio, and a new project came up in which I could either use ASP.NET MVC (which I&amp;#8217;m calling .MVC from now on) or RoR. I thought it was time to finally try RoR.&lt;/p&gt;

&lt;p&gt;The verdict is Rails is great. I still can&amp;#8217;t &amp;#8220;express&amp;#8221; myself as well as I want to with Rails, but in comparison to .MVC Rails is pretty slick, and the evolution of Rails (specifically, &lt;a href=&#34;http://rubyonrails.org/merb&#34;&gt;combining Merb with Rails&lt;/a&gt;) is pretty exciting.  Most importantly, learning Rails has actually made me a better C#/ASP.NET MVC developer- if you&amp;#8217;re working with .MVC you have to spend at least an afternoon playing around with Rails- you&amp;#8217;ll get an invaluable perspective on MVC and web programming.&lt;/p&gt;

&lt;p&gt;Now, a discussion on any programming language/framework always causes a heated debated.  I&amp;#8217;m not an expert (or even a beginner) on Ruby or Rails, but these are my initial impressions.&lt;/p&gt;

&lt;p&gt;**Ruby, as a Language&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;One major leap between .MVC and Rails is Ruby as a language. Yes, Ruby and C# are both OO languages, but Ruby is a &lt;a href=&#34;http://en.wikipedia.org/wiki/Dynamic_programming_language&#34;&gt;dynamic language&lt;/a&gt;&amp;#8211; and if you&amp;#8217;re up on C# 4.0, you&amp;#8217;ll know that C# is on it&amp;#8217;s way to &lt;a href=&#34;http://ironpython-urls.blogspot.com/2008/12/c-becomes-dynamic-language.html&#34;&gt;becoming a dynamic language too&lt;/a&gt;. So if you want keep your C# skills on the cutting edge, get a head start on a full fledged dynamic language!&lt;/p&gt;

&lt;p&gt;I originally made the mistake of jumping in and assuming Ruby was more vb- or js- esque than it actually was.  It&amp;#8217;s pretty smart in the way it behaves, almost a tailored version of C#.  Ruby&amp;#8217;s use of &lt;a href=&#34;http://glu.ttono.us/articles/2005/08/19/understanding-ruby-symbols&#34;&gt;symbols&lt;/a&gt; is pretty big difference over other languages that&amp;#8217;s extensively used in Rails and pretty handy.&lt;/p&gt;

&lt;p&gt;Lambda expressions are also core part of Ruby, and are becoming a more integral part of C#.  This allows Ruby to be extremely concise in getting things done- which is awesome when you know what you&amp;#8217;re doing.  When you don&amp;#8217;t it can be confusing.  But lambdas make sense and are awesome when you know how to use them- and knowing Ruby can help you grasp lambda expressions in C#.&lt;/p&gt;

&lt;p&gt;Rails leverages Ruby&amp;#8217;s dynamic language to make a lot happen under the hood.  I personally found letting the Rails framework do its thing as one of the biggest hurdles in learning Rails.  I wanted to either program or explicitly orchestrate everything!  One prime example is the persistence model in Rails-  I struggled to figure out how properties where set in models from migration classes- but it&amp;#8217;s entirely automatic!  Also, a lot of methods are created dynamically.  This allows an extremely fluid expression in writing code, making Ruby a pretty natural programming language.  (Example: the find_by ActiveRecord methods; declaring links like edit_xxx_path).&lt;/p&gt;

&lt;p&gt;C# is making its way into being a more fluid programming language similar to Ruby.  Meaning, writing code and describing code are converging to be the same thing.  This is seen in lambda expressions and fluent interfaces, where you can daisy chain methods together.  &lt;a href=&#34;http://code.google.com/p/moq/&#34;&gt;Moq&lt;/a&gt; is a good example of the fluent interface approach.  I wouldn&amp;#8217;t be surprised if there&amp;#8217;s even a larger convergence with C# and Ruby in the years to come.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rails, as a Framework&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Those in the .NET world who follow &lt;a href=&#34;http://codebetter.com/blogs/jeremy.miller/&#34;&gt;Jeremy Miller&lt;/a&gt; have probably heard the term of &lt;a href=&#34;http://codebetter.com/blogs/jeremy.miller/archive/2008/10/23/our-opinions-on-the-asp-net-mvc-introducing-the-thunderdome-principle.aspx&#34;&gt;opinionated software.&lt;/a&gt; He talks about opinionated software in the context of &lt;a href=&#34;http://code.google.com/p/fubumvc/&#34;&gt;FubuMVC&lt;/a&gt;, an alternative to .MVC written in an opinionated style.  It&amp;#8217;s worth checking out- it&amp;#8217;s very interesting to use but Rails still cracks the MVC shell wide open because it leverages Ruby&amp;#8217;s language features.&lt;/p&gt;

&lt;p&gt;Opinionated software originally came from the Adam and Eve of Rails, &lt;a href=&#34;http://gettingreal.37signals.com/ch04_Make_Opinionated_Software.php&#34;&gt;37Signals&lt;/a&gt;.  Rails is highly opinionated- which is a blessing and curse.  The great thing about Rails is that it does what it does extremely well.  The MVC triangle are completely separate but seamlessly integrated, and extension points are explicit.  It&amp;#8217;s how MVC should be- and .MVC doesn&amp;#8217;t come close to Rails as an MVC framework.  Hate NHibernate configuration?  You&amp;#8217;ve never seen an ORM framework until you&amp;#8217;ve used ActiveRecord.  Really want to abandon code-behind files and excessive code in views? Really want to do TDD (and even BDD)?  Rails right now is the iPhone in a tin cup and string world.&lt;/p&gt;

&lt;p&gt;Here are some highlights:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Respond_to method for rendering html, xml, json or whatever from a single controller.  .MVC ActionResult could learn a thing or two.&lt;/li&gt;
&lt;li&gt;Rails&amp;#8217; partial layouts, partial actions and partial views are pretty slick compared .MVC&amp;#8217;s master pages, partial views, and partial layouts.  A prime example is using Rails partial views to render a collection of objects.&lt;/li&gt;
&lt;li&gt;Passing data between controllers and actions is a lot slicker than .MVC ViewData&lt;/li&gt;
&lt;li&gt;Rails helpers are a lot more helpful.&lt;/li&gt;
&lt;li&gt;Rails is pretty slick when it comes to mapping between posted data and Models- a lot better than binders.&lt;/li&gt;
&lt;li&gt;And of course, Rails&amp;#8217; database integration will make you wonder why you ever spent more than 5 minutes learning about databases- it&amp;#8217;s such a model centric approach with migrations you&amp;#8217;ll hate doing any data tier work in .MVC.  (Although learning databases are extremely important no matter what language/framework you use).&lt;/li&gt;
&lt;li&gt;Plugins.  Rails Plugins are simply awesome- extremely fluid integration into your Rails application.  And combining plugins and other support with gem makes maintenance and upgrades a breeze (forget the GAC!)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Where .MVC Shines&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve been hyping up Rails a lot, but there is a major disadvantage with Rails: good luck straying from the Rails track.  If you get off the train, you&amp;#8217;re walking alone.  This is something .MVC does well- allows you to change the game with whatever architecture pattern you wish.  It&amp;#8217;s one reason I love .NET- you can do literally do whatever want (yes, you can whatever you want with any language, but the .NET framework is pretty awesome).  .MVC is extremely extensible- from replaceable view engines, routing engines, controller factories, coupled with whatever architecture pattern you want.  And all very testable.  C#&amp;#8217;s usage of extension methods also add pretty nice extensibility to classes, too.&lt;/p&gt;

&lt;p&gt;In fact, Rails&amp;#8217; plans to integrate with Merb as way to be more modular is a prime example of something .MVC already does well- allows you to mix and match what you want instead of forcing conformance.  Allowing total and explicit control over the application stack- including your architecture- is a great advantage in maintaining the health of ongoing software. Yes, you can evolve Rails to do what you want, but the transparency .NET offers is something I don&amp;#8217;t see in Rails just yet.  It&amp;#8217;s definitely a pro and a con- on the one hand, Rails offers fluid interaction between components.  On the other, .NET doesn&amp;#8217;t force you into any specific pattern.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The bottom line is, check out Rails.  The best way to get started is with &lt;a href=&#34;http://guides.rails.info/&#34;&gt;the Rails guides&lt;/a&gt;.  From a .MVC perspective, you&amp;#8217;ll learn a lot about MVC and what an MVC framework can do- and it will help you out in your .NET development.  Knowing Ruby will also keep your C# skills sharp and help you in becoming a well rounded developer.  I&amp;#8217;ll even bet you carry over some Rails tricks to your next .MVC app!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fwww.michaelhamrah.com%2fblog%2findex.php%2f2009%2f02%2fdigging-into-ruby-on-rails-from-c-and-mvc-aspnet-mvc%2f&#34;&gt;&lt;img src=&#34;http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fwww.michaelhamrah.com%2fblog%2findex.php%2f2009%2f02%2fdigging-into-ruby-on-rails-from-c-and-mvc-aspnet-mvc%2f&amp;#038;bgcolor=000099&#34; border=&#34;0&#34; alt=&#34;kick it on DotNetKicks.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
