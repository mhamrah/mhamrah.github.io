<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> </title>
    <link>http://blog.michaelhamrah.com/tags/flickr/</link>
    <language>en-us</language>
    <author>Michael Hamrah</author>
    <rights>(C) 2015</rights>
    <updated>2013-05-05 00:00:00 &#43;0000 UTC</updated>

    
      
        <item>
          <title>Updating Flickr Photos with Gpx Data using Scala: Getting Started</title>
          <link>http://blog.michaelhamrah.com/2013/05/updating-flickr-photos-with-gpx-data-using-scala-getting-started/</link>
          <pubDate>Sun, 05 May 2013 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2013/05/updating-flickr-photos-with-gpx-data-using-scala-getting-started/</guid>
          <description>

&lt;p&gt;If you read this blog you know I&amp;#8217;ve just returned from six months of travels around Asia, documented on our tumblr, &lt;a href=&#34;http://thegreatbigadventure.tumblr.com&#34;&gt;The Great Big Adventure&lt;/a&gt; with photos on &lt;a href=&#34;http://flickr.com/hamrah&#34;&gt;Flickr&lt;/a&gt;. Even though my camera doesn&amp;#8217;t have a GPS, I realized toward the second half of the trip I could mark GPS waypoints and write a program to link that data later. I decided to write this little app in Scala, a language I&amp;#8217;ve been learning since my return. The app is still a work in progress, but instead of one long post I&amp;#8217;ll spread it out as I go along.&lt;/p&gt;

&lt;h2 id=&#34;the-workflow:57d2935fd637ebe85b97477296b70272&#34;&gt;The Workflow&lt;/h2&gt;

&lt;p&gt;When I took a photo I usually marked the location with a waypoint in my GPS. I accumulated a set of around 1000 of these points spread out over three gpx (xml) files. My plan is to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Read in the three gpx files and combine them into a distinct list.&lt;/li&gt;
&lt;li&gt;For each day I have at least one gpx point, get all of my flickr images for that data.&lt;/li&gt;
&lt;li&gt;For each image, find the waypoint timestamp with the least difference in time.&lt;/li&gt;
&lt;li&gt;Update that image with the waypoint data on Flickr.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;getting-started:57d2935fd637ebe85b97477296b70272&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;If you&amp;#8217;re going to be doing anything with Scala, learning &lt;a href=&#34;http://scala-sbt.org&#34;&gt;sbt&lt;/a&gt; is essential. Luckily, it&amp;#8217;s pretty straightforward, but the documentation across the internet is somewhat inconsistent. As of this writing, &lt;a href=&#34;http://twitter.github.io/scala_school/sbt.html&#34;&gt;Twitter&amp;#8217;s Scala School SBT Documentation&lt;/a&gt;, which I used as a reference to get started, incorrectly states that SBT creates a template for you. It no longer does, with the preferred approach to use &lt;a href=&#34;https://github.com/n8han/giter8&#34;&gt;giter8&lt;/a&gt;, an excellent templating tool. I created &lt;a href=&#34;https://github.com/mhamrah/sbt.g8&#34;&gt;my own simplified version&lt;/a&gt; which is based off of the excellently documented &lt;a href=&#34;https://github.com/ymasory/sbt.g8&#34;&gt;template by Yuvi Masory&lt;/a&gt;. Some of the versions in build.sbt are a outdated, but it&amp;#8217;s worthwhile reading through the code to get a feel for the Scala and SBT ecosystem. The g8 project also contains a good working example of custom sbt commands (like g8-test). One gotcha with SBT: if you change your build.sbt file, you must call &lt;em&gt;reload&lt;/em&gt; in the sbt console. Otherwise, your new dependencies will not be picked up. For rubyists this is similar to running &lt;em&gt;bundle update&lt;/em&gt; after changing your gemfile.&lt;/p&gt;

&lt;h2 id=&#34;testing:57d2935fd637ebe85b97477296b70272&#34;&gt;Testing&lt;/h2&gt;

&lt;p&gt;I&amp;#8217;m a big fan of TDD, and strive for a test-first approach. It&amp;#8217;s easy to get a feel for the small stuff in the scala repl, but orchestration is what programming is all about, and TDD allows you to design and throughly test functionality in a repeatable way. The two main libraries are &lt;a href=&#34;https://code.google.com/p/specs/&#34;&gt;specs&lt;/a&gt; (actually, it&amp;#8217;s now &lt;a href=&#34;http://etorreborre.github.io/specs2/&#34;&gt;specs2&lt;/a&gt;) and &lt;a href=&#34;http://www.scalatest.org/&#34;&gt;ScalaTest&lt;/a&gt;. I originally went with specs2. It was fine, but I wasn&amp;#8217;t too impressed with the output and not thrilled with the matchers. I believe these are all customizable, but to get a better feel for the ecosystem I switched to ScalaTest. I like ScalaTest&amp;#8217;s default output better and the flexible composition of testing styles (I&amp;#8217;m using FreeSpec) and matchers (ShouldMatchers) provide a great platform for testing. Luckily, both specs2 and scalatest integrate with SBT which provides continuous testing and growl support, so you don&amp;#8217;t need to fully commit to either one too early.&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
