<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> </title>
    <link>http://blog.michaelhamrah.com/tags/json/</link>
    <language>en-us</language>
    <author>Michael Hamrah</author>
    <rights>(C) 2015</rights>
    <updated>2013-06-22 00:00:00 &#43;0000 UTC</updated>

    
      
        <item>
          <title>Spray API Development: Getting Started with a Spray Web Service Using JSON</title>
          <link>http://blog.michaelhamrah.com/2013/06/scala-web-apis-up-and-running-with-spray-and-akka/</link>
          <pubDate>Sat, 22 Jun 2013 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2013/06/scala-web-apis-up-and-running-with-spray-and-akka/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;spray.io&#34;&gt;Spray&lt;/a&gt; is a great library for building http api&amp;#8217;s with Scala. Just like &lt;a href=&#34;playframework.com&#34;&gt;Play!&lt;/a&gt; it&amp;#8217;s built with &lt;a href=&#34;akka.io&#34;&gt;Akka&lt;/a&gt; and provides numerous low and high level tools for http servers and clients. It puts Akka and Scala&amp;#8217;s asynchronous programming model first for high performance, composable application development.&lt;/p&gt;

&lt;p&gt;I wanted to highlight the &lt;a href=&#34;http://spray.io/documentation/1.1-M8/spray-routing/&#34;&gt;spray-routing&lt;/a&gt; library which provides a nice DSL for defining web services. The routing library can be used with the standalone &lt;a href=&#34;http://spray.io/documentation/1.1-M8/spray-can/#spray-can&#34;&gt;spray-can&lt;/a&gt; http server or in any servlet container.&lt;/p&gt;

&lt;p&gt;We&amp;#8217;ll highlight a simple entity endpoint, unmarshalling Json data into an object and deferring actual process to another Akka actor. To get started with your own spray-routing project, I created a &lt;a href=&#34;https://github.com/n8han/giter8&#34;&gt;giter8&lt;/a&gt; template to bootstrap your app:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$g8 mhamrah/sbt -b spray&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://spray.io/documentation/&#34;&gt;The documentation&lt;/a&gt; is quite good and &lt;a href=&#34;https://github.com/spray/spray&#34;&gt;the source code is worth browsing&lt;/a&gt;. For a richer routing example check out &lt;a href=&#34;https://github.com/spray/spray/tree/release/1.1/examples/spray-routing/on-spray-can&#34;&gt;Spray&amp;#8217;s own routing project&lt;/a&gt; which shows off http-streaming and a few other goodies.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-server:e4c25fe8ca10d79600b3f827b4d5c8dd&#34;&gt;Creating a Server&lt;/h2&gt;

&lt;p&gt;We are going to create three main structures: An actor which contains our Http Service, a trait which contains our route definition, and a Worker actor that will do the work of the request.&lt;/p&gt;

&lt;p&gt;The service actor is launched in your application&amp;#8217;s main method. Here we are using Scala&amp;#8217;s App class to launch our server feeding in values from &lt;a href=&#34;https://github.com/typesafehub/config&#34;&gt;typesafe config&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!scala
val service= system.actorOf(Props[SpraySampleActor], &amp;quot;spray-sample-service&amp;quot;)
IO(Http) ! Http.Bind(service, system.settings.config.getString(&amp;quot;app.interface&amp;quot;), system.settings.config.getInt(&amp;quot;app.port&amp;quot;))

println(&amp;quot;Hit any key to exit.&amp;quot;)
val result = readLine()
system.shutdown()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because Spray is based on Akka, we are just creating a standard actor system and passing our service to &lt;a href=&#34;http://doc.akka.io/docs/akka/snapshot/scala/io.html&#34;&gt;Akka&amp;#8217;s new IO library&lt;/a&gt;. This is the high performance foundation for our service built on the spray-can server.&lt;/p&gt;

&lt;h2 id=&#34;the-service-actor:e4c25fe8ca10d79600b3f827b4d5c8dd&#34;&gt;The Service Actor&lt;/h2&gt;

&lt;p&gt;Our service actor is pretty lightweight, as the functionality is deferred to our route definition in the HttpService trait. We only need to set the actorRefFactory and call runRoutes from our trait. You could simply set routes directly in this class, but the separation has its benefits, primarily for testing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!scala
class SpraySampleActor extends Actor with SpraySampleService with SprayActorLogging {
  def actorRefFactory = context
  def receive = runRoute(spraysampleRoute)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-service-trait-8211-spray-8217-s-routing-dsl:e4c25fe8ca10d79600b3f827b4d5c8dd&#34;&gt;The Service Trait &amp;#8211; Spray&amp;#8217;s Routing DSL&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://spray.io/documentation/1.1-M8/spray-routing/key-concepts/routes/&#34;&gt;Spray&amp;#8217;s Routing DSL&lt;/a&gt; is where Spray really shines. It is similar to Sinatra inspired web frameworks like Scalatra, but relies on composable function elements so requests pass through a series of actions similar to &lt;a href=&#34;http://unfiltered.databinder.net/&#34;&gt;Unfiltered&lt;/a&gt;. The result is an easy to read syntax for routing and the Dont-Repeat-Yourself of composable functions.&lt;/p&gt;

&lt;p&gt;To start things off, we&amp;#8217;ll create a simple get/post operation at the /entity path:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!scala
trait SpraySampleService extends HttpService {
  val spraysampleRoute = {
    path(&amp;quot;entity&amp;quot;) {
      get { 
        complete(&amp;quot;list&amp;quot;)
      } ~
      post {
        complete(&amp;quot;create&amp;quot;)
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The path, get and complete operations are &lt;a href=&#34;http://spray.io/documentation/1.1-M8/spray-routing/key-concepts/directives/#directives&#34;&gt;Directives&lt;/a&gt;, the building blocks of Spray routing. Directives take the current http request and process a particular action against it. The above snippet doesn&amp;#8217;t much except filter the request on the current path and the http action. The path directive also lets you pull out path elements:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!scala
path (&amp;quot;entity&amp;quot; / Segment) { id =&amp;gt;
    get {
      complete(s&amp;quot;detail ${id}&amp;quot;)
    } ~
    post {
      complete(s&amp;quot;update ${id}&amp;quot;)
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a number ways to pull out elements from a path. Spray&amp;#8217;s unit tests are the best way to explore the possibilities.&lt;/p&gt;

&lt;p&gt;You can use curl to test the service so far:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!bash
curl -v http://localhost:8080/entity
curl -v http://localhost:8080/entity/1234
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;unmarshalling:e4c25fe8ca10d79600b3f827b4d5c8dd&#34;&gt;Unmarshalling&lt;/h2&gt;

&lt;p&gt;One of the nice things about Spray&amp;#8217;s DSL is how function composition allows you to build up request handling. In this snippet we use json4s support to unmarshall the http request into a JObject:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!scala
/* We need an implicit formatter to be mixed in to our trait */
object Json4sProtocol extends Json4sSupport {
  implicit def json4sFormats: Formats = DefaultFormats
}

trait SpraySampleService extends HttpService {
  import Json4sProtocol._

  val spraysampleRoute = {
    path(&amp;quot;entity&amp;quot;) {
      /* ... */
      post {
        entity(as[JObject]) { someObject =&amp;gt;
          doCreate(someObject)
        }
      } 
     /* ... */
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We use the Entity to directive to unmarshall the request, which finds the implicit json4s serializer we specified earlier. SomeObject is set to the JObject produced, which is passed to our yet-to-be-built doCreate method. If Spray can&amp;#8217;t unmarshall the entity an error is returned to the client.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s a curl command that sets the http method to POST and applies the appropriate header and json body:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!bash
curl -v -X POST http://localhost:8080/entity -H &amp;quot;Content-Type: application/json&amp;quot; -d &amp;quot;{ \&amp;quot;property\&amp;quot; : \&amp;quot;value\&amp;quot; }&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;leveraging-akka-and-futures:e4c25fe8ca10d79600b3f827b4d5c8dd&#34;&gt;Leveraging Akka and Futures&lt;/h2&gt;

&lt;p&gt;We want to keep our route structure clean, so we defer actual work to another Akka worker. Because Spray is built with Akka this is pretty seamless. We need to create our ActorRef to send a message. We&amp;#8217;ll also implement our doCreate function called within the earlier POST /entity directive:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!scala
//Our worker Actor handles the work of the request.
val worker = actorRefFactory.actorOf(Props[WorkerActor], &amp;quot;worker&amp;quot;)

def doCreate[T](json: JObject) = {
  //all logic must be in the complete directive
  //otherwise it will be run only once on launch
  complete {
    //We use the Ask pattern to return
    //a future from our worker Actor,
    //which then gets passed to the complete
    //directive to finish the request.
    (worker ? Create(json))
                .mapTo[Ok]
                .map(result =&amp;gt; s&amp;quot;I got a response: ${result}&amp;quot;)
                .recover { case _ =&amp;gt; &amp;quot;error&amp;quot; }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;#8217;s a couple of things going on here. Our worker class is looking for a Create message, which we send to the actor with the ask (?) pattern. The ask pattern lets us know the task completed so we call then tell the client. When we get the Ok message we simply return the result; in the case of an error we return a short message. The response future returned is passed to Spray&amp;#8217;s complete directive, which will then complete the request to the client. There&amp;#8217;s no blocking occurring in this snippet: we are just wiring up futures and functions.&lt;/p&gt;

&lt;p&gt;Our worker doesn&amp;#8217;t do much but out the message contents and return a random number:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!scala
class WorkerActor extends Actor with ActorLogging {
import WorkerActor._

def receive = {
  case Create(json) =&amp;gt; {
    log.info(s&amp;quot;Create ${json}&amp;quot;)
    sender ! Ok(util.Random.nextInt(10000))
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can view how the entire request is handled &lt;a href=&#34;https://github.com/mhamrah/spray-sample/blob/master/src/main/scala/Boot.scala&#34;&gt;by viewing the source file&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up:e4c25fe8ca10d79600b3f827b4d5c8dd&#34;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Reading the documentation and exploring the unit tests are the best way to understand the power of Spray&amp;#8217;s routing DSL. The performance of the standalone &lt;a href=&#34;http://spray.io/documentation/1.1-M8/spray-can/&#34;&gt;spray-can&lt;/a&gt; service is outstanding, and the Akka platform adds resiliency through its lifecycle management tools. Akka&amp;#8217;s remoting feature allows systems to build out their app tiers. A project I&amp;#8217;m working on is using Spray and Akka to publish messages to a pub/sub system for downstream request handling. It&amp;#8217;s an excellent platform for high performance API development. &lt;a href=&#34;https://github.com/mhamrah/spray-sample&#34;&gt;Full spray-sample is on GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Nina, My New Favorite Web (Micro)Framework</title>
          <link>http://blog.michaelhamrah.com/2011/05/nina-my-new-favorite-web-microframework/</link>
          <pubDate>Tue, 10 May 2011 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2011/05/nina-my-new-favorite-web-microframework/</guid>
          <description>

&lt;p&gt;One of the things I&amp;#8217;m excited to see is the huge increase in Open Source projects in the .NET world. NuGet has certainly helped the recent explosion, but even before that there have been numerous projects gaining legs in the .NET community. Even better, the movement has been learning from other programming ecosystems to bring some great functionality into all kinds of .NET based systems.&lt;/p&gt;

&lt;p&gt;One of my favorite projects on the scene is &lt;a href=&#34;http://jondot.github.com/nina/&#34;&gt;Nina, a Web Micro Framework&lt;/a&gt; by &lt;a href=&#34;http://twitter.com/#!/jondot&#34;&gt;jondot&lt;/a&gt;. What exactly is a web micro framework? Quite simply it easily allows you to go from an HTTP request to a server side method call with little friction. The project is inspired by &lt;a href=&#34;http://www.sinatrarb.com/&#34;&gt;Sinatra&lt;/a&gt; a very popular ruby framework for server-side interaction which doesn&amp;#8217;t involve all the overhead of a convention based framework like Ruby on Rails.&lt;/p&gt;

&lt;h2 id=&#34;wait-isn-8217-t-this-mvc:340cb49b2e29e9bef84588c65c69d675&#34;&gt;Wait, Isn&amp;#8217;t This .MVC?&lt;/h2&gt;

&lt;p&gt;Sort of- but the two frameworks take very different approaches in how they map an HTTP request to a function call. .MVC is a huge improvement over &amp;#8220;that which must not be named&amp;#8221; but still abstracts the underlying HTTP request/response: controllers and actions to handle logic, models to represent data, views to render results, and routing to figure out what to do. This is usually a good thing as you can easily get fully formed objects into and out of the server in an organized way and has incredible benefits over WebForms. But sometimes that is too much for what you want or need. In our ajax driven world we simply want to do something&amp;#8211;GET or POST some data&amp;#8211;as quickly and easily as possible. We don&amp;#8217;t want to set up a routing for new controller, create a model or view model, invoke an action, return a view, and all that other stuff; we just want to look at the request and do something. That&amp;#8217;s where Nina comes in- it elegantly lets you &amp;#8220;think&amp;#8221; in HTTP by providing an API to do something based on a given HTTP request. It&amp;#8217;s extremely lightweight and extremely fast. It&amp;#8217;s the bare essentials of MVC by providing a minimalist view of functionality in a well defined DSL. On the plus side, the MVC framework and Nina can complement each other quite well (Nina can also stand on its own, too!). Let&amp;#8217;s take a look.&lt;/p&gt;

&lt;h2 id=&#34;how-it-works:340cb49b2e29e9bef84588c65c69d675&#34;&gt;How It Works&lt;/h2&gt;

&lt;p&gt;Nina is essentially functionality added to a web project in the same way the MVC bits are added to a web project. It&amp;#8217;s not an entirely new HTTP server implementation. It&amp;#8217;s powered off of the standard .NET HttpApplication class and unlike the various &lt;a href=&#34;http://owin.org/&#34;&gt;OWIN&lt;/a&gt; toolkits Nina doesn&amp;#8217;t try and rewrite the underlying HttpContext or IIS server stack. To start things off Nina is powered by creating a class that handles all requests to a given url, referred to as an endpoint. This class inherits from &lt;em&gt;Nina.Application&lt;/em&gt; and handles all requests to that endpoint- no matter what the rest of the url is. This is done by &amp;#8220;mounting&amp;#8221; the class to an endpoint in your Global.asax file. It&amp;#8217;s not too different than setting up a routing for MVC. However, instead of MVC, you&amp;#8217;re not routing directly to specific actions or a pattern of actions, but &amp;#8220;gobbing&amp;#8221; up all requests to that url endpoint. Below is an example of a global.asax file from the Nina demo project. There are two Nina applications- the Contacts class gets mounted to the contacts endpoint and Posts gets mounted to the blog endpoint.&lt;/p&gt;

&lt;pre class=&#34;syntax c#&#34;&gt;private static void RegisterRoutes()
    {
            RouteTable.Routes.Add(new MountingPoint(&#34;contacts&#34;));
            RouteTable.Routes.Add(new MountingPoint(&#34;blog&#34;));
    }&lt;/pre&gt;

&lt;p&gt;When you&amp;#8217;re mounting an endpoint any request to that endpoint will go to that class- and that class will handle everything else. So anything with a url of /contacts, /contacts/123, /contacts/some/long/path/with/file.html?x=1&amp;amp;y=1 will go to the Contacts class. There&amp;#8217;s no automatic mapping of url parts to action names, or auto filling of parameters. That&amp;#8217;s all handled by the class you specify which inherits from Nina.Application. Routing to individual methods is handled within these classes by leveraging the Nina DSL. I like this approach, as it keeps routing logic tied to specific endpoints rather than requiring you to centrally locate everything or to dictate globally how routing should work via conventions. Of course, there are pros and cons in either case. In very complex systems the Global.asax can get quite large; you can certainly refactor routing logic into helper functions as necessary, but moving routing definitions closer to the logic has its benefits. I&amp;#8217;m also not too big of a fan when it comes to attribute based programming so not having to pepper your action methods with specific filters- whether for a Uri template in the case of WCF or Http Verbs for .MVC- is a big plus.&lt;/p&gt;

&lt;h2 id=&#34;handling-requests:340cb49b2e29e9bef84588c65c69d675&#34;&gt;Handling Requests&lt;/h2&gt;

&lt;p&gt;This is where the beauty of Nina comes in. Once we&amp;#8217;ve mounted an application to an endpoint we can handle what to do based on two variables: the HTTP method and the path of the request. This is done via four function calls which are part of the Nina.Application class and map to the four HTTP verbs: Get(), Put(), Post() and Delete(). Each function takes in two parameters: the first is a Uri template which determines when this method gets invoked. The second is a lambda with a signature of Func&lt;NameValueCollection, HttpContext, ResourceResult&gt;. This lambda is what gets invoked when the current requests matches the Uri template. The first parameter are the template parts (explained later), the second parameter is the underlying HttpContext object, and the Function returns a Nina.ResourceResult class. For all intents and purposes a ResourceResult is similar to an ActionResult in .MVC. Nina provides quite a number of ResourceResults, from Html views to various serialization objects to binary data.&lt;/p&gt;

&lt;p&gt;This setup is powered by an extremely nice DSL for handling function invocation from HTTP requests and yields a very nice description of your endpoint. You specify the HTTP verb required to invoke the function. You specify the Uri template to when that match should occur&amp;#8211;very similar to setting up routes&amp;#8211;and your handler is actually a parameter, which you can specify inline or elsewhere if needed. The Uri templating is pretty slick, as it allows any level of fuzzy matching. Because the template is automatically parsed and passed as a variable to your handler, you can easily get out elements of the Uri using the template tokens in your Uri. Let&amp;#8217;s take a look at a simple example:&lt;/p&gt;

&lt;p&gt;Take a look at the example application below.&lt;/p&gt;

&lt;pre class=&#34;syntax c#&#34;&gt;public class Contacts : Nina.Application
    {
        public Contacts()
        {
            Get(&#34;&#34;, (m, c) =&amp;gt;
                        {
                            //Returns anything at the root endpoint, i.e. /contacts
                            var data = SomeRepository.GetAll();
                            return Json(data);
                        });
            Get(&#34;Detail/{id}&#34;, (m, c) =&amp;gt;
                                   {
                                       //Returns /contacts/detail/XYZ

                                       //m is the bound parameters in the template
                                       //this will be a collection with m[&#34;ID&#34;] returning XYZ
                                       var id = m[&#34;ID&#34;]; //returns XYZ

                                       var data = SomeRepository.GetDetail(id);
                                       return View(&#34;viewname&#34;, data); //Nina has configurable ViewEngines!
                                   });

            Post(&#34;&#34;, (m,c) =&amp;gt;
                         {
                             //A post request to the root endpoint.

                             return Nothing(); 
                         });
         }
}&lt;/pre&gt;

&lt;p&gt;We&amp;#8217;re exposing three operations: two GET calls and one POST. We&amp;#8217;re handling a GET and POST operation at the endpoint root. In our global.asax we&amp;#8217;ve mounted this application at /contacts, so everything here is relative to /contacts. A template of &amp;#8220;&amp;#8221; will simply match a Uri of /contacts. If we wrote  &lt;code class=&#34;syntax c#&#34;&gt;RouteTable.Routes.Add(new MountingPoint(&amp;ldquo;contacts&amp;rdquo;));&lt;/code&gt; in our Global.asax than this class would be at the root of our application, i.e. &amp;#8220;&lt;a href=&#34;http://localhost/&amp;amp;#8221&#34;&gt;http://localhost/&amp;amp;#8221&lt;/a&gt;;. Finally, we have another GET call at /detail/{id}. This is actually a URI template, similar to a Route, so anything which matches that template will be handled by that function. In this case /detail/123 or /detail/xyz would match. The template variables are passed as a key/value array in the &amp;#8220;m&amp;#8221; parameter of the lambda and can easily be pulled out. These are your template parts that are automatically parsed out for you.&lt;/p&gt;

&lt;p&gt;Using this DSL we can create any number of handlers for any GET, POST, PUT or even DELETE request. We can easily access HTTP Headers, Form variables, or the Request/Response objects from the HttpContext class. Most importantly we can easily view how a request will get handled by our system. The abstraction that MVC brings via Routes, Controllers and Actions is helpful; but not always necessary. Nina provides a different way of describing what you want done that serves a variety of purposes.&lt;/p&gt;

&lt;h2 id=&#34;returning-results:340cb49b2e29e9bef84588c65c69d675&#34;&gt;Returning Results&lt;/h2&gt;

&lt;p&gt;So far we&amp;#8217;ve focused on the Request side of Nina and haven&amp;#8217;t delved too much in the Response side. Nina&amp;#8217;s response system is very similar to .MVC&amp;#8217;s ActionResult infrastructure. Nina has a suite of classes which inherit from ResourceResult that allows you to output a response in a variety of ways. You can serialize an object into Json or Xml, render straight text, return a file, return only a status code, or even return a view. Nina supports numerous View engines&amp;#8211;including Razor but also NHaml, NDjango and Spark&amp;#8211;that&amp;#8217;s beyond the scope of this blog but worth checking out. I&amp;#8217;m a big fan of Haml. Results are returned using one of the method calls provided through the Nina.Application class and should serve all your needs. The best thing to do is explore the Nina.Application class itself and find out which methods return ResourceResults objects.&lt;/p&gt;

&lt;h2 id=&#34;this-is-cool-but-why-use-it:340cb49b2e29e9bef84588c65c69d675&#34;&gt;This is cool, but why use it?&lt;/h2&gt;

&lt;p&gt;The great part about Nina is that even though it can stand alone as an application, it can just as easily augment an existing WebForms (Blah!) or MVC application via mounting endpoints using the Routing engine. There are times when you want speed and simplicity for your web app rather than a fully-fledged framework. MVC is great, but requires quite a few moving parts and abstracts away underlying HTTP. The new Restful Web API&amp;#8217;s Microsoft is rolling out for WCF are also nice, but I&amp;#8217;ve never been a fan of attribute based programming and the WCF endpoints are service specific. Nina offers much more flexibility. Nina strikes the right balance by honoring existing HTTP conventions while providing flexibility of output. Sinatra, Nina&amp;#8217;s inspiration, came about by those who didn&amp;#8217;t want to follow the Rails bandwagon and the MVC convention it implemented. They wanted an easier, lightweight way of parsing and handling HTTP requests, and that&amp;#8217;s exactly what Nina does.&lt;/p&gt;

&lt;p&gt;Here are some use cases where Nina works well:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Json powered services. Even though MVC has JsonResult, Nina provides a low friction way of issuing a get request to return Json data, useful for Autosuggest lists or other Json powered services. JQuery thinks in terms of get/post commands so mapping these directly to mounted endpoints becomes much more fluid. One of my more popular articles is the &lt;a href=&#34;http://www.michaelhamrah.com/blog/2010/08/the-new-webapp-architecture-asp-net-mvc-3-jquery-templating-with-pure-and-the-json-value-provider/&#34;&gt;New Web App Architecture&lt;/a&gt;. Nina provides a nice alternative to Json powered services that can augment one of the newer javascript frameworks like &lt;a href=&#34;knockoutjs.com&#34;&gt;Knockout&lt;/a&gt; or &lt;a href=&#34;http://documentcloud.github.com/backbone/&#34;&gt;Backbone&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Better file delivery. HttpHandlers work well, but exist entirely outside the domain of your app. Powering file delivery through Nina- either because the info is in a data store or required specific authentication, works well.&lt;/li&gt;
&lt;li&gt;Conventions aren&amp;#8217;t required. Setting up routings, organizing views, and implementing action methods all require work and coding. Most of the time, you just want to render something or save something. Posting a search form, save a record via ajax, polling for alerts are all things that could be done with the conventions of MVC but aren&amp;#8217;t necessarily needed. Try the lightweight approach of Nina and you&amp;#8217;ll be glad you did. With support for View engines you may even want to come up with your own conventions for organizing content.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When the time it takes to do something simple simply becomes too great you&amp;#8217;re using the wrong tool. I strongly encourage you to play around with Nina&amp;#8211; you&amp;#8217;ll soon learn to love the raw power of HTTP and the simplicity of the API. It will augment your existing tool belt quite well and you&amp;#8217;ll find how much you can do when when you can express yourself in different ways.&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
