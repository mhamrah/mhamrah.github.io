<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> </title>
    <link>http://blog.michaelhamrah.com/tags/aspnetmvc/</link>
    <language>en-us</language>
    <author>Michael Hamrah</author>
    <rights>(C) 2015</rights>
    <updated>2011-03-21 00:00:00 &#43;0000 UTC</updated>

    
      
        <item>
          <title>Updated MVC3 Html5 Boilerplate Template: Now with Twitter and Facebook</title>
          <link>http://blog.michaelhamrah.com/2011/03/updated-mvc3-html5-boilerplate-template-now-with-twitter-and-facebook/</link>
          <pubDate>Mon, 21 Mar 2011 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2011/03/updated-mvc3-html5-boilerplate-template-now-with-twitter-and-facebook/</guid>
          <description>&lt;p&gt;I pushed a major update to the MVC3/Html5 Boilerplate Template found on the &lt;a href=&#34;https://github.com/mhamrah/Html5OpenIdTemplate&#34;&gt;github&lt;/a&gt; page. The new update includes the latest boilerplate code and uses the DotnetOpenAuth CTP for logging in via Twitter and Facebook. Thanks to &lt;a href=&#34;http://www.twitter.com/jacob4u2&#34;&gt;@jacob4u2&lt;/a&gt; for making some necessary web.config changes (he has an alternate template on his &lt;a href=&#34;https://bitbucket.org/jacob4u2/mothereffin-html5-site&#34;&gt;bitbucket&lt;/a&gt; site you should also check out.&lt;/p&gt;

&lt;p&gt;Your best option is to &lt;code class=&#34;syntax bash&#34;&gt;git clone git@github.com:mhamrah/Html5OpenIdTemplate.git&lt;/code&gt; the template with your own app. That way you&amp;#8217;ll get the latest nu-get packages with the bundle. You can also use the template, but you&amp;#8217;ll need to manually pull &lt;a href=&#34;http://sourceforge.net/projects/dnoa/files/CTP/OAuth2/&#34;&gt;the latest CTP for DotNetOpenAuth&lt;/a&gt; to get the latest dlls.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Expressions and Lambdas: Oh My!</title>
          <link>http://blog.michaelhamrah.com/2010/11/expressions-and-lambdas-oh-my/</link>
          <pubDate>Sat, 13 Nov 2010 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2010/11/expressions-and-lambdas-oh-my/</guid>
          <description>&lt;p&gt;I&amp;#8217;ve been working on a toolkit called &lt;a href=&#34;https://github.com/mhamrah/Redaculous&#34;&gt;Redaculous&lt;/a&gt;&amp;#8211; it&amp;#8217;s a .NET Library for the really cool key/value store &lt;a href=&#34;http://code.google.com/p/redis/&#34;&gt;Redis&lt;/a&gt;.  It&amp;#8217;s built on top of the &lt;a href=&#34;http://code.google.com/p/servicestack/wiki/ServiceStackRedis&#34;&gt;ServiceStack.Redis&lt;/a&gt; library, which provides various .NET clients for Redis.  Redaculous is meant to make aggregating Redis commands a little easier- but don&amp;#8217;t get too excited.  The project __is in its infancy, and will undergo many changes, if it even gets off the ground.  This post isn&amp;#8217;t about Redis nor Redaculous- it&amp;#8217;s about how parts of Redaculous leverage &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb506649.aspx&#34;&gt;Expressions&lt;/a&gt; and &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb397687.aspx&#34;&gt;Lambdas&lt;/a&gt; to drive a lot of the functionality Redaculous is meant to provide, and how you can leverage Expressions to make your programming life easier.  ASP.NET MVC and lots of other great frameworks do it, so why can&amp;#8217;t you?&lt;/p&gt;

&lt;p&gt;The problem was simple:  I have a class, with a bunch of properties, and those properties have values.  In order to put them into Redis, I need to know the property name and the value it contains.  I need to know, at runtime, that myObj.SomeProperty has a property called &amp;#8220;SomeProperty&amp;#8221; and the value of that property.  This is a problem shared with most serialization tools and ORM mappers:  how does a &amp;#8220;SomeProperty&amp;#8221; make it to a column in table in a database, or make it to a node in xml?&lt;/p&gt;

&lt;p&gt;This problem can (and has been) solved in a variety of ways.  The most common was attributes to decorate classes and properties- which is how WCF constructs contracts or how some ORM toolkits work.  But that&amp;#8217;s extremely intrusive, in this pseudo example which combines WCF and DataAccess :&lt;/p&gt;

&lt;pre class=&#34;syntax c# escaped&#34;&gt;[Table(&#34;DtoTb&#34;)]
[DataContract]
public class Dto
{
     [PrimaryKey]
     [DataMember]
     public int Id { get; set; }

     [ColumnName(&#34;Name&#34;)]
     [DataMember]
     public string Name { get; set; }
}
&lt;/pre&gt;

&lt;p&gt;There&amp;#8217;s a weird combination of data storage and data definition which goes on in toolkits which use that approach.  It&amp;#8217;s not really a smooth way to operate- and the approach falls out when the model greatly diverages from the underlying table, or when a class has numerous other complex types.  Worse, when we want to also expose that class via WCF, we&amp;#8217;re essentially tacking on both data access description and web service schema description.  How many attributes can you tack on there? Validation attributes, too?&lt;/p&gt;

&lt;p&gt;Another approach is to use code-generation.  This is essentially what Linq-to-Sql does; it provides the underlying property descriptions at design time, saving a lot of manual typing.  I&amp;#8217;m not a big fan of code generators; they have their place, but you lose a lot of control in defining explicit functionality.  You&amp;#8217;re boxed into what is generated and most customizations usually don&amp;#8217;t fit in well: when you stray outside of what the code generator provides (or even outside of what the core generation is focused on) you find yourself trying to shove a square peg in a round hole.&lt;/p&gt;

&lt;p&gt;The best approach is to do what great tools like &lt;a href=&#34;https://github.com/atheken/NoRM&#34;&gt;Norm&lt;/a&gt;, &lt;a href=&#34;http://fluentnhibernate.org/&#34;&gt;Fluent NHibernate,&lt;/a&gt; &lt;a href=&#34;http://automapper.codeplex.com/&#34;&gt;AutoMapper&lt;/a&gt;, and .MVC&amp;#8217;s Html helpers do: they use &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb397687.aspx&#34;&gt;Expressions&lt;/a&gt;.  Most often the configuration is offloaded to separate classes which rely heavily on Expressions for property introspection.  This allows an end user to write code like:&lt;/p&gt;

&lt;pre class=&#34;syntax c# escaped&#34;&gt;//For MVC:
Html.TextBoxFor(m =&amp;gt; m.ProductName);
//Or for Fluent NHibernate:
Id(x =&amp;gt; x.ImageId);
&lt;/pre&gt;

&lt;p&gt;The TextBoxFor creates an input html element with a name=&amp;#8221;ProductName&amp;#8221; attribute; the Id() says NHIbernate should use a class&amp;#8217;s ImageId Property as the Id for the table.&lt;/p&gt;

&lt;p&gt;Expressions where introduced in .NET 3.5, and have been heavily leveraged ever since to provide a level of meta-programming which previously didn&amp;#8217;t exist in the .NET world.   Expressions greatly differ from Reflection by the fact Expressions are code which has been parsed into a set of various descriptive classes, while Reflection is compiled code which has been deconstructed into a descriptive semantic. An Expression statement will not actually &amp;#8220;do&amp;#8221; anything.  It can, however, be compiled into a callable function- which is the core advantage over Reflection.  With Expressions, you can have both the description of code and the actual, runnable code together.  Most frameworks create a package or container around the two as a performance optimization- it prevents an application from having to compile the expression multiple times.  The performance is much greater than using reflection to dynamically invoke or inspect properties.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How It Works&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Expressions and Lambdas go hand-in-hand, and can often be confused with one another. Let&amp;#8217;s take a look at the following code:&lt;/p&gt;

&lt;pre class=&#34;syntax c# escaped&#34;&gt;Expression&amp;lt;Func&amp;lt;SomeDto, string&amp;gt;&amp;gt; expressionLambda = m =&amp;gt; m.SomeStringProp;
Func&amp;lt;SomeDto, string&amp;gt;&amp;gt; funcLambda = m =&amp;gt; m.SomeStringProp;
&lt;/pre&gt;

&lt;p&gt;What&amp;#8217;s the difference between the two?  It&amp;#8217;s the same value, right?  Well, running that snippet in Visual Studio, and viewing the debugger properties, you&amp;#8217;ll find two different results for the m=&amp;gt;m.SomeStringProp statement. m=&amp;gt;m.SomeStringProp is the lambda: it&amp;#8217;s simply an alternative way of writing C# for various purposes. Usually, Lambdas are either Func or Action statements used as an alternative for delegate methods. The compiler will generate runnable IL code for the m =&amp;gt; m.SomeStringProp statement and create a callable method expecting an instance of SomeDto as the input. In the above example, you could get the value of a SomeStringProp using funcLambda like so:&lt;/p&gt;

&lt;pre class=&#34;syntax c# escaped&#34;&gt;var dto = new SomeDto() { SomeStringProp = &#34;Hell Yeah!&#34; };
funcLambda(dto); //Returns &#34;Hell Yeah!&#34;
&lt;/pre&gt;

&lt;p&gt;This can provide a level of agnosticism by passing around logic as variables in a much easier way than vanilla delegates.&lt;/p&gt;

&lt;p&gt;Expressions, on the other hand, don&amp;#8217;t compile into runnable IL code.  You can&amp;#8217;t write &lt;em&gt;funcExpression(dto)&lt;/em&gt; in the same was a normal lambda.  The compiler does something different: it actually parses the m=&amp;gt;m.SomeStringProp into various expression components which can be traversed, manipulated, rearranged and even compiled into a callable action, as if it were a Func all along. The [I&amp;#8217;ve been working on a toolkit called &lt;a href=&#34;https://github.com/mhamrah/Redaculous&#34;&gt;Redaculous&lt;/a&gt;&amp;#8211; it&amp;#8217;s a .NET Library for the really cool key/value store &lt;a href=&#34;http://code.google.com/p/redis/&#34;&gt;Redis&lt;/a&gt;.  It&amp;#8217;s built on top of the &lt;a href=&#34;http://code.google.com/p/servicestack/wiki/ServiceStackRedis&#34;&gt;ServiceStack.Redis&lt;/a&gt; library, which provides various .NET clients for Redis.  Redaculous is meant to make aggregating Redis commands a little easier- but don&amp;#8217;t get too excited.  The project __is in its infancy, and will undergo many changes, if it even gets off the ground.  This post isn&amp;#8217;t about Redis nor Redaculous- it&amp;#8217;s about how parts of Redaculous leverage &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb506649.aspx&#34;&gt;Expressions&lt;/a&gt; and &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb397687.aspx&#34;&gt;Lambdas&lt;/a&gt; to drive a lot of the functionality Redaculous is meant to provide, and how you can leverage Expressions to make your programming life easier.  ASP.NET MVC and lots of other great frameworks do it, so why can&amp;#8217;t you?&lt;/p&gt;

&lt;p&gt;The problem was simple:  I have a class, with a bunch of properties, and those properties have values.  In order to put them into Redis, I need to know the property name and the value it contains.  I need to know, at runtime, that myObj.SomeProperty has a property called &amp;#8220;SomeProperty&amp;#8221; and the value of that property.  This is a problem shared with most serialization tools and ORM mappers:  how does a &amp;#8220;SomeProperty&amp;#8221; make it to a column in table in a database, or make it to a node in xml?&lt;/p&gt;

&lt;p&gt;This problem can (and has been) solved in a variety of ways.  The most common was attributes to decorate classes and properties- which is how WCF constructs contracts or how some ORM toolkits work.  But that&amp;#8217;s extremely intrusive, in this pseudo example which combines WCF and DataAccess :&lt;/p&gt;

&lt;pre class=&#34;syntax c# escaped&#34;&gt;[Table(&#34;DtoTb&#34;)]
[DataContract]
public class Dto
{
     [PrimaryKey]
     [DataMember]
     public int Id { get; set; }

     [ColumnName(&#34;Name&#34;)]
     [DataMember]
     public string Name { get; set; }
}
&lt;/pre&gt;

&lt;p&gt;There&amp;#8217;s a weird combination of data storage and data definition which goes on in toolkits which use that approach.  It&amp;#8217;s not really a smooth way to operate- and the approach falls out when the model greatly diverages from the underlying table, or when a class has numerous other complex types.  Worse, when we want to also expose that class via WCF, we&amp;#8217;re essentially tacking on both data access description and web service schema description.  How many attributes can you tack on there? Validation attributes, too?&lt;/p&gt;

&lt;p&gt;Another approach is to use code-generation.  This is essentially what Linq-to-Sql does; it provides the underlying property descriptions at design time, saving a lot of manual typing.  I&amp;#8217;m not a big fan of code generators; they have their place, but you lose a lot of control in defining explicit functionality.  You&amp;#8217;re boxed into what is generated and most customizations usually don&amp;#8217;t fit in well: when you stray outside of what the code generator provides (or even outside of what the core generation is focused on) you find yourself trying to shove a square peg in a round hole.&lt;/p&gt;

&lt;p&gt;The best approach is to do what great tools like &lt;a href=&#34;https://github.com/atheken/NoRM&#34;&gt;Norm&lt;/a&gt;, &lt;a href=&#34;http://fluentnhibernate.org/&#34;&gt;Fluent NHibernate,&lt;/a&gt; &lt;a href=&#34;http://automapper.codeplex.com/&#34;&gt;AutoMapper&lt;/a&gt;, and .MVC&amp;#8217;s Html helpers do: they use &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb397687.aspx&#34;&gt;Expressions&lt;/a&gt;.  Most often the configuration is offloaded to separate classes which rely heavily on Expressions for property introspection.  This allows an end user to write code like:&lt;/p&gt;

&lt;pre class=&#34;syntax c# escaped&#34;&gt;//For MVC:
Html.TextBoxFor(m =&amp;gt; m.ProductName);
//Or for Fluent NHibernate:
Id(x =&amp;gt; x.ImageId);
&lt;/pre&gt;

&lt;p&gt;The TextBoxFor creates an input html element with a name=&amp;#8221;ProductName&amp;#8221; attribute; the Id() says NHIbernate should use a class&amp;#8217;s ImageId Property as the Id for the table.&lt;/p&gt;

&lt;p&gt;Expressions where introduced in .NET 3.5, and have been heavily leveraged ever since to provide a level of meta-programming which previously didn&amp;#8217;t exist in the .NET world.   Expressions greatly differ from Reflection by the fact Expressions are code which has been parsed into a set of various descriptive classes, while Reflection is compiled code which has been deconstructed into a descriptive semantic. An Expression statement will not actually &amp;#8220;do&amp;#8221; anything.  It can, however, be compiled into a callable function- which is the core advantage over Reflection.  With Expressions, you can have both the description of code and the actual, runnable code together.  Most frameworks create a package or container around the two as a performance optimization- it prevents an application from having to compile the expression multiple times.  The performance is much greater than using reflection to dynamically invoke or inspect properties.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How It Works&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Expressions and Lambdas go hand-in-hand, and can often be confused with one another. Let&amp;#8217;s take a look at the following code:&lt;/p&gt;

&lt;pre class=&#34;syntax c# escaped&#34;&gt;Expression&amp;lt;Func&amp;lt;SomeDto, string&amp;gt;&amp;gt; expressionLambda = m =&amp;gt; m.SomeStringProp;
Func&amp;lt;SomeDto, string&amp;gt;&amp;gt; funcLambda = m =&amp;gt; m.SomeStringProp;
&lt;/pre&gt;

&lt;p&gt;What&amp;#8217;s the difference between the two?  It&amp;#8217;s the same value, right?  Well, running that snippet in Visual Studio, and viewing the debugger properties, you&amp;#8217;ll find two different results for the m=&amp;gt;m.SomeStringProp statement. m=&amp;gt;m.SomeStringProp is the lambda: it&amp;#8217;s simply an alternative way of writing C# for various purposes. Usually, Lambdas are either Func or Action statements used as an alternative for delegate methods. The compiler will generate runnable IL code for the m =&amp;gt; m.SomeStringProp statement and create a callable method expecting an instance of SomeDto as the input. In the above example, you could get the value of a SomeStringProp using funcLambda like so:&lt;/p&gt;

&lt;pre class=&#34;syntax c# escaped&#34;&gt;var dto = new SomeDto() { SomeStringProp = &#34;Hell Yeah!&#34; };
funcLambda(dto); //Returns &#34;Hell Yeah!&#34;
&lt;/pre&gt;

&lt;p&gt;This can provide a level of agnosticism by passing around logic as variables in a much easier way than vanilla delegates.&lt;/p&gt;

&lt;p&gt;Expressions, on the other hand, don&amp;#8217;t compile into runnable IL code.  You can&amp;#8217;t write &lt;em&gt;funcExpression(dto)&lt;/em&gt; in the same was a normal lambda.  The compiler does something different: it actually parses the m=&amp;gt;m.SomeStringProp into various expression components which can be traversed, manipulated, rearranged and even compiled into a callable action, as if it were a Func all along. The]&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb506649.aspx&#34;&gt;4&lt;/a&gt; has all of the available types a lambda expression can be broken down into.  Essentially, a hierarchal tree is generated, with each distinct component of the lambda expression being represented by one of the many Expression classes.  These &lt;span style=&#34;font-size: 13.2px;&#34;&gt;classes can be used to inspect various aspects of that part.  The above lambda is simply a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.linq.expressions.memberexpression.aspx&#34;&gt;MemberExpression&lt;/a&gt;, which is used for field and properties. Using MemberExpressions you can get the name of the Member, the Property Type, you can use the NodeType property- that&amp;#8217;s available with all Expression classes- to learn that it&amp;#8217;s a MemberAccess call.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-size: 13.2px;&#34;&gt;Because Expressions can be compiled into runnable code, frameworks get the best of both worlds: metadata about the call, and the call itself.  This is the precisely how ASP.NET MVC Html Helpers are built: that TextBoxFor method takes in an expression which it uses to generate the Html output. The Html helpers in MVC inspect the input expression to figure out what the name of the property for the html name attribute value, and then it runs the compiled expression against the current ViewModel object to get the value for the value html attribute.  The expression metadata and compiled function is actual cached in various static classes for performance: you don&amp;#8217;t want to have to compile the expression every time you use it.  The performance is much better than using reflection alone.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Redaculous is using Expressions to avoid the magic string conundrum- by using expressions, Redaculous can parse a statement like &amp;#8220;m = m.Name&amp;#8221; and know it should put the value of a class&amp;#8217;s Name property in the store using a key involving the word &amp;#8220;Name&amp;#8221; in some way. You should explore the &lt;a href=&#34;http://aspnet.codeplex.com/wikipage?title=MVC&amp;amp;referringTitle=Home&#34;&gt;MVC Framework&amp;#8217;s source code&lt;/a&gt; to dig in to how they&amp;#8217;re using expressions for strongly typed helpers. Both Norm and Automapper have some pretty straightforward usage too. By inspecting how other tools use these features you can more easily integrate them into your own projects- and increase productivity by eliminating redundant code and code smells involving magic strings.&lt;/p&gt;

&lt;p&gt;Other languages, like Ruby, have a similar level of functionality built in. This is inherit in all dynamic languages: functionality to not only provide an operation, but functionality to describe that operation as well.  I still get some hits on my &lt;a href=&#34;http://www.michaelhamrah.com/blog/2009/02/digging-into-ruby-on-rails-from-c-and-mvc-aspnet-mvc/&#34;&gt;ASP.NET MVC and Rails&lt;/a&gt; article, and I&amp;#8217;d say one of the biggest differences is how Rails, and Ruby in general, use dynamic language features like code metadata to drive functionality.  .NET has always had reflection, but expressions provide a much easier, and much more performant way of dealing with meta-programming.  &lt;span style=&#34;font-size: 13.2px;&#34;&gt;Expressions provide a core of the functionality in the Dynamic Language Runtime and have always been a strong part of Linq&amp;#8217;s roots.  DLR capabilities, using expressions, will continue to increase its surface area in the .NET world and should be a part of any developers toolkit.&lt;/span&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>QuickTip: Use CommonServiceLocator and MvcServiceLocator together in ASP.NET MVC 3 Pre-Release Projects</title>
          <link>http://blog.michaelhamrah.com/2010/09/quicktip-use-commonservicelocator-and-mvcservicelocator-together-in-asp-net-mvc-3-projects/</link>
          <pubDate>Thu, 23 Sep 2010 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2010/09/quicktip-use-commonservicelocator-and-mvcservicelocator-together-in-asp-net-mvc-3-projects/</guid>
          <description>&lt;p&gt;&lt;strong&gt;UPDATE: This post is outdated since ASP.NET MVC Beta.  Use the DependencyResolver static class instead.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The integration of the CommonServiceLocator pattern within ASP.NET MVC is a positive step forward for the .MVC framework. Dependency management via ServiceLocation is a smart way to go, especially for large codebases with complex dependency needs. ServiceLocation keeps constructors clean, and prevents bloat in higher-level classes which don&amp;#8217;t need to know about lower-level dependencies.&lt;/p&gt;

&lt;p&gt;However, the fact that .MVC now has its own ServiceLocation infrastructure, via the System.Web.Mvc.IServiceLocator interface, is a little troublesome for code which already uses the Microsoft CommonServiceLocator class found in the Unity Enterprise Application Block. But don&amp;#8217;t fret- luckily, the IServiceLocator interface is exactly the same in the System.Web.Mvc namespace and the Microsoft.Practices.ServiceLocation namespace. This means you can have one class implement both interface simultaneously, like so:&lt;/p&gt;

&lt;pre class=&#34;brush: csharp; title: ; notranslate&#34; title=&#34;&#34;&gt;public class  SomeServiceLocatorWrapper : System.Web.Mvc.IServiceLocator, Microsoft.Practices.ServiceLocation.IServiceLocator
{
 //Implicity Implementation of Methods
}
&lt;/pre&gt;

&lt;p&gt;What&amp;#8217;s even easier is when there&amp;#8217;s already a wrapper class around the IServiceLocator for you, such as the one provided by Unity via the UnityServiceLocator class in Microsoft.Practices.Unity&amp;#8217;s namespace. The following code below provides all the functionality you need to use both ServiceLocators:&lt;/p&gt;

&lt;pre class=&#34;brush: csharp; title: ; notranslate&#34; title=&#34;&#34;&gt;public class UnityMvcServiceLocator : UnityServiceLocator, System.Web.Mvc.IServiceLocator
{
 public UnityMvcServiceLocator(IUnityContainer container)
 : base(container)
 {

 }

}
&lt;/pre&gt;

&lt;p&gt;Once you have that class in place, then it&amp;#8217;s just a matter of hooking both up in your Global.asax file like so:&lt;/p&gt;

&lt;pre class=&#34;brush: csharp; title: ; notranslate&#34; title=&#34;&#34;&gt;//In Global.asax&#39;s Application_Start hook:
var container = UnityContainerBuilder.CreateContainer();
var locator = new UnityMvcServiceLocator(container);

ServiceLocator.SetLocatorProvider(() =&amp;gt; locator);
MvcServiceLocator.SetCurrent(locator);
&lt;/pre&gt;

&lt;p&gt;This allows you to access the same locator either via the MvcServiceLocator.Current instance or the ServiceLocator.Current instance.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Prevent Js and Css Browser Caching Issues with ASP.NET</title>
          <link>http://blog.michaelhamrah.com/2009/03/prevent-js-and-css-browser-caching-issues-with-aspnet/</link>
          <pubDate>Mon, 02 Mar 2009 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2009/03/prevent-js-and-css-browser-caching-issues-with-aspnet/</guid>
          <description>&lt;p&gt;You&amp;#8217;ve seen this problem before- you deploy a new version of your website but the style is off and you&amp;#8217;re getting weird javascript errors. You know the issue: Firefox or IE is caching and old version of the css/js file and it&amp;#8217;s screwing up the web app. The user needs to clear the cache so the latest version is pulled. The solution: versionstamp your include files!&lt;/p&gt;

&lt;p&gt;Take a lesson from Rails and create a helper which appends a stamp to your include files (and takes care of the other required markup). It&amp;#8217;s simple- embed the following code in your views:&lt;/p&gt;

&lt;pre class=&#34;brush: csharp; title: ; notranslate&#34; title=&#34;&#34;&gt;&amp;lt;%=SiteHelper.JsUrl(&#34;global.js&#34;) %&amp;gt;
&lt;/pre&gt;

&lt;p&gt;will render&lt;/p&gt;

&lt;pre class=&#34;brush: xml; title: ; notranslate&#34; title=&#34;&#34;&gt;&amp;lt;script type=&#34;text/javascript&#34; src=&#34;http://blog.michaelhamrah.com/content/js/global.js?33433651&#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;p&gt;The browser will invalidate the cache because of the new query string and you&amp;#8217;ll be problem free. Version stamps are better than timestamps because the version will only change if you redeploy your site.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s the code, which is based on the AppHelper for Rob Conery&amp;#8217;s Storefront MVC:&lt;/p&gt;

&lt;pre class=&#34;brush: csharp; title: ; notranslate&#34; title=&#34;&#34;&gt;using System.Reflection;
using System.Web.Mvc;

namespace ViewSample
{
public static class SiteHelper
{
private static readonly string _assemblyRevision = Assembly.GetExecutingAssembly().GetName().Version.Build.ToString() + Assembly.GetExecutingAssembly().GetName().Version.Revision.ToString();

/// &amp;lt;summary&amp;gt;
/// Returns an absolute reference to the Content directory
/// &amp;lt;/summary&amp;gt;
public static string ContentRoot
{
get
{
return &#34;/content&#34;;
}
}

/// &amp;lt;summary&amp;gt;
/// Builds a CSS URL with a versionstamp
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&#34;cssFile&#34;&amp;gt;The name of the CSS file&amp;lt;/param&amp;gt;
public static string CssUrl(string cssFile)
{

string result = string.Format(&#34;&amp;lt;link rel=&#39;Stylesheet&#39; type=&#39;text/css&#39; href=&#39;{0}/css/{1}?{2}&#39; /&amp;gt;&#34;, ContentRoot, cssFile, _assemblyRevision);
return result;
}
/// &amp;lt;summary&amp;gt;
/// Builds a js URL with a versionstamp
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&#34;cssFile&#34;&amp;gt;The name of the CSS file&amp;lt;/param&amp;gt;
public static string JsUrl(string jsPath)
{
return string.Format(&#34;&amp;lt;script type=&#39;text/javascript&#39; src=&#39;{0}/js/{1}?{2}&#39;&amp;gt;&amp;lt;/script&amp;gt;&#34;, ContentRoot, jsPath, _assemblyRevision);
}

}
}

&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Tips for Managing ASP.NET MVC Views</title>
          <link>http://blog.michaelhamrah.com/2009/02/tips-for-managin-aspnet-mvc-views/</link>
          <pubDate>Wed, 25 Feb 2009 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2009/02/tips-for-managin-aspnet-mvc-views/</guid>
          <description>&lt;p&gt;After working on an ongoing ASP.NET MVC project for a couple of months I&amp;#8217;ve learned a couple of lessons when it comes to dealing with Views.  Keep as much logic out of the views as possible! This can be tricky because it&amp;#8217;s so easy to let code sneak into your views. But by following the tips below you&amp;#8217;ll be able to keep your logic organized and views clean.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) Follow the Rails pattern of having a Helper class for each controller.  The helper class deals with html snippets or formatting functions on a per controller level.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i1.wp.com/www.michaelhamrah.com/blog/wp-content/uploads/2009/02/helpersfolder.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-174&#34; title=&#34;ASP.NET MVC Helpers&#34; src=&#34;http://i1.wp.com/www.michaelhamrah.com/blog/wp-content/uploads/2009/02/helpersfolder.png?resize=211%2C159&#34; alt=&#34;ASP.NET MVC Helpers&#34; data-recalc-dims=&#34;1&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pushing out bits of code like date formatting into helper classes not only cleans up the views, but aids in testability.  Logic is consolidated in one place simplifying maintenance.  Creating Helpers on a per controller level also creates a namespace where functionality can be found intuitively.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Don&amp;#8217;t overload the Html helper with one-off functions. Organize functions into their respective helper classes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s so easy to want to add extension methods to the HtmlHelper class.  It&amp;#8217;s like a siren crying out &amp;#8220;do it, do it&amp;#8221;.  This is bad!  Extension methods are good for some things, but can easily garble an API.  The HtmlHelper class should be reserved for rendering core html elements.  As an alternative, leverage helper classes you create on a per-controller basis.&lt;/p&gt;

&lt;pre class=&#34;syntax c#&#34;&gt;//These shouldn&#39;t belong to HtmlHelper!
public static string ShowSomethingOnlyForHomeController((this HtmlHelper helper) ...
public static string RenderDateTimeNowInSpan(this HtmlHelper helper) ...&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3) Leverage partial views for iterative content, even if it&amp;#8217;s not reused elsewhere (hint: it probably will be eventually).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So instead of:&lt;/p&gt;

&lt;pre class=&#34;syntax c#&#34;&gt;&amp;lt;%= foreach (var photo in photos)
{ %&gt;


&lt;div class=&#34;photo&#34;&gt;
  &lt;span&gt;&amp;lt;%= photo.Name %&gt;&lt;/span&gt;
  
  
  &lt;p&gt;
    &amp;lt;%= photo.Description %&gt;
  &lt;/p&gt;
  
  
  &lt;p&gt;
    &amp;lt;%= photo.Date %&gt;
  &lt;/p&gt;
  
&lt;/div&gt;
&amp;lt;%= } %&gt;
&lt;/pre&gt;

&lt;p&gt;use:&lt;/p&gt;

&lt;pre class=&#34;syntax c#&#34;&gt;&amp;lt;% foreach (var photo in photos)
{ %&gt;
&amp;lt;% Html.RenderPartial(&#34;~/Views/Photos/PhotoTemplate&#34;, photo); %&gt;
&amp;lt;% } %&gt;
&lt;/pre&gt;

&lt;p&gt;This will greatly minimize the amount of markup scattered throughout a view, keeping view files focused on a specific task (just like good class design).  It&amp;#8217;ll also make version control easier because changes will be isolated to their respective file, allowing someone to better see what changes happened where.  It also eliminates excessive merging.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) Organize partial views within their respective controller, not a shared folder- even if it&amp;#8217;s a global skin.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Dumping partials within a shared folder can cause overcrowding and jumbling in the long term.  Prefer organization and grouping of related content (again, just like good class design).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5) Prefer a strongly typed view and leverage specialized ViewData types for aggregating random models under one root.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It can be easy to dump stuff into the ViewData hash.  However, prefer using a custom ViewData class instead.  It&amp;#8217;s easier to know what data is available for the view.  This is a lot more intuitive than rummaging through a controller, which happens when teams share code.  Also leverage the &lt;a href=&#34;http://en.wikipedia.org/wiki/Null_Object_pattern&#34;&gt;null object pattern&lt;/a&gt; for properties to avoid having to do null reference checks in the views.&lt;/p&gt;

&lt;p&gt;Instead of:&lt;/p&gt;

&lt;pre class=&#34;syntax c#&#34;&gt;ViewData[&#34;Title&#34;] = &#34;My Photos&#34;;
ViewData[&#34;Photos&#34;] = myPhotos;
ViewData[&#34;User&#34;] = currentUser;

return View();
&lt;/pre&gt;

&lt;p&gt;use:&lt;/p&gt;

&lt;pre class=&#34;syntax c#&#34;&gt;//Title and User can be properties of a base view data class.
var vd = new PhotoListViewData() 
     { Photos = myPhotos, Title = &#34;My Photos&#34;, User = currentUser };
return  View(vd);

//Sample null object pattern (always returns a valid object, so no if null or Count == 0):
private List&amp;lt;Photo&gt; _photos = new List&amp;lt;Photo&gt;();
public List&amp;lt;Photo&gt; Photos 
{ 
get 
     { if (_photos == null) _photos = new List&amp;lt;Photo&gt;(); 
            return _photos; 
     } 
set { 
        _photos = value; } 
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;6) Minimize code snippets in views.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Code snippets occur in many ways.  They can be as simple as formatting a date, to string concatenation, to even doing a grouping/projection to get data correct.  Doing this in a view easily leads to bugs and isn&amp;#8217;t testable.  Any data processing specifically for views should occur in the controller action, custom ViewData object itself, or in a helper class.  Code in views should be simplified to looping, calling a property, or calling a single method.  Anything more than that will get you into trouble!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leverage RenderAction or MvcContrib&amp;#8217;s SubController for dealing with shared isolated functionality not relevant to a view.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, as of RC1 there still isn&amp;#8217;t a great way to deal with aggregating disparate content in an action.  You&amp;#8217;ll need to resort to the RenderAction in the Future&amp;#8217;s dll or use MvcContrib&amp;#8217;s SubController.  The point is the same- keep actions specific to what you&amp;#8217;re doing.  If you need to aggregate disparate content in a view (like a menu in the header, or a shopping cart) offload functionality into an action and call RenderAction.  Having actions do multiple, random things leads to messy code.  Prefer a single point of entry into supporting view content.&lt;/p&gt;

&lt;p&gt;Good luck and share your tips!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fwww.michaelhamrah.com%2fblog%2findex.php%2f2009%2f02%2ftips-for-managin-aspnet-mvc-views%2f&#34;&gt;&lt;img src=&#34;http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fwww.michaelhamrah.com%2fblog%2findex.php%2f2009%2f02%2ftips-for-managin-aspnet-mvc-views%2f&amp;bgcolor=0000FF&#34; border=&#34;0&#34; alt=&#34;kick it on DotNetKicks.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Digging into Ruby on Rails from C# and .MVC (Asp.Net MVC)</title>
          <link>http://blog.michaelhamrah.com/2009/02/digging-into-ruby-on-rails-from-c-and-mvc-aspnet-mvc/</link>
          <pubDate>Wed, 18 Feb 2009 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2009/02/digging-into-ruby-on-rails-from-c-and-mvc-aspnet-mvc/</guid>
          <description>&lt;p&gt;One of the things I&amp;#8217;ve been doing lately is digging into Ruby on Rails. I&amp;#8217;ve always wanted to learn Rails since I was first exposed to Rails at an AjaxWorld conference in &amp;#8217;06 (at least, I think in 06). David Heinemeier Hansson actually presented!&lt;/p&gt;

&lt;p&gt;Alas, I never could devote enough time to get past the tipping point. I&amp;#8217;m comfortable with C# and ASP.NET and evolving those skills has always been the priority. But the perfect storm has happened recently- in order to save space in my apartment, I got rid of my PC desktop and now only use my MacBook. I got tired of using Parallels and Visual Studio, and a new project came up in which I could either use ASP.NET MVC (which I&amp;#8217;m calling .MVC from now on) or RoR. I thought it was time to finally try RoR.&lt;/p&gt;

&lt;p&gt;The verdict is Rails is great. I still can&amp;#8217;t &amp;#8220;express&amp;#8221; myself as well as I want to with Rails, but in comparison to .MVC Rails is pretty slick, and the evolution of Rails (specifically, &lt;a href=&#34;http://rubyonrails.org/merb&#34;&gt;combining Merb with Rails&lt;/a&gt;) is pretty exciting.  Most importantly, learning Rails has actually made me a better C#/ASP.NET MVC developer- if you&amp;#8217;re working with .MVC you have to spend at least an afternoon playing around with Rails- you&amp;#8217;ll get an invaluable perspective on MVC and web programming.&lt;/p&gt;

&lt;p&gt;Now, a discussion on any programming language/framework always causes a heated debated.  I&amp;#8217;m not an expert (or even a beginner) on Ruby or Rails, but these are my initial impressions.&lt;/p&gt;

&lt;p&gt;**Ruby, as a Language&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;One major leap between .MVC and Rails is Ruby as a language. Yes, Ruby and C# are both OO languages, but Ruby is a &lt;a href=&#34;http://en.wikipedia.org/wiki/Dynamic_programming_language&#34;&gt;dynamic language&lt;/a&gt;&amp;#8211; and if you&amp;#8217;re up on C# 4.0, you&amp;#8217;ll know that C# is on it&amp;#8217;s way to &lt;a href=&#34;http://ironpython-urls.blogspot.com/2008/12/c-becomes-dynamic-language.html&#34;&gt;becoming a dynamic language too&lt;/a&gt;. So if you want keep your C# skills on the cutting edge, get a head start on a full fledged dynamic language!&lt;/p&gt;

&lt;p&gt;I originally made the mistake of jumping in and assuming Ruby was more vb- or js- esque than it actually was.  It&amp;#8217;s pretty smart in the way it behaves, almost a tailored version of C#.  Ruby&amp;#8217;s use of &lt;a href=&#34;http://glu.ttono.us/articles/2005/08/19/understanding-ruby-symbols&#34;&gt;symbols&lt;/a&gt; is pretty big difference over other languages that&amp;#8217;s extensively used in Rails and pretty handy.&lt;/p&gt;

&lt;p&gt;Lambda expressions are also core part of Ruby, and are becoming a more integral part of C#.  This allows Ruby to be extremely concise in getting things done- which is awesome when you know what you&amp;#8217;re doing.  When you don&amp;#8217;t it can be confusing.  But lambdas make sense and are awesome when you know how to use them- and knowing Ruby can help you grasp lambda expressions in C#.&lt;/p&gt;

&lt;p&gt;Rails leverages Ruby&amp;#8217;s dynamic language to make a lot happen under the hood.  I personally found letting the Rails framework do its thing as one of the biggest hurdles in learning Rails.  I wanted to either program or explicitly orchestrate everything!  One prime example is the persistence model in Rails-  I struggled to figure out how properties where set in models from migration classes- but it&amp;#8217;s entirely automatic!  Also, a lot of methods are created dynamically.  This allows an extremely fluid expression in writing code, making Ruby a pretty natural programming language.  (Example: the find_by ActiveRecord methods; declaring links like edit_xxx_path).&lt;/p&gt;

&lt;p&gt;C# is making its way into being a more fluid programming language similar to Ruby.  Meaning, writing code and describing code are converging to be the same thing.  This is seen in lambda expressions and fluent interfaces, where you can daisy chain methods together.  &lt;a href=&#34;http://code.google.com/p/moq/&#34;&gt;Moq&lt;/a&gt; is a good example of the fluent interface approach.  I wouldn&amp;#8217;t be surprised if there&amp;#8217;s even a larger convergence with C# and Ruby in the years to come.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rails, as a Framework&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Those in the .NET world who follow &lt;a href=&#34;http://codebetter.com/blogs/jeremy.miller/&#34;&gt;Jeremy Miller&lt;/a&gt; have probably heard the term of &lt;a href=&#34;http://codebetter.com/blogs/jeremy.miller/archive/2008/10/23/our-opinions-on-the-asp-net-mvc-introducing-the-thunderdome-principle.aspx&#34;&gt;opinionated software.&lt;/a&gt; He talks about opinionated software in the context of &lt;a href=&#34;http://code.google.com/p/fubumvc/&#34;&gt;FubuMVC&lt;/a&gt;, an alternative to .MVC written in an opinionated style.  It&amp;#8217;s worth checking out- it&amp;#8217;s very interesting to use but Rails still cracks the MVC shell wide open because it leverages Ruby&amp;#8217;s language features.&lt;/p&gt;

&lt;p&gt;Opinionated software originally came from the Adam and Eve of Rails, &lt;a href=&#34;http://gettingreal.37signals.com/ch04_Make_Opinionated_Software.php&#34;&gt;37Signals&lt;/a&gt;.  Rails is highly opinionated- which is a blessing and curse.  The great thing about Rails is that it does what it does extremely well.  The MVC triangle are completely separate but seamlessly integrated, and extension points are explicit.  It&amp;#8217;s how MVC should be- and .MVC doesn&amp;#8217;t come close to Rails as an MVC framework.  Hate NHibernate configuration?  You&amp;#8217;ve never seen an ORM framework until you&amp;#8217;ve used ActiveRecord.  Really want to abandon code-behind files and excessive code in views? Really want to do TDD (and even BDD)?  Rails right now is the iPhone in a tin cup and string world.&lt;/p&gt;

&lt;p&gt;Here are some highlights:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Respond_to method for rendering html, xml, json or whatever from a single controller.  .MVC ActionResult could learn a thing or two.&lt;/li&gt;
&lt;li&gt;Rails&amp;#8217; partial layouts, partial actions and partial views are pretty slick compared .MVC&amp;#8217;s master pages, partial views, and partial layouts.  A prime example is using Rails partial views to render a collection of objects.&lt;/li&gt;
&lt;li&gt;Passing data between controllers and actions is a lot slicker than .MVC ViewData&lt;/li&gt;
&lt;li&gt;Rails helpers are a lot more helpful.&lt;/li&gt;
&lt;li&gt;Rails is pretty slick when it comes to mapping between posted data and Models- a lot better than binders.&lt;/li&gt;
&lt;li&gt;And of course, Rails&amp;#8217; database integration will make you wonder why you ever spent more than 5 minutes learning about databases- it&amp;#8217;s such a model centric approach with migrations you&amp;#8217;ll hate doing any data tier work in .MVC.  (Although learning databases are extremely important no matter what language/framework you use).&lt;/li&gt;
&lt;li&gt;Plugins.  Rails Plugins are simply awesome- extremely fluid integration into your Rails application.  And combining plugins and other support with gem makes maintenance and upgrades a breeze (forget the GAC!)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Where .MVC Shines&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve been hyping up Rails a lot, but there is a major disadvantage with Rails: good luck straying from the Rails track.  If you get off the train, you&amp;#8217;re walking alone.  This is something .MVC does well- allows you to change the game with whatever architecture pattern you wish.  It&amp;#8217;s one reason I love .NET- you can do literally do whatever want (yes, you can whatever you want with any language, but the .NET framework is pretty awesome).  .MVC is extremely extensible- from replaceable view engines, routing engines, controller factories, coupled with whatever architecture pattern you want.  And all very testable.  C#&amp;#8217;s usage of extension methods also add pretty nice extensibility to classes, too.&lt;/p&gt;

&lt;p&gt;In fact, Rails&amp;#8217; plans to integrate with Merb as way to be more modular is a prime example of something .MVC already does well- allows you to mix and match what you want instead of forcing conformance.  Allowing total and explicit control over the application stack- including your architecture- is a great advantage in maintaining the health of ongoing software. Yes, you can evolve Rails to do what you want, but the transparency .NET offers is something I don&amp;#8217;t see in Rails just yet.  It&amp;#8217;s definitely a pro and a con- on the one hand, Rails offers fluid interaction between components.  On the other, .NET doesn&amp;#8217;t force you into any specific pattern.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The bottom line is, check out Rails.  The best way to get started is with &lt;a href=&#34;http://guides.rails.info/&#34;&gt;the Rails guides&lt;/a&gt;.  From a .MVC perspective, you&amp;#8217;ll learn a lot about MVC and what an MVC framework can do- and it will help you out in your .NET development.  Knowing Ruby will also keep your C# skills sharp and help you in becoming a well rounded developer.  I&amp;#8217;ll even bet you carry over some Rails tricks to your next .MVC app!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fwww.michaelhamrah.com%2fblog%2findex.php%2f2009%2f02%2fdigging-into-ruby-on-rails-from-c-and-mvc-aspnet-mvc%2f&#34;&gt;&lt;img src=&#34;http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fwww.michaelhamrah.com%2fblog%2findex.php%2f2009%2f02%2fdigging-into-ruby-on-rails-from-c-and-mvc-aspnet-mvc%2f&amp;#038;bgcolor=000099&#34; border=&#34;0&#34; alt=&#34;kick it on DotNetKicks.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Saving dynamically added list items using jQuery and ASP.NET MVC</title>
          <link>http://blog.michaelhamrah.com/2008/12/saving-dynamically-added-list-items-using-jquery-and-aspnet-mvc/</link>
          <pubDate>Mon, 15 Dec 2008 00:00:00 UTC</pubDate>
          <author>Michael Hamrah</author>
          <guid>http://blog.michaelhamrah.com/2008/12/saving-dynamically-added-list-items-using-jquery-and-aspnet-mvc/</guid>
          <description>&lt;p&gt;There are going to be times when you want to allow a user to enter multiple copies of a single form on a web page.  This frequently happens when adding items to a list- like products in a shopping cart or tasks in a task list.  You want the user to add as many &amp;#8220;items&amp;#8221; as they want to the list, then save the entire list at once.&lt;/p&gt;

&lt;p&gt;Dynamically adding elements to a page is easy with jQuery, but parsing out list items on the server can be difficult- especially when you don&amp;#8217;t know how many items are on the page!   Things get even trickier when the number of input controls for each item increases- you have to keep all these input controls in sync so each item gets saved correctly.  Luckily, ASP.NET MVC has &lt;a href=&#34;http://haacked.com/archive/2008/10/23/model-binding-to-a-list.aspx&#34; target=&#34;_blank&#34;&gt;a built in feature to pull out a list of complex types posted to a page&lt;/a&gt; and automatically put them in a model.  We&amp;#8217;re going to combine this feature with jQuery to dynamically add form elements on a page which end up in a list of complex types that can be accessed in a controller action.&lt;/p&gt;

&lt;p&gt;In our example,  a user will be creating a shopping list and will  have the ability to add items to the shopping list dynamically.  When the user hits &amp;#8220;Save&amp;#8221; the entire list with all items will be posted to the server and serialized into a ShoppingList model.&lt;/p&gt;

&lt;p&gt;We&amp;#8217;re going to use:&lt;/p&gt;

&lt;pre class=&#34;syntax html&#34;&gt;&lt;ul&gt;
  &lt;li&gt;
    jQuery to dynamically drive the client side and dynamically add list items
  &lt;/li&gt;
    
  
  &lt;li&gt;
    ASP.NET MVC as our web infrastructure
  &lt;/li&gt;
    
  
  &lt;li&gt;
    The DefaultModelBinder to build a list of complex types which can be passed to an action method.
  &lt;/li&gt;
  
&lt;/ul&gt;
&lt;/pre&gt;

&lt;p&gt;Our model is simple- we have a ShoppingList with properties of Name and ShoppingItems:&lt;/p&gt;

&lt;pre class=&#34;syntax c#&#34;&gt;public class ShoppingList
{
public string ListName { get; set; }
public IList&amp;lt;ShoppingItem&gt; Items { get; set; }
}

public class ShoppingItem
{
public string Name { get; set; }
public int Quantity { get; set; }
}

&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Posting Multiple Items At Once&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The key to this feature is posting multiple related elements which end up in a list.  In order for the DefaultModelBinder to build a list, we have to post elements in a certain way.  Essentially, each set of related input elements are grouped together using a uniquer key.  The key can be any string- it doesn&amp;#8217;t have to be an integer index.&lt;/p&gt;

&lt;p&gt;Keys are specified with a hidden input element.  In our sample, we want our list to end up in the myList.Items property.  So for every object in the Items list, we need a hidden input field with a name of &amp;#8220;myList.Items.Index&amp;#8221;.  The key we specify for the element will be the key we use in the name attribute the input element.  If our key is &amp;#8220;foo&amp;#8221;, and our property is &amp;#8220;Quantity&amp;#8221;, we&amp;#8217;ll have:&lt;/p&gt;

&lt;pre class=&#34;syntax html&#34;&gt;&lt;input type=&#34;hidden&#34; name=&#34;myList.Items.Index&#34; value=&#34;foo&#34; /&gt;

&lt;input type=&#34;hidden&#34; name=&#34;myList.Items[foo].Quantity&#34; value=&#34;5&#34; /&gt;

[/pre]

Even though we couldn&#39;t do that in c#, we can do it in our markup.  Think of keys for a hashtable- the key can be anything you want.  The hashtable is a list of the complex type your building, so typing hashtable[&#34;myKey&#39;] returns the complex type, and you have access to all properties of that type.

I&#39;ve created a unit test which shows off this magic for multiple items:



&lt;pre class=&#34;syntax c#&#34;&gt;

shoppingController.Request.Form.Add(&#34;myList.ListName&#34;, &#34;My Shopping List&#34;);
shoppingController.Request.Form.Add(&#34;myList.Items.Index&#34;, &#34;1&#34;);
shoppingController.Request.Form.Add(&#34;myList.Items[1].Name&#34;, &#34;Chocolate&#34;);
shoppingController.Request.Form.Add(&#34;myList.Items[1].Quantity&#34;, &#34;5&#34;);
shoppingController.Request.Form.Add(&#34;myList.Items.Index&#34;, &#34;Alpha&#34;);
shoppingController.Request.Form.Add(&#34;myList.Items[Alpha].Name&#34;, &#34;Graham Crackers&#34;);
shoppingController.Request.Form.Add(&#34;myList.Items[Alpha].Quantity&#34;, &#34;10&#34;);

&lt;/pre&gt;

&lt;p&gt;
  Notice how we&#39;re passing multiple &#34;myList.Items.Index&#34; values.  Don&#39;t worry- they won&#39;t overwrite eachother.  Servers turn multiple name values into a comma delimited list (you&#39;ll end up with: &#34;1,Alpha&#34; has your values for &#34;myList.Items.Index&#34;.  All the DefaultModelBinder is doing is parsing the list of  keys for whatever array you want, then matching those values to the form package. My naming convention of myList.Items is simply allowing the myList parameter in the controller action to be populated correctly by the DefaultModelBinder.
&lt;/p&gt;

&lt;p&gt;
  To reiterate, the indexer I use for each array object is simply grouping related html elements together- Graham Crackers has a quantity of 10 because I&#39;m using the same indexer for each name: Items[Alpha].Name and Items[Alpha].Quantity, just like a hashtable.
&lt;/p&gt;

&lt;p&gt;
  The rest of the unit test shows how the DefaultModelBinder will build the ShoppingList Item&#39;s property using these form values:
&lt;/p&gt;

&lt;pre class=&#34;syntax c#&#34;&gt;

var defaultBinding = ModelBinders.GetBinder(typeof(ShoppingList));
var bindingContext = new ModelBindingContext(shoppingController.ControllerContext,
shoppingController.ValueProvider,
typeof(ShoppingList),
&#34;myList&#34;, null, shoppingController.ModelState, null);
var binderResult = defaultBinding.BindModel(bindingContext);

Assert.IsNotNull(binderResult);
Assert.IsNotNull(binderResult.Value);
Assert.IsInstanceOfType(binderResult.Value, typeof(ShoppingList));

var myList = binderResult.Value as ShoppingList;

Assert.IsTrue(myList.ListName == &#34;My Shopping List&#34;);
Assert.IsTrue(myList.Items.Count &gt; 0);
Assert.IsTrue(myList.Items[0].Name == &#34;Chocolate&#34;);
Assert.IsTrue(myList.Items[0].Quantity == 5);

Assert.IsTrue(myList.Items[1].Name == &#34;Graham Crackers&#34;);
Assert.IsTrue(myList.Items[1].Quantity == 10);

&lt;/pre&gt;

&lt;p&gt;
  &lt;strong&gt;The View&lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;
  I want a button to &#34;add another item&#34; to the shopping list.  If the user clicks this button, two new textboxes should appear: one for name, and another for quantity.  These need to have the same indexer.  When the page first loads, there should already be an item to enter.
&lt;/p&gt;

&lt;p&gt;
  I have a couple of choices to build this logic.  I could specify one set of input elements in the view, and use jQuery to add individual elements to the DOM when the user hits the button.  I don&#39;t like this idea because it means I have two places to build the list items: one in the view, the other in jQuery.  When you build the same code in multiple places, you&#39;re going to get discrepancies, which lead to bugs-  I guarantee it. I could use jQuery to add the default form when the page loads, but I don&#39;t like this- html is easy and simply, it allows me to see what I&#39;m doing.  It&#39;s much easier to write html than write javascript to build html.
&lt;/p&gt;

&lt;p&gt;
  Instead, I&#39;m going for a partial view approach using actions.  By putting the injected section of markup into its own UserControl with a controller action I can embed the markup in the parent view and use ajax to get the rendered html snippet to the client via a url.  I can also choose how to generate the indexer in the action method&#39;s body: I&#39;m going to use Guids.  With Guids, I won&#39;t have to track any other indexers- I&#39;m guaranteed a unique value I can use for all the related elements in the partial view.  Here&#39;s the markup:
&lt;/p&gt;

&lt;p&gt;
  The parent view, which the user sees on load:
&lt;/p&gt;

&lt;pre class=&#34;syntax html&#34;&gt;



&lt;/pre&gt;

&lt;p&gt;
  The partial view for each item:
&lt;/p&gt;

&lt;pre class=&#34;syntax html&#34;&gt;



&lt;div class=&#34;itemContent&#34;&gt;
  &amp;lt;input type=&#34;hidden&#34; name=&#34;&amp;lt;%= ViewData[&#34;Prefix&#34;] + &#34;.Index&#34; %&gt;&#34; value=&#34;&amp;lt;%=ViewData[&#34;GUID&#34;] %&gt;&#34; /&gt;
  &lt;label&gt;Item: &lt;/label&gt;&amp;lt;input type=&#34;text&#34; name=&#34;&amp;lt;%= ViewData[&#34;Prefix&#34;]  + &#34;[&#34; + ViewData[&#34;GUID&#34;] + &#34;].Name&#34; %&gt;&#34; /&gt;
  &lt;br /&gt;
  &lt;label&gt;Quantity: &lt;/label&gt;&amp;lt;input type=&#34;text&#34; name=&#34;&amp;lt;%= ViewData[&#34;Prefix&#34;] + &#34;[&#34; + ViewData[&#34;GUID&#34;] + &#34;].Quantity&#34; %&gt;&#34; /&gt;
  &lt;br /&gt;
  
&lt;/div&gt;

&lt;/pre&gt;

&lt;p&gt;
  I chose to make the &#34;prefix&#34; I need a variable so I can potentially use this same view in other forms if needed.  I may want to put this form somewhere else, where the server argument isn&#39;t myList, but something else- I could forgo a parameter of ShoppingList and want to post a list of ShoppingItems.  This is useful when adding some sort of &#34;update&#34; feature in another section of page- say, when I already have a ShoppingList and I&#39;m updating with a new list of items.
&lt;/p&gt;

&lt;p&gt;
  On the client side I simply wire up my button to request the html snippet from the server and inject that snippet with jQuery:
&lt;/p&gt;

&lt;pre class=&#34;syntax js&#34;&gt;

$(document).ready(function() {
$(&#34;#btnAddAnother&#34;).click(function() {
$.ajax(
{
type: &#34;GET&#34;,
url: &#34;/Shopping/ShoppingItemFormContent/myList.Items&#34;,
success: function(result) {
var toInject = $(result);
$(&#34;#itemContainer&#34;).append(toInject);
}
});

})

});

&lt;/pre&gt;

&lt;p&gt;
  There&#39;s something I don&#39;t like about this: I need to call the server every time I need a view.  This isn&#39;t that snappy, and could create a lot of chatter with the server.  There&#39;s a way around this for brevity I&#39;m only going to explain: render the indexer as a specific value which can be parsed out and replaced with something else later.  My original goal is only wanting one place to specify markup: I do not want to have to duplicate code across a project.  But that shouldn&#39;t mean I need to call the server every time I need an html snippet.  I could make the snippet regular html which can be cached, then use a string or regular expression replace function to replace the hard coded indexer with something unique.
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&#34;http://michaelhamrah.com/blog/wp-content/uploads/postingalist.zip&#34;&gt;You can download the sample project here.&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&#34;http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fwww.michaelhamrah.com%2fblog%2findex.php%2f2008%2f12%2fsaving-dynamically-added-list-items-using-jquery-and-aspnet-mvc%2f&#34;&gt;&lt;img src=&#34;http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fwww.michaelhamrah.com%2fblog%2findex.php%2f2008%2f12%2fsaving-dynamically-added-list-items-using-jquery-and-aspnet-mvc%2f&amp;#038;bgcolor=0000CC&#34; border=&#34;0&#34; alt=&#34;kick it on DotNetKicks.com&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
